<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1013" width="0.2" height="15.0" fill="rgb(254,72,20)" rx="2" ry="2" />
<text  x="1170.14" y="1023.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (3 samples, 0.05%)</title><rect x="116.1" y="1605" width="0.5" height="15.0" fill="rgb(227,33,2)" rx="2" ry="2" />
<text  x="119.07" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1525" width="0.2" height="15.0" fill="rgb(252,216,4)" rx="2" ry="2" />
<text  x="1170.32" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1125" width="0.2" height="15.0" fill="rgb(216,21,26)" rx="2" ry="2" />
<text  x="168.54" y="1135.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.02%)</title><rect x="597.1" y="1989" width="0.2" height="15.0" fill="rgb(220,221,13)" rx="2" ry="2" />
<text  x="600.14" y="1999.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="169.6" y="1589" width="0.2" height="15.0" fill="rgb(245,86,38)" rx="2" ry="2" />
<text  x="172.64" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (179 samples, 2.71%)</title><rect x="133.2" y="1877" width="32.0" height="15.0" fill="rgb(216,176,26)" rx="2" ry="2" />
<text  x="136.21" y="1887.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="645" width="0.1" height="15.0" fill="rgb(221,23,38)" rx="2" ry="2" />
<text  x="1169.96" y="655.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="713.4" y="1861" width="0.4" height="15.0" fill="rgb(240,179,53)" rx="2" ry="2" />
<text  x="716.39" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (155 samples, 2.35%)</title><rect x="105.4" y="1941" width="27.6" height="15.0" fill="rgb(246,21,15)" rx="2" ry="2" />
<text  x="108.36" y="1951.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="437" width="0.2" height="15.0" fill="rgb(218,176,1)" rx="2" ry="2" />
<text  x="1170.32" y="447.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (1 samples, 0.02%)</title><rect x="91.2" y="1989" width="0.2" height="15.0" fill="rgb(205,122,6)" rx="2" ry="2" />
<text  x="94.25" y="1999.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.02%)</title><rect x="84.1" y="1925" width="0.2" height="15.0" fill="rgb(211,126,16)" rx="2" ry="2" />
<text  x="87.11" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (4 samples, 0.06%)</title><rect x="171.1" y="1573" width="0.7" height="15.0" fill="rgb(225,41,27)" rx="2" ry="2" />
<text  x="174.07" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1333" width="0.4" height="15.0" fill="rgb(244,229,41)" rx="2" ry="2" />
<text  x="1170.50" y="1343.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.05%)</title><rect x="154.5" y="1637" width="0.5" height="15.0" fill="rgb(216,74,45)" rx="2" ry="2" />
<text  x="157.46" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1333" width="0.5" height="15.0" fill="rgb(216,23,15)" rx="2" ry="2" />
<text  x="88.00" y="1343.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.02%)</title><rect x="436.8" y="1813" width="0.2" height="15.0" fill="rgb(235,190,8)" rx="2" ry="2" />
<text  x="439.79" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1925" width="0.3" height="15.0" fill="rgb(240,75,28)" rx="2" ry="2" />
<text  x="168.36" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="198.9" y="1861" width="0.4" height="15.0" fill="rgb(247,50,1)" rx="2" ry="2" />
<text  x="201.93" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="501" width="0.4" height="15.0" fill="rgb(239,12,0)" rx="2" ry="2" />
<text  x="1170.50" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="997" width="0.2" height="15.0" fill="rgb(223,174,26)" rx="2" ry="2" />
<text  x="136.04" y="1007.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.02%)</title><rect x="876.1" y="1973" width="0.1" height="15.0" fill="rgb(224,192,48)" rx="2" ry="2" />
<text  x="879.07" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="293" width="0.3" height="15.0" fill="rgb(245,125,54)" rx="2" ry="2" />
<text  x="88.18" y="303.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (1 samples, 0.02%)</title><rect x="597.3" y="1813" width="0.2" height="15.0" fill="rgb(233,201,44)" rx="2" ry="2" />
<text  x="600.32" y="1823.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (3 samples, 0.05%)</title><rect x="899.6" y="1877" width="0.6" height="15.0" fill="rgb(236,199,12)" rx="2" ry="2" />
<text  x="902.64" y="1887.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="172.5" y="1589" width="0.2" height="15.0" fill="rgb(219,143,13)" rx="2" ry="2" />
<text  x="175.50" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1877" width="0.1" height="15.0" fill="rgb(208,59,27)" rx="2" ry="2" />
<text  x="1169.96" y="1887.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1 samples, 0.02%)</title><rect x="597.5" y="2005" width="0.2" height="15.0" fill="rgb(240,67,4)" rx="2" ry="2" />
<text  x="600.50" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.06%)</title><rect x="200.0" y="1877" width="0.7" height="15.0" fill="rgb(232,157,42)" rx="2" ry="2" />
<text  x="203.00" y="1887.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (1 samples, 0.02%)</title><rect x="604.6" y="1909" width="0.2" height="15.0" fill="rgb(226,115,11)" rx="2" ry="2" />
<text  x="607.64" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1685" width="0.2" height="15.0" fill="rgb(225,97,34)" rx="2" ry="2" />
<text  x="1170.14" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1765" width="0.2" height="15.0" fill="rgb(208,108,1)" rx="2" ry="2" />
<text  x="136.04" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1893" width="0.1" height="15.0" fill="rgb(221,46,34)" rx="2" ry="2" />
<text  x="1169.96" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_in_bracket (1 samples, 0.02%)</title><rect x="140.0" y="1557" width="0.2" height="15.0" fill="rgb(248,180,48)" rx="2" ry="2" />
<text  x="143.00" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="149" width="0.2" height="15.0" fill="rgb(250,152,34)" rx="2" ry="2" />
<text  x="1170.32" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1685" width="0.1" height="15.0" fill="rgb(250,24,3)" rx="2" ry="2" />
<text  x="1169.96" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (18 samples, 0.27%)</title><rect x="153.4" y="1653" width="3.2" height="15.0" fill="rgb(249,182,31)" rx="2" ry="2" />
<text  x="156.39" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1717" width="0.5" height="15.0" fill="rgb(233,93,32)" rx="2" ry="2" />
<text  x="88.00" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="757" width="0.4" height="15.0" fill="rgb(226,227,6)" rx="2" ry="2" />
<text  x="1170.50" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1461" width="0.1" height="15.0" fill="rgb(213,103,42)" rx="2" ry="2" />
<text  x="1169.96" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1717" width="0.2" height="15.0" fill="rgb(230,196,41)" rx="2" ry="2" />
<text  x="1170.32" y="1727.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.05%)</title><rect x="828.0" y="1893" width="0.6" height="15.0" fill="rgb(245,207,50)" rx="2" ry="2" />
<text  x="831.04" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1077" width="0.2" height="15.0" fill="rgb(231,65,2)" rx="2" ry="2" />
<text  x="136.04" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="949" width="0.2" height="15.0" fill="rgb(230,49,46)" rx="2" ry="2" />
<text  x="203.54" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (32 samples, 0.48%)</title><rect x="105.4" y="1621" width="5.7" height="15.0" fill="rgb(243,65,17)" rx="2" ry="2" />
<text  x="108.36" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="2005" width="0.2" height="15.0" fill="rgb(220,107,21)" rx="2" ry="2" />
<text  x="1170.14" y="2015.5" ></text>
</g>
<g >
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.02%)</title><rect x="712.1" y="1781" width="0.2" height="15.0" fill="rgb(223,185,1)" rx="2" ry="2" />
<text  x="715.14" y="1791.5" ></text>
</g>
<g >
<title>nlohmann::operator== (1 samples, 0.02%)</title><rect x="599.1" y="1925" width="0.2" height="15.0" fill="rgb(206,82,48)" rx="2" ry="2" />
<text  x="602.11" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="69" width="0.4" height="15.0" fill="rgb(214,165,27)" rx="2" ry="2" />
<text  x="1170.50" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="165" width="0.2" height="15.0" fill="rgb(240,85,33)" rx="2" ry="2" />
<text  x="136.04" y="175.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.02%)</title><rect x="452.0" y="1829" width="0.1" height="15.0" fill="rgb(220,149,24)" rx="2" ry="2" />
<text  x="454.96" y="1839.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.02%)</title><rect x="876.1" y="1877" width="0.1" height="15.0" fill="rgb(229,23,1)" rx="2" ry="2" />
<text  x="879.07" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="213" width="0.1" height="15.0" fill="rgb(245,29,51)" rx="2" ry="2" />
<text  x="1169.96" y="223.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (41 samples, 0.62%)</title><rect x="583.9" y="1973" width="7.3" height="15.0" fill="rgb(209,203,26)" rx="2" ry="2" />
<text  x="586.93" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1893" width="0.2" height="15.0" fill="rgb(235,174,23)" rx="2" ry="2" />
<text  x="1170.32" y="1903.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,406 samples, 21.28%)</title><rect x="598.9" y="2005" width="251.1" height="15.0" fill="rgb(228,143,30)" rx="2" ry="2" />
<text  x="601.93" y="2015.5" >std::_Function_handler&lt;std::uniqu..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="594.1" y="1957" width="0.4" height="15.0" fill="rgb(220,101,26)" rx="2" ry="2" />
<text  x="597.11" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1125" width="0.2" height="15.0" fill="rgb(230,219,50)" rx="2" ry="2" />
<text  x="1170.14" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="773" width="0.2" height="15.0" fill="rgb(221,229,14)" rx="2" ry="2" />
<text  x="203.54" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1045" width="0.2" height="15.0" fill="rgb(224,118,8)" rx="2" ry="2" />
<text  x="203.18" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1093" width="0.2" height="15.0" fill="rgb(206,106,41)" rx="2" ry="2" />
<text  x="136.04" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1701" width="0.4" height="15.0" fill="rgb(217,216,0)" rx="2" ry="2" />
<text  x="1170.50" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="533" width="0.3" height="15.0" fill="rgb(240,91,40)" rx="2" ry="2" />
<text  x="88.18" y="543.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="105.2" y="1941" width="0.2" height="15.0" fill="rgb(205,220,5)" rx="2" ry="2" />
<text  x="108.18" y="1951.5" ></text>
</g>
<g >
<title>page_fault (5 samples, 0.08%)</title><rect x="852.1" y="2021" width="0.9" height="15.0" fill="rgb(220,20,22)" rx="2" ry="2" />
<text  x="855.14" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (1 samples, 0.02%)</title><rect x="180.2" y="1733" width="0.2" height="15.0" fill="rgb(237,45,43)" rx="2" ry="2" />
<text  x="183.18" y="1743.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.02%)</title><rect x="89.6" y="1925" width="0.2" height="15.0" fill="rgb(249,71,46)" rx="2" ry="2" />
<text  x="92.64" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (3 samples, 0.05%)</title><rect x="926.8" y="2053" width="0.5" height="15.0" fill="rgb(252,95,10)" rx="2" ry="2" />
<text  x="929.79" y="2063.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="179.5" y="1621" width="0.1" height="15.0" fill="rgb(242,75,54)" rx="2" ry="2" />
<text  x="182.46" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1941" width="0.2" height="15.0" fill="rgb(239,129,53)" rx="2" ry="2" />
<text  x="1170.14" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="933" width="0.2" height="15.0" fill="rgb(247,108,32)" rx="2" ry="2" />
<text  x="1170.14" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.02%)</title><rect x="165.2" y="1845" width="0.2" height="15.0" fill="rgb(242,161,12)" rx="2" ry="2" />
<text  x="168.18" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="853" width="0.2" height="15.0" fill="rgb(223,46,18)" rx="2" ry="2" />
<text  x="136.04" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1045" width="0.4" height="15.0" fill="rgb(234,148,9)" rx="2" ry="2" />
<text  x="1170.50" y="1055.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (1 samples, 0.02%)</title><rect x="591.2" y="1973" width="0.2" height="15.0" fill="rgb(248,210,45)" rx="2" ry="2" />
<text  x="594.25" y="1983.5" ></text>
</g>
<g >
<title>ComputeClusterWeight (342 samples, 5.18%)</title><rect x="105.2" y="1989" width="61.0" height="15.0" fill="rgb(212,56,9)" rx="2" ry="2" />
<text  x="108.18" y="1999.5" >Comput..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1157" width="0.5" height="15.0" fill="rgb(248,20,28)" rx="2" ry="2" />
<text  x="88.00" y="1167.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="621.2" y="1845" width="0.4" height="15.0" fill="rgb(250,66,0)" rx="2" ry="2" />
<text  x="624.25" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="485" width="0.2" height="15.0" fill="rgb(217,180,1)" rx="2" ry="2" />
<text  x="1170.14" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="709" width="0.1" height="15.0" fill="rgb(215,194,35)" rx="2" ry="2" />
<text  x="1169.96" y="719.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.03%)</title><rect x="427.5" y="1829" width="0.4" height="15.0" fill="rgb(246,14,7)" rx="2" ry="2" />
<text  x="430.50" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1637" width="0.2" height="15.0" fill="rgb(214,159,5)" rx="2" ry="2" />
<text  x="203.54" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="165" width="0.2" height="15.0" fill="rgb(251,44,0)" rx="2" ry="2" />
<text  x="1170.14" y="175.5" ></text>
</g>
<g >
<title>new_sync_read (3 samples, 0.05%)</title><rect x="899.6" y="1941" width="0.6" height="15.0" fill="rgb(211,27,29)" rx="2" ry="2" />
<text  x="902.64" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1061" width="0.5" height="15.0" fill="rgb(233,185,47)" rx="2" ry="2" />
<text  x="88.00" y="1071.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (197 samples, 2.98%)</title><rect x="678.6" y="1877" width="35.2" height="15.0" fill="rgb(231,39,8)" rx="2" ry="2" />
<text  x="681.57" y="1887.5" >on..</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="425.2" y="1861" width="0.2" height="15.0" fill="rgb(248,226,10)" rx="2" ry="2" />
<text  x="428.18" y="1871.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="713.4" y="1845" width="0.4" height="15.0" fill="rgb(207,197,16)" rx="2" ry="2" />
<text  x="716.39" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1605" width="0.2" height="15.0" fill="rgb(239,208,1)" rx="2" ry="2" />
<text  x="203.18" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="133.4" y="1653" width="0.4" height="15.0" fill="rgb(218,145,53)" rx="2" ry="2" />
<text  x="136.39" y="1663.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="713.2" y="1829" width="0.2" height="15.0" fill="rgb(233,153,34)" rx="2" ry="2" />
<text  x="716.21" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="437" width="0.2" height="15.0" fill="rgb(217,219,22)" rx="2" ry="2" />
<text  x="1170.14" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1333" width="0.2" height="15.0" fill="rgb(248,214,38)" rx="2" ry="2" />
<text  x="1170.14" y="1343.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.06%)</title><rect x="104.5" y="1861" width="0.7" height="15.0" fill="rgb(212,36,38)" rx="2" ry="2" />
<text  x="107.46" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.06%)</title><rect x="200.0" y="1845" width="0.7" height="15.0" fill="rgb(231,29,39)" rx="2" ry="2" />
<text  x="203.00" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1205" width="0.1" height="15.0" fill="rgb(209,44,31)" rx="2" ry="2" />
<text  x="1169.96" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (175 samples, 2.65%)</title><rect x="167.5" y="1861" width="31.3" height="15.0" fill="rgb(231,78,24)" rx="2" ry="2" />
<text  x="170.50" y="1871.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="997" width="0.2" height="15.0" fill="rgb(247,181,45)" rx="2" ry="2" />
<text  x="1170.32" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (1 samples, 0.02%)</title><rect x="173.6" y="1637" width="0.2" height="15.0" fill="rgb(233,34,50)" rx="2" ry="2" />
<text  x="176.57" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="69" width="0.2" height="15.0" fill="rgb(206,168,54)" rx="2" ry="2" />
<text  x="1170.32" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1941" width="0.2" height="15.0" fill="rgb(215,191,10)" rx="2" ry="2" />
<text  x="1170.32" y="1951.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="112.7" y="1621" width="0.2" height="15.0" fill="rgb(245,58,42)" rx="2" ry="2" />
<text  x="115.68" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="677" width="0.4" height="15.0" fill="rgb(253,205,39)" rx="2" ry="2" />
<text  x="1170.50" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1125" width="0.1" height="15.0" fill="rgb(219,32,21)" rx="2" ry="2" />
<text  x="1169.96" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="933" width="0.2" height="15.0" fill="rgb(237,67,23)" rx="2" ry="2" />
<text  x="203.54" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1781" width="0.2" height="15.0" fill="rgb(210,67,44)" rx="2" ry="2" />
<text  x="1170.14" y="1791.5" ></text>
</g>
<g >
<title>__libc_start_main (2,845 samples, 43.05%)</title><rect x="90.5" y="2037" width="508.1" height="15.0" fill="rgb(217,55,26)" rx="2" ry="2" />
<text  x="93.54" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1781" width="0.3" height="15.0" fill="rgb(233,218,39)" rx="2" ry="2" />
<text  x="168.36" y="1791.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="198.4" y="1701" width="0.2" height="15.0" fill="rgb(237,212,40)" rx="2" ry="2" />
<text  x="201.39" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1157" width="0.2" height="15.0" fill="rgb(216,151,30)" rx="2" ry="2" />
<text  x="1170.14" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (20 samples, 0.30%)</title><rect x="113.2" y="1621" width="3.6" height="15.0" fill="rgb(223,87,54)" rx="2" ry="2" />
<text  x="116.21" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1413" width="0.5" height="15.0" fill="rgb(228,210,17)" rx="2" ry="2" />
<text  x="88.00" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="151.8" y="1717" width="5.3" height="15.0" fill="rgb(235,101,54)" rx="2" ry="2" />
<text  x="154.79" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (1 samples, 0.02%)</title><rect x="862.7" y="2005" width="0.2" height="15.0" fill="rgb(246,70,22)" rx="2" ry="2" />
<text  x="865.68" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.08%)</title><rect x="123.2" y="1669" width="0.9" height="15.0" fill="rgb(219,101,12)" rx="2" ry="2" />
<text  x="126.21" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (35 samples, 0.53%)</title><rect x="185.9" y="1749" width="6.2" height="15.0" fill="rgb(220,223,44)" rx="2" ry="2" />
<text  x="188.89" y="1759.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%)</title><rect x="1189.3" y="2053" width="0.2" height="15.0" fill="rgb(230,124,16)" rx="2" ry="2" />
<text  x="1192.29" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="437" width="0.3" height="15.0" fill="rgb(248,212,20)" rx="2" ry="2" />
<text  x="88.18" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="629" width="0.2" height="15.0" fill="rgb(246,13,2)" rx="2" ry="2" />
<text  x="1170.32" y="639.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1045" width="0.5" height="15.0" fill="rgb(221,35,23)" rx="2" ry="2" />
<text  x="88.00" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (31 samples, 0.47%)</title><rect x="180.4" y="1733" width="5.5" height="15.0" fill="rgb(207,113,23)" rx="2" ry="2" />
<text  x="183.36" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="325" width="0.4" height="15.0" fill="rgb(214,35,14)" rx="2" ry="2" />
<text  x="1170.50" y="335.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1861" width="0.5" height="15.0" fill="rgb(219,113,2)" rx="2" ry="2" />
<text  x="88.00" y="1871.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.03%)</title><rect x="594.1" y="1925" width="0.4" height="15.0" fill="rgb(211,47,22)" rx="2" ry="2" />
<text  x="597.11" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="293" width="0.4" height="15.0" fill="rgb(227,32,46)" rx="2" ry="2" />
<text  x="1170.50" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1845" width="0.3" height="15.0" fill="rgb(251,195,36)" rx="2" ry="2" />
<text  x="168.36" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="197" width="0.3" height="15.0" fill="rgb(243,58,52)" rx="2" ry="2" />
<text  x="88.18" y="207.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (70 samples, 1.06%)</title><rect x="91.4" y="1989" width="12.5" height="15.0" fill="rgb(222,119,43)" rx="2" ry="2" />
<text  x="94.43" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="341" width="0.2" height="15.0" fill="rgb(210,92,4)" rx="2" ry="2" />
<text  x="1170.32" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.08%)</title><rect x="148.6" y="1605" width="0.9" height="15.0" fill="rgb(205,215,3)" rx="2" ry="2" />
<text  x="151.57" y="1615.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (29 samples, 0.44%)</title><rect x="446.2" y="1973" width="5.2" height="15.0" fill="rgb(250,54,6)" rx="2" ry="2" />
<text  x="449.25" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1733" width="0.2" height="15.0" fill="rgb(237,45,27)" rx="2" ry="2" />
<text  x="1170.14" y="1743.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (1,322 samples, 20.01%)</title><rect x="608.4" y="1909" width="236.1" height="15.0" fill="rgb(234,209,18)" rx="2" ry="2" />
<text  x="611.39" y="1919.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="452.0" y="1941" width="0.1" height="15.0" fill="rgb(242,163,38)" rx="2" ry="2" />
<text  x="454.96" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1909" width="0.5" height="15.0" fill="rgb(215,180,19)" rx="2" ry="2" />
<text  x="88.00" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1797" width="0.2" height="15.0" fill="rgb(249,218,52)" rx="2" ry="2" />
<text  x="136.04" y="1807.5" ></text>
</g>
<g >
<title>__handle_mm_fault (39 samples, 0.59%)</title><rect x="430.4" y="1893" width="6.9" height="15.0" fill="rgb(240,32,29)" rx="2" ry="2" />
<text  x="433.36" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1589" width="0.2" height="15.0" fill="rgb(231,200,35)" rx="2" ry="2" />
<text  x="1170.14" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (30 samples, 0.45%)</title><rect x="117.7" y="1669" width="5.3" height="15.0" fill="rgb(232,51,4)" rx="2" ry="2" />
<text  x="120.68" y="1679.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.06%)</title><rect x="121.6" y="1621" width="0.7" height="15.0" fill="rgb(238,79,15)" rx="2" ry="2" />
<text  x="124.61" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1605" width="0.4" height="15.0" fill="rgb(213,139,2)" rx="2" ry="2" />
<text  x="1170.50" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1237" width="0.4" height="15.0" fill="rgb(243,227,9)" rx="2" ry="2" />
<text  x="1170.50" y="1247.5" ></text>
</g>
<g >
<title>__do_page_fault (46 samples, 0.70%)</title><rect x="429.1" y="1925" width="8.2" height="15.0" fill="rgb(246,207,27)" rx="2" ry="2" />
<text  x="432.11" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1845" width="0.2" height="15.0" fill="rgb(212,228,21)" rx="2" ry="2" />
<text  x="1170.14" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="517" width="0.1" height="15.0" fill="rgb(235,158,27)" rx="2" ry="2" />
<text  x="1169.96" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1189.1" y="2037" width="0.2" height="15.0" fill="rgb(233,134,34)" rx="2" ry="2" />
<text  x="1192.11" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="344.1" y="1989" width="0.2" height="15.0" fill="rgb(234,198,7)" rx="2" ry="2" />
<text  x="347.11" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1701" width="0.2" height="15.0" fill="rgb(245,129,43)" rx="2" ry="2" />
<text  x="203.18" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="181" width="0.2" height="15.0" fill="rgb(234,3,5)" rx="2" ry="2" />
<text  x="1170.14" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1509" width="0.2" height="15.0" fill="rgb(207,138,2)" rx="2" ry="2" />
<text  x="203.18" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1477" width="0.2" height="15.0" fill="rgb(217,160,19)" rx="2" ry="2" />
<text  x="136.04" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="693" width="0.2" height="15.0" fill="rgb(245,222,50)" rx="2" ry="2" />
<text  x="1170.14" y="703.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="138.6" y="1557" width="0.2" height="15.0" fill="rgb(238,137,48)" rx="2" ry="2" />
<text  x="141.57" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="853" width="0.2" height="15.0" fill="rgb(240,43,38)" rx="2" ry="2" />
<text  x="203.54" y="863.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (4 samples, 0.06%)</title><rect x="89.8" y="1861" width="0.7" height="15.0" fill="rgb(216,62,10)" rx="2" ry="2" />
<text  x="92.82" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1749" width="0.5" height="15.0" fill="rgb(216,64,5)" rx="2" ry="2" />
<text  x="88.00" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="277" width="0.4" height="15.0" fill="rgb(243,91,30)" rx="2" ry="2" />
<text  x="1170.50" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (42 samples, 0.64%)</title><rect x="157.1" y="1797" width="7.5" height="15.0" fill="rgb(246,36,12)" rx="2" ry="2" />
<text  x="160.14" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1813" width="0.3" height="15.0" fill="rgb(221,56,45)" rx="2" ry="2" />
<text  x="168.36" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="869" width="0.2" height="15.0" fill="rgb(234,9,46)" rx="2" ry="2" />
<text  x="136.04" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1093" width="0.2" height="15.0" fill="rgb(223,141,38)" rx="2" ry="2" />
<text  x="1170.14" y="1103.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="190.7" y="1653" width="0.2" height="15.0" fill="rgb(224,7,22)" rx="2" ry="2" />
<text  x="193.71" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="773" width="0.2" height="15.0" fill="rgb(240,106,24)" rx="2" ry="2" />
<text  x="1170.32" y="783.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.02%)</title><rect x="597.1" y="1909" width="0.2" height="15.0" fill="rgb(207,32,27)" rx="2" ry="2" />
<text  x="600.14" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6 samples, 0.09%)</title><rect x="85.5" y="2005" width="1.1" height="15.0" fill="rgb(231,25,9)" rx="2" ry="2" />
<text  x="88.54" y="2015.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.02%)</title><rect x="595.7" y="1893" width="0.2" height="15.0" fill="rgb(252,110,41)" rx="2" ry="2" />
<text  x="598.71" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (41 samples, 0.62%)</title><rect x="144.5" y="1749" width="7.3" height="15.0" fill="rgb(214,101,7)" rx="2" ry="2" />
<text  x="147.46" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1125" width="0.2" height="15.0" fill="rgb(220,6,9)" rx="2" ry="2" />
<text  x="203.18" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (17 samples, 0.26%)</title><rect x="188.2" y="1669" width="3.0" height="15.0" fill="rgb(205,193,0)" rx="2" ry="2" />
<text  x="191.21" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.08%)</title><rect x="120.7" y="1621" width="0.9" height="15.0" fill="rgb(211,77,13)" rx="2" ry="2" />
<text  x="123.71" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1557" width="0.2" height="15.0" fill="rgb(207,100,47)" rx="2" ry="2" />
<text  x="1170.32" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="181" width="0.3" height="15.0" fill="rgb(227,98,23)" rx="2" ry="2" />
<text  x="88.18" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (180 samples, 2.72%)</title><rect x="133.2" y="1941" width="32.2" height="15.0" fill="rgb(249,149,10)" rx="2" ry="2" />
<text  x="136.21" y="1951.5" >st..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1573" width="0.5" height="15.0" fill="rgb(206,39,37)" rx="2" ry="2" />
<text  x="88.00" y="1583.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (65 samples, 0.98%)</title><rect x="1167.9" y="2037" width="11.6" height="15.0" fill="rgb(215,96,43)" rx="2" ry="2" />
<text  x="1170.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1125" width="0.4" height="15.0" fill="rgb(212,105,44)" rx="2" ry="2" />
<text  x="1170.50" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1925" width="0.2" height="15.0" fill="rgb(236,39,51)" rx="2" ry="2" />
<text  x="136.04" y="1935.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (9 samples, 0.14%)</title><rect x="40.2" y="2053" width="1.6" height="15.0" fill="rgb(246,23,0)" rx="2" ry="2" />
<text  x="43.18" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="373" width="0.2" height="15.0" fill="rgb(244,215,14)" rx="2" ry="2" />
<text  x="1170.14" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="517" width="0.2" height="15.0" fill="rgb(249,110,27)" rx="2" ry="2" />
<text  x="1170.14" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1157" width="0.2" height="15.0" fill="rgb(252,83,14)" rx="2" ry="2" />
<text  x="168.54" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1445" width="0.2" height="15.0" fill="rgb(209,128,37)" rx="2" ry="2" />
<text  x="168.54" y="1455.5" ></text>
</g>
<g >
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="43.9" y="1925" width="0.2" height="15.0" fill="rgb(239,157,49)" rx="2" ry="2" />
<text  x="46.93" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="517" width="0.2" height="15.0" fill="rgb(213,175,29)" rx="2" ry="2" />
<text  x="1170.32" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform (6 samples, 0.09%)</title><rect x="1145.7" y="2053" width="1.1" height="15.0" fill="rgb(232,211,10)" rx="2" ry="2" />
<text  x="1148.71" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1061" width="0.2" height="15.0" fill="rgb(240,193,39)" rx="2" ry="2" />
<text  x="168.54" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1797" width="0.5" height="15.0" fill="rgb(244,55,7)" rx="2" ry="2" />
<text  x="88.00" y="1807.5" ></text>
</g>
<g >
<title>syscall (4 samples, 0.06%)</title><rect x="104.5" y="1973" width="0.7" height="15.0" fill="rgb(245,131,2)" rx="2" ry="2" />
<text  x="107.46" y="1983.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="163.6" y="1669" width="0.2" height="15.0" fill="rgb(225,110,10)" rx="2" ry="2" />
<text  x="166.57" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (41 samples, 0.62%)</title><rect x="144.5" y="1733" width="7.3" height="15.0" fill="rgb(238,218,2)" rx="2" ry="2" />
<text  x="147.46" y="1743.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.11%)</title><rect x="594.5" y="2005" width="1.2" height="15.0" fill="rgb(247,174,37)" rx="2" ry="2" />
<text  x="597.46" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1189" width="0.1" height="15.0" fill="rgb(210,107,38)" rx="2" ry="2" />
<text  x="1169.96" y="1199.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (8 samples, 0.12%)</title><rect x="623.9" y="1893" width="1.5" height="15.0" fill="rgb(219,25,22)" rx="2" ry="2" />
<text  x="626.93" y="1903.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (1 samples, 0.02%)</title><rect x="139.5" y="1573" width="0.1" height="15.0" fill="rgb(236,192,10)" rx="2" ry="2" />
<text  x="142.46" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="837" width="0.2" height="15.0" fill="rgb(246,69,14)" rx="2" ry="2" />
<text  x="1170.14" y="847.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.03%)</title><rect x="344.3" y="1973" width="0.3" height="15.0" fill="rgb(252,86,44)" rx="2" ry="2" />
<text  x="347.29" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="901" width="0.4" height="15.0" fill="rgb(231,39,51)" rx="2" ry="2" />
<text  x="1170.50" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1669" width="0.2" height="15.0" fill="rgb(240,119,53)" rx="2" ry="2" />
<text  x="1170.32" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1429" width="0.2" height="15.0" fill="rgb(219,22,29)" rx="2" ry="2" />
<text  x="1170.32" y="1439.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.02%)</title><rect x="84.3" y="1909" width="0.2" height="15.0" fill="rgb(249,225,49)" rx="2" ry="2" />
<text  x="87.29" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1221" width="0.2" height="15.0" fill="rgb(253,8,12)" rx="2" ry="2" />
<text  x="1170.32" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1701" width="0.2" height="15.0" fill="rgb(253,170,9)" rx="2" ry="2" />
<text  x="1170.14" y="1711.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="43.2" y="2021" width="0.2" height="15.0" fill="rgb(239,169,27)" rx="2" ry="2" />
<text  x="46.21" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.7" y="37" width="0.2" height="15.0" fill="rgb(225,176,33)" rx="2" ry="2" />
<text  x="1170.68" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (1 samples, 0.02%)</title><rect x="608.2" y="1893" width="0.2" height="15.0" fill="rgb(224,201,0)" rx="2" ry="2" />
<text  x="611.21" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="917" width="0.2" height="15.0" fill="rgb(236,164,35)" rx="2" ry="2" />
<text  x="136.04" y="927.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="917" width="0.5" height="15.0" fill="rgb(220,65,21)" rx="2" ry="2" />
<text  x="88.00" y="927.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="109.3" y="1573" width="0.2" height="15.0" fill="rgb(222,69,49)" rx="2" ry="2" />
<text  x="112.29" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1557" width="0.2" height="15.0" fill="rgb(240,148,14)" rx="2" ry="2" />
<text  x="1170.14" y="1567.5" ></text>
</g>
<g >
<title>__do_page_fault (8 samples, 0.12%)</title><rect x="711.8" y="1829" width="1.4" height="15.0" fill="rgb(213,81,10)" rx="2" ry="2" />
<text  x="714.79" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1637" width="0.3" height="15.0" fill="rgb(229,200,53)" rx="2" ry="2" />
<text  x="168.36" y="1647.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.02%)</title><rect x="926.4" y="2021" width="0.2" height="15.0" fill="rgb(254,189,40)" rx="2" ry="2" />
<text  x="929.43" y="2031.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="875.5" y="2005" width="0.2" height="15.0" fill="rgb(234,124,15)" rx="2" ry="2" />
<text  x="878.54" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (70 samples, 1.06%)</title><rect x="91.4" y="1957" width="12.5" height="15.0" fill="rgb(207,102,17)" rx="2" ry="2" />
<text  x="94.43" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="229" width="0.3" height="15.0" fill="rgb(230,75,43)" rx="2" ry="2" />
<text  x="88.18" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1045" width="0.2" height="15.0" fill="rgb(226,179,4)" rx="2" ry="2" />
<text  x="203.54" y="1055.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (1 samples, 0.02%)</title><rect x="178.4" y="1605" width="0.2" height="15.0" fill="rgb(231,145,9)" rx="2" ry="2" />
<text  x="181.39" y="1615.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.03%)</title><rect x="436.6" y="1829" width="0.4" height="15.0" fill="rgb(223,135,40)" rx="2" ry="2" />
<text  x="439.61" y="1839.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.02%)</title><rect x="852.7" y="1925" width="0.2" height="15.0" fill="rgb(228,219,35)" rx="2" ry="2" />
<text  x="855.68" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1733" width="0.2" height="15.0" fill="rgb(207,211,50)" rx="2" ry="2" />
<text  x="203.18" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (13 samples, 0.20%)</title><rect x="124.6" y="1669" width="2.4" height="15.0" fill="rgb(223,16,47)" rx="2" ry="2" />
<text  x="127.64" y="1679.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_0&gt; &gt; (3 samples, 0.05%)</title><rect x="597.9" y="2005" width="0.5" height="15.0" fill="rgb(242,164,3)" rx="2" ry="2" />
<text  x="600.86" y="2015.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (1,396 samples, 21.13%)</title><rect x="344.8" y="1989" width="249.3" height="15.0" fill="rgb(237,153,46)" rx="2" ry="2" />
<text  x="347.82" y="1999.5" >TSlinkClustering::ClusterBatch</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (35 samples, 0.53%)</title><rect x="185.9" y="1685" width="6.2" height="15.0" fill="rgb(239,96,29)" rx="2" ry="2" />
<text  x="188.89" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="773" width="0.1" height="15.0" fill="rgb(238,18,0)" rx="2" ry="2" />
<text  x="1169.96" y="783.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="109.6" y="1573" width="0.2" height="15.0" fill="rgb(216,92,16)" rx="2" ry="2" />
<text  x="112.64" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="341" width="0.2" height="15.0" fill="rgb(213,204,54)" rx="2" ry="2" />
<text  x="1170.14" y="351.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (10 samples, 0.15%)</title><rect x="757.7" y="1893" width="1.8" height="15.0" fill="rgb(221,96,33)" rx="2" ry="2" />
<text  x="760.68" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1109" width="0.2" height="15.0" fill="rgb(221,195,53)" rx="2" ry="2" />
<text  x="1170.14" y="1119.5" ></text>
</g>
<g >
<title>syscall (19 samples, 0.29%)</title><rect x="43.4" y="2021" width="3.4" height="15.0" fill="rgb(252,182,54)" rx="2" ry="2" />
<text  x="46.39" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (4,645 samples, 70.29%)</title><rect x="46.8" y="2053" width="829.4" height="15.0" fill="rgb(240,15,25)" rx="2" ry="2" />
<text  x="49.79" y="2063.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="853" width="0.3" height="15.0" fill="rgb(243,118,11)" rx="2" ry="2" />
<text  x="88.18" y="863.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (1 samples, 0.02%)</title><rect x="104.1" y="1973" width="0.2" height="15.0" fill="rgb(244,28,3)" rx="2" ry="2" />
<text  x="107.11" y="1983.5" ></text>
</g>
<g >
<title>scsi_finish_command (1 samples, 0.02%)</title><rect x="713.2" y="1765" width="0.2" height="15.0" fill="rgb(248,192,4)" rx="2" ry="2" />
<text  x="716.21" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="949" width="0.2" height="15.0" fill="rgb(206,155,14)" rx="2" ry="2" />
<text  x="1170.14" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (23 samples, 0.35%)</title><rect x="123.0" y="1701" width="4.1" height="15.0" fill="rgb(207,201,45)" rx="2" ry="2" />
<text  x="126.04" y="1711.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.02%)</title><rect x="595.9" y="1893" width="0.2" height="15.0" fill="rgb(253,2,18)" rx="2" ry="2" />
<text  x="598.89" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="613" width="0.2" height="15.0" fill="rgb(248,70,15)" rx="2" ry="2" />
<text  x="203.18" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="965" width="0.2" height="15.0" fill="rgb(246,10,18)" rx="2" ry="2" />
<text  x="136.04" y="975.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case@plt (1 samples, 0.02%)</title><rect x="757.5" y="1893" width="0.2" height="15.0" fill="rgb(211,1,22)" rx="2" ry="2" />
<text  x="760.50" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (2 samples, 0.03%)</title><rect x="198.9" y="1877" width="0.4" height="15.0" fill="rgb(226,69,1)" rx="2" ry="2" />
<text  x="201.93" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="165.7" y="1957" width="0.2" height="15.0" fill="rgb(244,177,26)" rx="2" ry="2" />
<text  x="168.71" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="341" width="0.3" height="15.0" fill="rgb(208,103,9)" rx="2" ry="2" />
<text  x="88.18" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="166.1" y="1973" width="0.1" height="15.0" fill="rgb(235,160,18)" rx="2" ry="2" />
<text  x="169.07" y="1983.5" ></text>
</g>
<g >
<title>__munmap (2 samples, 0.03%)</title><rect x="595.7" y="2005" width="0.4" height="15.0" fill="rgb(225,229,52)" rx="2" ry="2" />
<text  x="598.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (15 samples, 0.23%)</title><rect x="169.8" y="1589" width="2.7" height="15.0" fill="rgb(221,209,47)" rx="2" ry="2" />
<text  x="172.82" y="1599.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="343.9" y="1957" width="0.2" height="15.0" fill="rgb(230,169,47)" rx="2" ry="2" />
<text  x="346.93" y="1967.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.03%)</title><rect x="595.7" y="1909" width="0.4" height="15.0" fill="rgb(251,199,44)" rx="2" ry="2" />
<text  x="598.71" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="757" width="0.2" height="15.0" fill="rgb(226,6,1)" rx="2" ry="2" />
<text  x="1170.32" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="469" width="0.1" height="15.0" fill="rgb(246,97,7)" rx="2" ry="2" />
<text  x="1169.96" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="981" width="0.1" height="15.0" fill="rgb(247,139,0)" rx="2" ry="2" />
<text  x="1169.96" y="991.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.03%)</title><rect x="595.7" y="1941" width="0.4" height="15.0" fill="rgb(254,42,18)" rx="2" ry="2" />
<text  x="598.71" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (41 samples, 0.62%)</title><rect x="144.5" y="1717" width="7.3" height="15.0" fill="rgb(235,197,32)" rx="2" ry="2" />
<text  x="147.46" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="805" width="0.2" height="15.0" fill="rgb(252,144,52)" rx="2" ry="2" />
<text  x="203.18" y="815.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1685" width="0.5" height="15.0" fill="rgb(227,57,0)" rx="2" ry="2" />
<text  x="88.00" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="198.9" y="1845" width="0.4" height="15.0" fill="rgb(227,177,42)" rx="2" ry="2" />
<text  x="201.93" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1573" width="0.2" height="15.0" fill="rgb(241,209,40)" rx="2" ry="2" />
<text  x="203.54" y="1583.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type@plt (1 samples, 0.02%)</title><rect x="604.8" y="1909" width="0.2" height="15.0" fill="rgb(249,16,11)" rx="2" ry="2" />
<text  x="607.82" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_subexpr_begin (1 samples, 0.02%)</title><rect x="199.3" y="1877" width="0.2" height="15.0" fill="rgb(224,222,1)" rx="2" ry="2" />
<text  x="202.29" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="821" width="0.2" height="15.0" fill="rgb(208,33,4)" rx="2" ry="2" />
<text  x="1170.32" y="831.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1301" width="0.5" height="15.0" fill="rgb(251,187,32)" rx="2" ry="2" />
<text  x="88.00" y="1311.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.02%)</title><rect x="875.4" y="2005" width="0.1" height="15.0" fill="rgb(247,216,32)" rx="2" ry="2" />
<text  x="878.36" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (62 samples, 0.94%)</title><rect x="133.4" y="1749" width="11.1" height="15.0" fill="rgb(246,108,24)" rx="2" ry="2" />
<text  x="136.39" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="874.5" y="2021" width="0.3" height="15.0" fill="rgb(233,146,5)" rx="2" ry="2" />
<text  x="877.46" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1237" width="0.2" height="15.0" fill="rgb(208,169,0)" rx="2" ry="2" />
<text  x="168.54" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="645" width="0.2" height="15.0" fill="rgb(237,152,1)" rx="2" ry="2" />
<text  x="1170.14" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.12%)</title><rect x="161.4" y="1669" width="1.5" height="15.0" fill="rgb(243,33,19)" rx="2" ry="2" />
<text  x="164.43" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="597" width="0.2" height="15.0" fill="rgb(243,201,40)" rx="2" ry="2" />
<text  x="1170.14" y="607.5" ></text>
</g>
<g >
<title>page_fault (46 samples, 0.70%)</title><rect x="429.1" y="1957" width="8.2" height="15.0" fill="rgb(225,159,9)" rx="2" ry="2" />
<text  x="432.11" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1333" width="0.2" height="15.0" fill="rgb(210,51,53)" rx="2" ry="2" />
<text  x="136.04" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="853" width="0.2" height="15.0" fill="rgb(231,61,34)" rx="2" ry="2" />
<text  x="1170.14" y="863.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.05%)</title><rect x="451.4" y="1973" width="0.6" height="15.0" fill="rgb(217,35,54)" rx="2" ry="2" />
<text  x="454.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (36 samples, 0.54%)</title><rect x="133.8" y="1653" width="6.4" height="15.0" fill="rgb(208,90,48)" rx="2" ry="2" />
<text  x="136.75" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1509" width="0.2" height="15.0" fill="rgb(222,131,0)" rx="2" ry="2" />
<text  x="1170.32" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="469" width="0.4" height="15.0" fill="rgb(234,96,20)" rx="2" ry="2" />
<text  x="1170.50" y="479.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="127.0" y="1669" width="0.1" height="15.0" fill="rgb(227,206,33)" rx="2" ry="2" />
<text  x="129.96" y="1679.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="178.6" y="1605" width="0.3" height="15.0" fill="rgb(250,34,7)" rx="2" ry="2" />
<text  x="181.57" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1701" width="0.5" height="15.0" fill="rgb(245,13,19)" rx="2" ry="2" />
<text  x="88.00" y="1711.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;@plt (2 samples, 0.03%)</title><rect x="593.6" y="1973" width="0.3" height="15.0" fill="rgb(224,78,19)" rx="2" ry="2" />
<text  x="596.57" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (28 samples, 0.42%)</title><rect x="127.3" y="1765" width="5.0" height="15.0" fill="rgb(241,226,43)" rx="2" ry="2" />
<text  x="130.32" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1237" width="0.2" height="15.0" fill="rgb(226,39,5)" rx="2" ry="2" />
<text  x="136.04" y="1247.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (11 samples, 0.17%)</title><rect x="606.2" y="1893" width="2.0" height="15.0" fill="rgb(205,173,19)" rx="2" ry="2" />
<text  x="609.25" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="132.5" y="1845" width="0.4" height="15.0" fill="rgb(245,78,45)" rx="2" ry="2" />
<text  x="135.50" y="1855.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.09%)</title><rect x="83.8" y="2005" width="1.0" height="15.0" fill="rgb(234,204,1)" rx="2" ry="2" />
<text  x="86.75" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (4 samples, 0.06%)</title><rect x="198.8" y="1893" width="0.7" height="15.0" fill="rgb(239,190,9)" rx="2" ry="2" />
<text  x="201.75" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1317" width="0.2" height="15.0" fill="rgb(225,56,54)" rx="2" ry="2" />
<text  x="203.18" y="1327.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (27 samples, 0.41%)</title><rect x="431.4" y="1861" width="4.8" height="15.0" fill="rgb(233,4,32)" rx="2" ry="2" />
<text  x="434.43" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1253" width="0.5" height="15.0" fill="rgb(245,96,21)" rx="2" ry="2" />
<text  x="88.00" y="1263.5" ></text>
</g>
<g >
<title>do_page_fault (11 samples, 0.17%)</title><rect x="38.2" y="2021" width="2.0" height="15.0" fill="rgb(223,160,12)" rx="2" ry="2" />
<text  x="41.21" y="2031.5" ></text>
</g>
<g >
<title>from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (1 samples, 0.02%)</title><rect x="599.1" y="1957" width="0.2" height="15.0" fill="rgb(245,14,22)" rx="2" ry="2" />
<text  x="602.11" y="1967.5" ></text>
</g>
<g >
<title>futex_wait (4 samples, 0.06%)</title><rect x="104.5" y="1893" width="0.7" height="15.0" fill="rgb(217,36,31)" rx="2" ry="2" />
<text  x="107.46" y="1903.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.08%)</title><rect x="1117.1" y="2053" width="0.9" height="15.0" fill="rgb(236,82,4)" rx="2" ry="2" />
<text  x="1120.14" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find@plt (2 samples, 0.03%)</title><rect x="846.4" y="1909" width="0.4" height="15.0" fill="rgb(216,21,39)" rx="2" ry="2" />
<text  x="849.43" y="1919.5" ></text>
</g>
<g >
<title>__vfs_read (3 samples, 0.05%)</title><rect x="899.6" y="1957" width="0.6" height="15.0" fill="rgb(221,93,54)" rx="2" ry="2" />
<text  x="902.64" y="1967.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.02%)</title><rect x="89.6" y="1973" width="0.2" height="15.0" fill="rgb(220,228,26)" rx="2" ry="2" />
<text  x="92.64" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (134 samples, 2.03%)</title><rect x="133.2" y="1781" width="23.9" height="15.0" fill="rgb(219,63,46)" rx="2" ry="2" />
<text  x="136.21" y="1791.5" >s..</text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (1 samples, 0.02%)</title><rect x="596.6" y="1909" width="0.2" height="15.0" fill="rgb(229,223,22)" rx="2" ry="2" />
<text  x="599.61" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (4 samples, 0.06%)</title><rect x="137.5" y="1557" width="0.7" height="15.0" fill="rgb(225,129,41)" rx="2" ry="2" />
<text  x="140.50" y="1567.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="593.2" y="1973" width="0.4" height="15.0" fill="rgb(205,165,1)" rx="2" ry="2" />
<text  x="596.21" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="111.1" y="1733" width="6.4" height="15.0" fill="rgb(210,229,16)" rx="2" ry="2" />
<text  x="114.07" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1381" width="0.2" height="15.0" fill="rgb(245,96,21)" rx="2" ry="2" />
<text  x="168.54" y="1391.5" ></text>
</g>
<g >
<title>RunFasttextClf (1 samples, 0.02%)</title><rect x="600.0" y="1973" width="0.2" height="15.0" fill="rgb(243,46,43)" rx="2" ry="2" />
<text  x="603.00" y="1983.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="756.2" y="1861" width="0.2" height="15.0" fill="rgb(236,177,23)" rx="2" ry="2" />
<text  x="759.25" y="1871.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="756.2" y="1877" width="0.2" height="15.0" fill="rgb(250,66,37)" rx="2" ry="2" />
<text  x="759.25" y="1887.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.02%)</title><rect x="621.4" y="1813" width="0.2" height="15.0" fill="rgb(222,2,0)" rx="2" ry="2" />
<text  x="624.43" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (4 samples, 0.06%)</title><rect x="149.5" y="1605" width="0.7" height="15.0" fill="rgb(238,222,52)" rx="2" ry="2" />
<text  x="152.46" y="1615.5" ></text>
</g>
<g >
<title>std::locale::locale (4 samples, 0.06%)</title><rect x="341.8" y="1989" width="0.7" height="15.0" fill="rgb(250,8,13)" rx="2" ry="2" />
<text  x="344.79" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="181" width="0.4" height="15.0" fill="rgb(239,57,28)" rx="2" ry="2" />
<text  x="1170.50" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="757" width="0.2" height="15.0" fill="rgb(209,42,8)" rx="2" ry="2" />
<text  x="136.04" y="767.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="343.9" y="1973" width="0.2" height="15.0" fill="rgb(217,39,28)" rx="2" ry="2" />
<text  x="346.93" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1045" width="0.2" height="15.0" fill="rgb(237,51,52)" rx="2" ry="2" />
<text  x="168.54" y="1055.5" ></text>
</g>
<g >
<title>Annotate (81 samples, 1.23%)</title><rect x="90.7" y="2005" width="14.5" height="15.0" fill="rgb(251,176,32)" rx="2" ry="2" />
<text  x="93.71" y="2015.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.02%)</title><rect x="852.9" y="1925" width="0.1" height="15.0" fill="rgb(227,21,30)" rx="2" ry="2" />
<text  x="855.86" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1429" width="0.2" height="15.0" fill="rgb(219,99,37)" rx="2" ry="2" />
<text  x="136.04" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="469" width="0.3" height="15.0" fill="rgb(226,8,18)" rx="2" ry="2" />
<text  x="88.18" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="581" width="0.2" height="15.0" fill="rgb(239,95,8)" rx="2" ry="2" />
<text  x="1170.32" y="591.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.14%)</title><rect x="869.5" y="1989" width="1.6" height="15.0" fill="rgb(254,59,34)" rx="2" ry="2" />
<text  x="872.46" y="1999.5" ></text>
</g>
<g >
<title>GetHost (182 samples, 2.75%)</title><rect x="133.2" y="1957" width="32.5" height="15.0" fill="rgb(227,79,31)" rx="2" ry="2" />
<text  x="136.21" y="1967.5" >Ge..</text>
</g>
<g >
<title>fasttext::Vector::addVector (12 samples, 0.18%)</title><rect x="576.1" y="1973" width="2.1" height="15.0" fill="rgb(242,172,33)" rx="2" ry="2" />
<text  x="579.07" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="101" width="0.4" height="15.0" fill="rgb(220,20,50)" rx="2" ry="2" />
<text  x="1170.50" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (112 samples, 1.69%)</title><rect x="1147.0" y="2053" width="20.0" height="15.0" fill="rgb(241,155,26)" rx="2" ry="2" />
<text  x="1149.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1445" width="0.2" height="15.0" fill="rgb(236,34,50)" rx="2" ry="2" />
<text  x="203.54" y="1455.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.03%)</title><rect x="745.0" y="1765" width="0.4" height="15.0" fill="rgb(253,24,52)" rx="2" ry="2" />
<text  x="748.00" y="1775.5" ></text>
</g>
<g >
<title>tgnews (6,608 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(232,183,4)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="141.2" y="1605" width="0.2" height="15.0" fill="rgb(242,138,38)" rx="2" ry="2" />
<text  x="144.25" y="1615.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.02%)</title><rect x="926.4" y="1877" width="0.2" height="15.0" fill="rgb(220,146,7)" rx="2" ry="2" />
<text  x="929.43" y="1887.5" ></text>
</g>
<g >
<title>GetHost (189 samples, 2.86%)</title><rect x="167.1" y="1973" width="33.8" height="15.0" fill="rgb(215,28,18)" rx="2" ry="2" />
<text  x="170.14" y="1983.5" >Ge..</text>
</g>
<g >
<title>free@plt (1 samples, 0.02%)</title><rect x="194.6" y="1701" width="0.2" height="15.0" fill="rgb(254,165,21)" rx="2" ry="2" />
<text  x="197.64" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1573" width="0.2" height="15.0" fill="rgb(220,198,29)" rx="2" ry="2" />
<text  x="203.18" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="453" width="0.2" height="15.0" fill="rgb(221,41,4)" rx="2" ry="2" />
<text  x="1170.32" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="357" width="0.1" height="15.0" fill="rgb(254,52,3)" rx="2" ry="2" />
<text  x="1169.96" y="367.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="373" width="0.3" height="15.0" fill="rgb(224,81,6)" rx="2" ry="2" />
<text  x="88.18" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="229" width="0.1" height="15.0" fill="rgb(235,220,30)" rx="2" ry="2" />
<text  x="1169.96" y="239.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.02%)</title><rect x="89.6" y="2005" width="0.2" height="15.0" fill="rgb(205,30,25)" rx="2" ry="2" />
<text  x="92.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1301" width="0.2" height="15.0" fill="rgb(233,183,19)" rx="2" ry="2" />
<text  x="136.04" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="933" width="0.5" height="15.0" fill="rgb(219,119,42)" rx="2" ry="2" />
<text  x="88.00" y="943.5" ></text>
</g>
<g >
<title>ksys_read (3 samples, 0.05%)</title><rect x="899.6" y="1989" width="0.6" height="15.0" fill="rgb(220,115,12)" rx="2" ry="2" />
<text  x="902.64" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1109" width="0.2" height="15.0" fill="rgb(249,40,28)" rx="2" ry="2" />
<text  x="136.04" y="1119.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.05%)</title><rect x="117.0" y="1621" width="0.5" height="15.0" fill="rgb(235,39,26)" rx="2" ry="2" />
<text  x="119.96" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1205" width="0.2" height="15.0" fill="rgb(231,32,49)" rx="2" ry="2" />
<text  x="168.54" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="885" width="0.2" height="15.0" fill="rgb(212,157,53)" rx="2" ry="2" />
<text  x="1170.32" y="895.5" ></text>
</g>
<g >
<title>kernel_poison_pages (1 samples, 0.02%)</title><rect x="39.8" y="1925" width="0.2" height="15.0" fill="rgb(230,48,19)" rx="2" ry="2" />
<text  x="42.82" y="1935.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (1 samples, 0.02%)</title><rect x="599.8" y="1957" width="0.2" height="15.0" fill="rgb(232,169,2)" rx="2" ry="2" />
<text  x="602.82" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::value (1 samples, 0.02%)</title><rect x="180.2" y="1717" width="0.2" height="15.0" fill="rgb(223,170,42)" rx="2" ry="2" />
<text  x="183.18" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1893" width="0.2" height="15.0" fill="rgb(254,214,28)" rx="2" ry="2" />
<text  x="600.32" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="629" width="0.1" height="15.0" fill="rgb(217,130,44)" rx="2" ry="2" />
<text  x="1169.96" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1141" width="0.2" height="15.0" fill="rgb(243,8,43)" rx="2" ry="2" />
<text  x="203.18" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1253" width="0.2" height="15.0" fill="rgb(222,58,2)" rx="2" ry="2" />
<text  x="203.54" y="1263.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (30 samples, 0.45%)</title><rect x="416.1" y="1941" width="5.3" height="15.0" fill="rgb(253,208,18)" rx="2" ry="2" />
<text  x="419.07" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="917" width="0.1" height="15.0" fill="rgb(215,93,3)" rx="2" ry="2" />
<text  x="1169.96" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1269" width="0.2" height="15.0" fill="rgb(224,30,25)" rx="2" ry="2" />
<text  x="168.54" y="1279.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1 samples, 0.02%)</title><rect x="595.7" y="1845" width="0.2" height="15.0" fill="rgb(245,138,35)" rx="2" ry="2" />
<text  x="598.71" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.0" y="2037" width="0.3" height="15.0" fill="rgb(235,221,51)" rx="2" ry="2" />
<text  x="1169.96" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1765" width="0.3" height="15.0" fill="rgb(231,209,2)" rx="2" ry="2" />
<text  x="168.36" y="1775.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.02%)</title><rect x="876.1" y="1957" width="0.1" height="15.0" fill="rgb(209,216,40)" rx="2" ry="2" />
<text  x="879.07" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1397" width="0.2" height="15.0" fill="rgb(212,15,7)" rx="2" ry="2" />
<text  x="203.18" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1973" width="0.4" height="15.0" fill="rgb(233,55,52)" rx="2" ry="2" />
<text  x="1170.50" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1781" width="0.4" height="15.0" fill="rgb(240,171,42)" rx="2" ry="2" />
<text  x="1170.50" y="1791.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.02%)</title><rect x="437.1" y="1861" width="0.2" height="15.0" fill="rgb(251,116,31)" rx="2" ry="2" />
<text  x="440.14" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1605" width="0.3" height="15.0" fill="rgb(222,101,21)" rx="2" ry="2" />
<text  x="168.36" y="1615.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="196.1" y="1685" width="0.1" height="15.0" fill="rgb(245,142,34)" rx="2" ry="2" />
<text  x="199.07" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1093" width="0.2" height="15.0" fill="rgb(227,206,20)" rx="2" ry="2" />
<text  x="1170.32" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="149" width="0.2" height="15.0" fill="rgb(236,17,47)" rx="2" ry="2" />
<text  x="1170.14" y="159.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.02%)</title><rect x="636.8" y="1877" width="0.2" height="15.0" fill="rgb(230,116,4)" rx="2" ry="2" />
<text  x="639.79" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="2021" width="0.2" height="15.0" fill="rgb(231,158,20)" rx="2" ry="2" />
<text  x="1170.32" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="869" width="0.2" height="15.0" fill="rgb(208,45,23)" rx="2" ry="2" />
<text  x="203.18" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (31 samples, 0.47%)</title><rect x="180.4" y="1765" width="5.5" height="15.0" fill="rgb(212,125,38)" rx="2" ry="2" />
<text  x="183.36" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="741" width="0.2" height="15.0" fill="rgb(205,78,43)" rx="2" ry="2" />
<text  x="203.54" y="751.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (7 samples, 0.11%)</title><rect x="570.0" y="1973" width="1.2" height="15.0" fill="rgb(231,223,4)" rx="2" ry="2" />
<text  x="573.00" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="949" width="0.2" height="15.0" fill="rgb(221,178,0)" rx="2" ry="2" />
<text  x="136.04" y="959.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="741" width="0.3" height="15.0" fill="rgb(211,122,7)" rx="2" ry="2" />
<text  x="88.18" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1221" width="0.2" height="15.0" fill="rgb(245,168,24)" rx="2" ry="2" />
<text  x="203.54" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1685" width="0.2" height="15.0" fill="rgb(220,128,54)" rx="2" ry="2" />
<text  x="203.18" y="1695.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (1 samples, 0.02%)</title><rect x="85.2" y="37" width="0.2" height="15.0" fill="rgb(207,136,48)" rx="2" ry="2" />
<text  x="88.18" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1157" width="0.1" height="15.0" fill="rgb(224,201,31)" rx="2" ry="2" />
<text  x="1169.96" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_assertion (1 samples, 0.02%)</title><rect x="199.1" y="1813" width="0.2" height="15.0" fill="rgb(211,147,43)" rx="2" ry="2" />
<text  x="202.11" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1125" width="0.2" height="15.0" fill="rgb(245,143,4)" rx="2" ry="2" />
<text  x="1170.32" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="213" width="0.2" height="15.0" fill="rgb(222,113,16)" rx="2" ry="2" />
<text  x="1170.32" y="223.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.03%)</title><rect x="191.8" y="1669" width="0.3" height="15.0" fill="rgb(236,91,19)" rx="2" ry="2" />
<text  x="194.79" y="1679.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.03%)</title><rect x="594.1" y="1941" width="0.4" height="15.0" fill="rgb(252,180,2)" rx="2" ry="2" />
<text  x="597.11" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (3 samples, 0.05%)</title><rect x="596.4" y="1989" width="0.6" height="15.0" fill="rgb(213,201,33)" rx="2" ry="2" />
<text  x="599.43" y="1999.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.05%)</title><rect x="852.5" y="1957" width="0.5" height="15.0" fill="rgb(222,61,18)" rx="2" ry="2" />
<text  x="855.50" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1397" width="0.2" height="15.0" fill="rgb(234,137,8)" rx="2" ry="2" />
<text  x="203.54" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (180 samples, 2.72%)</title><rect x="167.3" y="1941" width="32.2" height="15.0" fill="rgb(213,36,32)" rx="2" ry="2" />
<text  x="170.32" y="1951.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1493" width="0.2" height="15.0" fill="rgb(210,57,23)" rx="2" ry="2" />
<text  x="1170.32" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1317" width="0.2" height="15.0" fill="rgb(252,10,13)" rx="2" ry="2" />
<text  x="1170.32" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="197" width="0.2" height="15.0" fill="rgb(215,141,17)" rx="2" ry="2" />
<text  x="1170.32" y="207.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.06%)</title><rect x="842.5" y="1893" width="0.7" height="15.0" fill="rgb(251,224,9)" rx="2" ry="2" />
<text  x="845.50" y="1903.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="112.5" y="1621" width="0.2" height="15.0" fill="rgb(225,7,39)" rx="2" ry="2" />
<text  x="115.50" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1093" width="0.4" height="15.0" fill="rgb(224,62,25)" rx="2" ry="2" />
<text  x="1170.50" y="1103.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter@plt (1 samples, 0.02%)</title><rect x="744.8" y="1877" width="0.2" height="15.0" fill="rgb(225,179,0)" rx="2" ry="2" />
<text  x="747.82" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="405" width="0.2" height="15.0" fill="rgb(211,182,16)" rx="2" ry="2" />
<text  x="136.04" y="415.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1829" width="0.5" height="15.0" fill="rgb(232,25,43)" rx="2" ry="2" />
<text  x="88.00" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1253" width="0.2" height="15.0" fill="rgb(253,54,5)" rx="2" ry="2" />
<text  x="1170.32" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1669" width="0.3" height="15.0" fill="rgb(229,171,54)" rx="2" ry="2" />
<text  x="168.36" y="1679.5" ></text>
</g>
<g >
<title>free@plt (2 samples, 0.03%)</title><rect x="1100.4" y="2053" width="0.3" height="15.0" fill="rgb(219,85,41)" rx="2" ry="2" />
<text  x="1103.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1717" width="0.2" height="15.0" fill="rgb(248,84,13)" rx="2" ry="2" />
<text  x="1170.14" y="1727.5" ></text>
</g>
<g >
<title>__vfs_read (4 samples, 0.06%)</title><rect x="89.8" y="1941" width="0.7" height="15.0" fill="rgb(225,204,15)" rx="2" ry="2" />
<text  x="92.82" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.03%)</title><rect x="132.5" y="1893" width="0.4" height="15.0" fill="rgb(246,148,31)" rx="2" ry="2" />
<text  x="135.50" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="709" width="0.2" height="15.0" fill="rgb(215,48,40)" rx="2" ry="2" />
<text  x="203.54" y="719.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (1 samples, 0.02%)</title><rect x="596.4" y="1909" width="0.2" height="15.0" fill="rgb(233,110,28)" rx="2" ry="2" />
<text  x="599.43" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1525" width="0.5" height="15.0" fill="rgb(245,208,39)" rx="2" ry="2" />
<text  x="88.00" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1221" width="0.2" height="15.0" fill="rgb(239,106,13)" rx="2" ry="2" />
<text  x="1170.14" y="1231.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="109.8" y="1573" width="0.2" height="15.0" fill="rgb(211,74,42)" rx="2" ry="2" />
<text  x="112.82" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="849.8" y="1973" width="0.2" height="15.0" fill="rgb(227,183,44)" rx="2" ry="2" />
<text  x="852.82" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1077" width="0.4" height="15.0" fill="rgb(217,164,52)" rx="2" ry="2" />
<text  x="1170.50" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="200.4" y="1685" width="0.3" height="15.0" fill="rgb(243,227,46)" rx="2" ry="2" />
<text  x="203.36" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="789" width="0.4" height="15.0" fill="rgb(237,75,41)" rx="2" ry="2" />
<text  x="1170.50" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1525" width="0.1" height="15.0" fill="rgb(253,132,45)" rx="2" ry="2" />
<text  x="1169.96" y="1535.5" ></text>
</g>
<g >
<title>onmt::is_alphabet@plt (4 samples, 0.06%)</title><rect x="756.4" y="1893" width="0.7" height="15.0" fill="rgb(237,103,45)" rx="2" ry="2" />
<text  x="759.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1541" width="0.2" height="15.0" fill="rgb(208,16,50)" rx="2" ry="2" />
<text  x="203.54" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="293" width="0.1" height="15.0" fill="rgb(239,28,54)" rx="2" ry="2" />
<text  x="1169.96" y="303.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="85.0" y="901" width="0.2" height="15.0" fill="rgb(211,157,5)" rx="2" ry="2" />
<text  x="88.00" y="911.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (43 samples, 0.65%)</title><rect x="421.4" y="1957" width="7.7" height="15.0" fill="rgb(228,85,35)" rx="2" ry="2" />
<text  x="424.43" y="1967.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.02%)</title><rect x="84.8" y="2037" width="0.2" height="15.0" fill="rgb(231,182,29)" rx="2" ry="2" />
<text  x="87.82" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="485" width="0.1" height="15.0" fill="rgb(231,13,35)" rx="2" ry="2" />
<text  x="1169.96" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1957" width="0.2" height="15.0" fill="rgb(208,186,24)" rx="2" ry="2" />
<text  x="1170.32" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="901" width="0.1" height="15.0" fill="rgb(220,72,19)" rx="2" ry="2" />
<text  x="1169.96" y="911.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (191 samples, 2.89%)</title><rect x="167.1" y="1989" width="34.1" height="15.0" fill="rgb(228,133,19)" rx="2" ry="2" />
<text  x="170.14" y="1999.5" >TA..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1973" width="0.1" height="15.0" fill="rgb(211,193,17)" rx="2" ry="2" />
<text  x="1169.96" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1445" width="0.2" height="15.0" fill="rgb(215,197,36)" rx="2" ry="2" />
<text  x="136.04" y="1455.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (6 samples, 0.09%)</title><rect x="816.4" y="1893" width="1.1" height="15.0" fill="rgb(239,86,23)" rx="2" ry="2" />
<text  x="819.43" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1605" width="0.5" height="15.0" fill="rgb(241,106,49)" rx="2" ry="2" />
<text  x="88.00" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="421" width="0.4" height="15.0" fill="rgb(232,10,4)" rx="2" ry="2" />
<text  x="1170.50" y="431.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1765" width="0.5" height="15.0" fill="rgb(240,24,51)" rx="2" ry="2" />
<text  x="88.00" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1941" width="0.4" height="15.0" fill="rgb(224,165,18)" rx="2" ry="2" />
<text  x="1170.50" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Vector::Vector (1 samples, 0.02%)</title><rect x="1100.0" y="2053" width="0.2" height="15.0" fill="rgb(233,10,14)" rx="2" ry="2" />
<text  x="1103.00" y="2063.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.02%)</title><rect x="153.0" y="1653" width="0.2" height="15.0" fill="rgb(250,203,5)" rx="2" ry="2" />
<text  x="156.04" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="837" width="0.2" height="15.0" fill="rgb(235,201,25)" rx="2" ry="2" />
<text  x="203.54" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="789" width="0.2" height="15.0" fill="rgb(216,93,17)" rx="2" ry="2" />
<text  x="1170.32" y="799.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1077" width="0.5" height="15.0" fill="rgb(226,10,2)" rx="2" ry="2" />
<text  x="88.00" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1029" width="0.4" height="15.0" fill="rgb(239,80,33)" rx="2" ry="2" />
<text  x="1170.50" y="1039.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (28 samples, 0.42%)</title><rect x="41.8" y="2053" width="5.0" height="15.0" fill="rgb(247,69,33)" rx="2" ry="2" />
<text  x="44.79" y="2063.5" ></text>
</g>
<g >
<title>Eigen::internal::product_evaluator&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt;, 7, Eigen::DenseShape, Eigen::DenseShape, float, float&gt;::product_evaluator (3 samples, 0.05%)</title><rect x="445.5" y="1957" width="0.6" height="15.0" fill="rgb(247,176,0)" rx="2" ry="2" />
<text  x="448.54" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="533" width="0.2" height="15.0" fill="rgb(225,198,0)" rx="2" ry="2" />
<text  x="1170.32" y="543.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (185 samples, 2.80%)</title><rect x="46.8" y="2037" width="33.0" height="15.0" fill="rgb(242,95,11)" rx="2" ry="2" />
<text  x="49.79" y="2047.5" >Ei..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="645" width="0.2" height="15.0" fill="rgb(248,121,28)" rx="2" ry="2" />
<text  x="203.18" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="741" width="0.2" height="15.0" fill="rgb(208,174,20)" rx="2" ry="2" />
<text  x="136.04" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="565" width="0.2" height="15.0" fill="rgb(218,49,2)" rx="2" ry="2" />
<text  x="1170.14" y="575.5" ></text>
</g>
<g >
<title>DetectLanguage[abi:cxx11] (2 samples, 0.03%)</title><rect x="599.6" y="1973" width="0.4" height="15.0" fill="rgb(229,191,24)" rx="2" ry="2" />
<text  x="602.64" y="1983.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.02%)</title><rect x="597.1" y="1877" width="0.2" height="15.0" fill="rgb(250,193,10)" rx="2" ry="2" />
<text  x="600.14" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (70 samples, 1.06%)</title><rect x="91.4" y="1973" width="12.5" height="15.0" fill="rgb(228,118,9)" rx="2" ry="2" />
<text  x="94.43" y="1983.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.02%)</title><rect x="1189.8" y="2053" width="0.2" height="15.0" fill="rgb(250,132,33)" rx="2" ry="2" />
<text  x="1192.82" y="2063.5" ></text>
</g>
<g >
<title>fasttext::SoftmaxLoss::computeOutput (1 samples, 0.02%)</title><rect x="1099.8" y="2053" width="0.2" height="15.0" fill="rgb(248,121,24)" rx="2" ry="2" />
<text  x="1102.82" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (2 samples, 0.03%)</title><rect x="596.4" y="1925" width="0.4" height="15.0" fill="rgb(210,2,35)" rx="2" ry="2" />
<text  x="599.43" y="1935.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 0.03%)</title><rect x="594.1" y="1877" width="0.4" height="15.0" fill="rgb(245,47,8)" rx="2" ry="2" />
<text  x="597.11" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1989" width="0.5" height="15.0" fill="rgb(237,60,52)" rx="2" ry="2" />
<text  x="88.00" y="1999.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (45 samples, 0.68%)</title><rect x="745.4" y="1877" width="8.0" height="15.0" fill="rgb(213,108,27)" rx="2" ry="2" />
<text  x="748.36" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1669" width="0.4" height="15.0" fill="rgb(244,102,10)" rx="2" ry="2" />
<text  x="1170.50" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="821" width="0.2" height="15.0" fill="rgb(229,120,42)" rx="2" ry="2" />
<text  x="203.18" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_last_of (1 samples, 0.02%)</title><rect x="597.7" y="2005" width="0.2" height="15.0" fill="rgb(244,68,32)" rx="2" ry="2" />
<text  x="600.68" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1509" width="0.1" height="15.0" fill="rgb(205,36,22)" rx="2" ry="2" />
<text  x="1169.96" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1317" width="0.2" height="15.0" fill="rgb(232,53,37)" rx="2" ry="2" />
<text  x="168.54" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (23 samples, 0.35%)</title><rect x="123.0" y="1765" width="4.1" height="15.0" fill="rgb(253,24,17)" rx="2" ry="2" />
<text  x="126.04" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1205" width="0.2" height="15.0" fill="rgb(220,82,32)" rx="2" ry="2" />
<text  x="1170.14" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1301" width="0.2" height="15.0" fill="rgb(230,66,1)" rx="2" ry="2" />
<text  x="203.54" y="1311.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="104.5" y="1941" width="0.7" height="15.0" fill="rgb(215,180,26)" rx="2" ry="2" />
<text  x="107.46" y="1951.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="1189.1" y="2053" width="0.2" height="15.0" fill="rgb(223,157,25)" rx="2" ry="2" />
<text  x="1192.11" y="2063.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.02%)</title><rect x="926.4" y="1957" width="0.2" height="15.0" fill="rgb(236,135,19)" rx="2" ry="2" />
<text  x="929.43" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1173" width="0.2" height="15.0" fill="rgb(254,226,52)" rx="2" ry="2" />
<text  x="203.54" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (23 samples, 0.35%)</title><rect x="123.0" y="1781" width="4.1" height="15.0" fill="rgb(248,80,23)" rx="2" ry="2" />
<text  x="126.04" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1109" width="0.2" height="15.0" fill="rgb(210,226,31)" rx="2" ry="2" />
<text  x="168.54" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1621" width="0.4" height="15.0" fill="rgb(218,180,11)" rx="2" ry="2" />
<text  x="1170.50" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="261" width="0.4" height="15.0" fill="rgb(225,73,2)" rx="2" ry="2" />
<text  x="1170.50" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="117" width="0.4" height="15.0" fill="rgb(230,197,42)" rx="2" ry="2" />
<text  x="1170.50" y="127.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.03%)</title><rect x="86.6" y="2021" width="0.4" height="15.0" fill="rgb(214,224,49)" rx="2" ry="2" />
<text  x="89.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="469" width="0.2" height="15.0" fill="rgb(220,162,4)" rx="2" ry="2" />
<text  x="1170.32" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (30 samples, 0.45%)</title><rect x="168.0" y="1685" width="5.4" height="15.0" fill="rgb(213,215,37)" rx="2" ry="2" />
<text  x="171.04" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.36%)</title><rect x="869.5" y="2021" width="4.3" height="15.0" fill="rgb(250,210,45)" rx="2" ry="2" />
<text  x="872.46" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="2005" width="0.5" height="15.0" fill="rgb(223,66,48)" rx="2" ry="2" />
<text  x="88.00" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="120.5" y="1621" width="0.2" height="15.0" fill="rgb(212,58,43)" rx="2" ry="2" />
<text  x="123.54" y="1631.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator@plt (5 samples, 0.08%)</title><rect x="827.1" y="1893" width="0.9" height="15.0" fill="rgb(238,3,13)" rx="2" ry="2" />
<text  x="830.14" y="1903.5" ></text>
</g>
<g >
<title>__do_page_fault (6 samples, 0.09%)</title><rect x="83.8" y="1989" width="1.0" height="15.0" fill="rgb(248,71,15)" rx="2" ry="2" />
<text  x="86.75" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1285" width="0.4" height="15.0" fill="rgb(209,39,11)" rx="2" ry="2" />
<text  x="1170.50" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="43.2" y="2037" width="0.2" height="15.0" fill="rgb(209,144,8)" rx="2" ry="2" />
<text  x="46.21" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_ScannerBase::_ScannerBase (1 samples, 0.02%)</title><rect x="132.9" y="1925" width="0.1" height="15.0" fill="rgb(227,191,44)" rx="2" ry="2" />
<text  x="135.86" y="1935.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="1042.7" y="2037" width="0.2" height="15.0" fill="rgb(238,152,48)" rx="2" ry="2" />
<text  x="1045.68" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.02%)</title><rect x="143.2" y="1589" width="0.2" height="15.0" fill="rgb(227,82,44)" rx="2" ry="2" />
<text  x="146.21" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="229" width="0.2" height="15.0" fill="rgb(207,162,45)" rx="2" ry="2" />
<text  x="1170.32" y="239.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (1 samples, 0.02%)</title><rect x="596.8" y="1925" width="0.2" height="15.0" fill="rgb(234,151,40)" rx="2" ry="2" />
<text  x="599.79" y="1935.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="452.1" y="1973" width="0.2" height="15.0" fill="rgb(230,173,50)" rx="2" ry="2" />
<text  x="455.14" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="53" width="0.2" height="15.0" fill="rgb(219,24,3)" rx="2" ry="2" />
<text  x="1170.14" y="63.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.02%)</title><rect x="84.3" y="1941" width="0.2" height="15.0" fill="rgb(244,25,33)" rx="2" ry="2" />
<text  x="87.29" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.09%)</title><rect x="111.4" y="1621" width="1.1" height="15.0" fill="rgb(226,63,39)" rx="2" ry="2" />
<text  x="114.43" y="1631.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.02%)</title><rect x="594.3" y="1813" width="0.2" height="15.0" fill="rgb(240,155,23)" rx="2" ry="2" />
<text  x="597.29" y="1823.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.02%)</title><rect x="926.4" y="2005" width="0.2" height="15.0" fill="rgb(246,41,47)" rx="2" ry="2" />
<text  x="929.43" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="933" width="0.4" height="15.0" fill="rgb(226,9,44)" rx="2" ry="2" />
<text  x="1170.50" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1189" width="0.4" height="15.0" fill="rgb(249,165,8)" rx="2" ry="2" />
<text  x="1170.50" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1173" width="0.4" height="15.0" fill="rgb(245,221,9)" rx="2" ry="2" />
<text  x="1170.50" y="1183.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.02%)</title><rect x="147.0" y="1621" width="0.1" height="15.0" fill="rgb(223,126,49)" rx="2" ry="2" />
<text  x="149.96" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (175 samples, 2.65%)</title><rect x="167.5" y="1829" width="31.3" height="15.0" fill="rgb(210,222,0)" rx="2" ry="2" />
<text  x="170.50" y="1839.5" >st..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.02%)</title><rect x="167.7" y="1701" width="0.2" height="15.0" fill="rgb(235,93,45)" rx="2" ry="2" />
<text  x="170.68" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1173" width="0.2" height="15.0" fill="rgb(218,75,34)" rx="2" ry="2" />
<text  x="168.54" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1861" width="0.1" height="15.0" fill="rgb(245,132,43)" rx="2" ry="2" />
<text  x="1169.96" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="117" width="0.1" height="15.0" fill="rgb(219,48,9)" rx="2" ry="2" />
<text  x="1169.96" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="645" width="0.2" height="15.0" fill="rgb(211,175,13)" rx="2" ry="2" />
<text  x="203.54" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="405" width="0.4" height="15.0" fill="rgb(254,177,6)" rx="2" ry="2" />
<text  x="1170.50" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1237" width="0.2" height="15.0" fill="rgb(212,62,2)" rx="2" ry="2" />
<text  x="203.54" y="1247.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (1,368 samples, 20.70%)</title><rect x="602.5" y="1941" width="244.3" height="15.0" fill="rgb(222,141,37)" rx="2" ry="2" />
<text  x="605.50" y="1951.5" >onmt::ITokenizer::tokenize</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (15 samples, 0.23%)</title><rect x="128.9" y="1701" width="2.7" height="15.0" fill="rgb(228,35,17)" rx="2" ry="2" />
<text  x="131.93" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1733" width="0.1" height="15.0" fill="rgb(239,79,49)" rx="2" ry="2" />
<text  x="1169.96" y="1743.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (4 samples, 0.06%)</title><rect x="436.2" y="1845" width="0.8" height="15.0" fill="rgb(240,14,30)" rx="2" ry="2" />
<text  x="439.25" y="1855.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.02%)</title><rect x="437.1" y="1877" width="0.2" height="15.0" fill="rgb(223,205,14)" rx="2" ry="2" />
<text  x="440.14" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="485" width="0.2" height="15.0" fill="rgb(243,75,22)" rx="2" ry="2" />
<text  x="136.04" y="495.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (12 samples, 0.18%)</title><rect x="425.4" y="1845" width="2.1" height="15.0" fill="rgb(215,92,36)" rx="2" ry="2" />
<text  x="428.36" y="1855.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="164.1" y="1685" width="0.2" height="15.0" fill="rgb(222,36,25)" rx="2" ry="2" />
<text  x="167.11" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1077" width="0.1" height="15.0" fill="rgb(244,66,48)" rx="2" ry="2" />
<text  x="1169.96" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1285" width="0.2" height="15.0" fill="rgb(236,103,9)" rx="2" ry="2" />
<text  x="136.04" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (1 samples, 0.02%)</title><rect x="167.7" y="1685" width="0.2" height="15.0" fill="rgb(209,43,13)" rx="2" ry="2" />
<text  x="170.68" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="197" width="0.4" height="15.0" fill="rgb(248,170,46)" rx="2" ry="2" />
<text  x="1170.50" y="207.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="645" width="0.3" height="15.0" fill="rgb(253,111,44)" rx="2" ry="2" />
<text  x="88.18" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="153.2" y="1653" width="0.2" height="15.0" fill="rgb(234,43,38)" rx="2" ry="2" />
<text  x="156.21" y="1663.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (50 samples, 0.76%)</title><rect x="437.3" y="1973" width="8.9" height="15.0" fill="rgb(221,74,4)" rx="2" ry="2" />
<text  x="440.32" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1461" width="0.2" height="15.0" fill="rgb(236,180,31)" rx="2" ry="2" />
<text  x="136.04" y="1471.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="84.3" y="1893" width="0.2" height="15.0" fill="rgb(236,221,52)" rx="2" ry="2" />
<text  x="87.29" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.05%)</title><rect x="200.2" y="1813" width="0.5" height="15.0" fill="rgb(206,94,42)" rx="2" ry="2" />
<text  x="203.18" y="1823.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="597.1" y="1925" width="0.2" height="15.0" fill="rgb(227,26,5)" rx="2" ry="2" />
<text  x="600.14" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1925" width="0.2" height="15.0" fill="rgb(215,177,19)" rx="2" ry="2" />
<text  x="1170.32" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1461" width="0.4" height="15.0" fill="rgb(213,187,30)" rx="2" ry="2" />
<text  x="1170.50" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1653" width="0.1" height="15.0" fill="rgb(224,178,40)" rx="2" ry="2" />
<text  x="1169.96" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="693" width="0.2" height="15.0" fill="rgb(254,142,36)" rx="2" ry="2" />
<text  x="1170.32" y="703.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="128.4" y="1701" width="0.2" height="15.0" fill="rgb(249,11,48)" rx="2" ry="2" />
<text  x="131.39" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1925" width="0.5" height="15.0" fill="rgb(241,42,31)" rx="2" ry="2" />
<text  x="88.00" y="1935.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.02%)</title><rect x="89.6" y="1909" width="0.2" height="15.0" fill="rgb(208,175,23)" rx="2" ry="2" />
<text  x="92.64" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (35 samples, 0.53%)</title><rect x="185.9" y="1717" width="6.2" height="15.0" fill="rgb(231,59,31)" rx="2" ry="2" />
<text  x="188.89" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1317" width="0.5" height="15.0" fill="rgb(215,101,2)" rx="2" ry="2" />
<text  x="88.00" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1189" width="0.2" height="15.0" fill="rgb(254,16,9)" rx="2" ry="2" />
<text  x="136.04" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1909" width="0.2" height="15.0" fill="rgb(236,224,9)" rx="2" ry="2" />
<text  x="136.04" y="1919.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11]@plt (3 samples, 0.05%)</title><rect x="604.1" y="1909" width="0.5" height="15.0" fill="rgb(228,119,16)" rx="2" ry="2" />
<text  x="607.11" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1237" width="0.5" height="15.0" fill="rgb(227,227,20)" rx="2" ry="2" />
<text  x="88.00" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1573" width="0.3" height="15.0" fill="rgb(229,22,36)" rx="2" ry="2" />
<text  x="168.36" y="1583.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1861" width="0.2" height="15.0" fill="rgb(217,172,9)" rx="2" ry="2" />
<text  x="600.32" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="357" width="0.3" height="15.0" fill="rgb(233,104,54)" rx="2" ry="2" />
<text  x="88.18" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1349" width="0.2" height="15.0" fill="rgb(248,158,3)" rx="2" ry="2" />
<text  x="203.18" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (30 samples, 0.45%)</title><rect x="117.7" y="1733" width="5.3" height="15.0" fill="rgb(240,188,23)" rx="2" ry="2" />
<text  x="120.68" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1685" width="0.3" height="15.0" fill="rgb(234,45,11)" rx="2" ry="2" />
<text  x="168.36" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (1 samples, 0.02%)</title><rect x="165.2" y="1861" width="0.2" height="15.0" fill="rgb(211,173,26)" rx="2" ry="2" />
<text  x="168.18" y="1871.5" ></text>
</g>
<g >
<title>memcpy@plt (3 samples, 0.05%)</title><rect x="1116.6" y="2053" width="0.5" height="15.0" fill="rgb(222,218,42)" rx="2" ry="2" />
<text  x="1119.61" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1573" width="0.4" height="15.0" fill="rgb(235,0,34)" rx="2" ry="2" />
<text  x="1170.50" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1813" width="0.2" height="15.0" fill="rgb(235,95,52)" rx="2" ry="2" />
<text  x="136.04" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1797" width="0.2" height="15.0" fill="rgb(240,169,49)" rx="2" ry="2" />
<text  x="1170.14" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="677" width="0.1" height="15.0" fill="rgb(252,96,40)" rx="2" ry="2" />
<text  x="1169.96" y="687.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2 samples, 0.03%)</title><rect x="874.5" y="2037" width="0.3" height="15.0" fill="rgb(214,166,41)" rx="2" ry="2" />
<text  x="877.46" y="2047.5" ></text>
</g>
<g >
<title>vfs_read (3 samples, 0.05%)</title><rect x="899.6" y="1973" width="0.6" height="15.0" fill="rgb(221,146,26)" rx="2" ry="2" />
<text  x="902.64" y="1983.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="139.6" y="1573" width="0.4" height="15.0" fill="rgb(236,63,41)" rx="2" ry="2" />
<text  x="142.64" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.03%)</title><rect x="200.9" y="1973" width="0.3" height="15.0" fill="rgb(245,185,20)" rx="2" ry="2" />
<text  x="203.89" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="965" width="0.5" height="15.0" fill="rgb(221,107,9)" rx="2" ry="2" />
<text  x="88.00" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1829" width="0.4" height="15.0" fill="rgb(234,148,20)" rx="2" ry="2" />
<text  x="1170.50" y="1839.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.02%)</title><rect x="926.4" y="1909" width="0.2" height="15.0" fill="rgb(234,206,51)" rx="2" ry="2" />
<text  x="929.43" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1301" width="0.4" height="15.0" fill="rgb(212,188,0)" rx="2" ry="2" />
<text  x="1170.50" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (42 samples, 0.64%)</title><rect x="157.1" y="1749" width="7.5" height="15.0" fill="rgb(254,175,28)" rx="2" ry="2" />
<text  x="160.14" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1637" width="0.2" height="15.0" fill="rgb(235,146,21)" rx="2" ry="2" />
<text  x="203.18" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (175 samples, 2.65%)</title><rect x="167.5" y="1877" width="31.3" height="15.0" fill="rgb(252,31,8)" rx="2" ry="2" />
<text  x="170.50" y="1887.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="869" width="0.2" height="15.0" fill="rgb(239,212,14)" rx="2" ry="2" />
<text  x="203.54" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1365" width="0.2" height="15.0" fill="rgb(244,176,12)" rx="2" ry="2" />
<text  x="1170.14" y="1375.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="598.6" y="2005" width="0.2" height="15.0" fill="rgb(236,96,28)" rx="2" ry="2" />
<text  x="601.57" y="2015.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="110.0" y="1573" width="0.2" height="15.0" fill="rgb(207,3,26)" rx="2" ry="2" />
<text  x="113.00" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1893" width="0.2" height="15.0" fill="rgb(236,36,5)" rx="2" ry="2" />
<text  x="136.04" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (42 samples, 0.64%)</title><rect x="157.1" y="1765" width="7.5" height="15.0" fill="rgb(208,11,21)" rx="2" ry="2" />
<text  x="160.14" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1637" width="0.2" height="15.0" fill="rgb(240,145,42)" rx="2" ry="2" />
<text  x="1170.32" y="1647.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.05%)</title><rect x="1135.5" y="2053" width="0.6" height="15.0" fill="rgb(250,59,25)" rx="2" ry="2" />
<text  x="1138.54" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1621" width="0.2" height="15.0" fill="rgb(244,218,43)" rx="2" ry="2" />
<text  x="1170.14" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="132.5" y="1765" width="0.2" height="15.0" fill="rgb(242,190,15)" rx="2" ry="2" />
<text  x="135.50" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="357" width="0.2" height="15.0" fill="rgb(224,132,36)" rx="2" ry="2" />
<text  x="136.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="741" width="0.2" height="15.0" fill="rgb(246,106,36)" rx="2" ry="2" />
<text  x="203.18" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (25 samples, 0.38%)</title><rect x="147.1" y="1621" width="4.5" height="15.0" fill="rgb(236,108,16)" rx="2" ry="2" />
<text  x="150.14" y="1631.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="1048.8" y="2037" width="0.1" height="15.0" fill="rgb(211,56,43)" rx="2" ry="2" />
<text  x="1051.75" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="757" width="0.2" height="15.0" fill="rgb(229,120,19)" rx="2" ry="2" />
<text  x="203.18" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1173" width="0.2" height="15.0" fill="rgb(225,94,32)" rx="2" ry="2" />
<text  x="1170.14" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1829" width="0.3" height="15.0" fill="rgb(208,120,24)" rx="2" ry="2" />
<text  x="168.36" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="981" width="0.2" height="15.0" fill="rgb(231,46,17)" rx="2" ry="2" />
<text  x="1170.32" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="949" width="0.2" height="15.0" fill="rgb(210,226,16)" rx="2" ry="2" />
<text  x="1170.32" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1765" width="0.2" height="15.0" fill="rgb(249,126,50)" rx="2" ry="2" />
<text  x="203.18" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="485" width="0.2" height="15.0" fill="rgb(227,146,39)" rx="2" ry="2" />
<text  x="1170.32" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1957" width="0.2" height="15.0" fill="rgb(237,140,11)" rx="2" ry="2" />
<text  x="600.32" y="1967.5" ></text>
</g>
<g >
<title>scsi_end_request (1 samples, 0.02%)</title><rect x="713.2" y="1733" width="0.2" height="15.0" fill="rgb(225,66,43)" rx="2" ry="2" />
<text  x="716.21" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1445" width="0.5" height="15.0" fill="rgb(207,161,54)" rx="2" ry="2" />
<text  x="88.00" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="325" width="0.1" height="15.0" fill="rgb(219,67,15)" rx="2" ry="2" />
<text  x="1169.96" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1749" width="0.3" height="15.0" fill="rgb(215,186,10)" rx="2" ry="2" />
<text  x="168.36" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="85" width="0.4" height="15.0" fill="rgb(220,81,41)" rx="2" ry="2" />
<text  x="1170.50" y="95.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="198.0" y="1701" width="0.2" height="15.0" fill="rgb(220,185,0)" rx="2" ry="2" />
<text  x="201.04" y="1711.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (1 samples, 0.02%)</title><rect x="132.5" y="1749" width="0.2" height="15.0" fill="rgb(231,82,16)" rx="2" ry="2" />
<text  x="135.50" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1717" width="0.4" height="15.0" fill="rgb(225,68,5)" rx="2" ry="2" />
<text  x="1170.50" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1189" width="0.5" height="15.0" fill="rgb(248,132,12)" rx="2" ry="2" />
<text  x="88.00" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="517" width="0.2" height="15.0" fill="rgb(223,188,43)" rx="2" ry="2" />
<text  x="203.18" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1413" width="0.2" height="15.0" fill="rgb(229,127,30)" rx="2" ry="2" />
<text  x="203.54" y="1423.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="197.7" y="1685" width="0.2" height="15.0" fill="rgb(250,33,35)" rx="2" ry="2" />
<text  x="200.68" y="1695.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.09%)</title><rect x="157.1" y="1685" width="1.1" height="15.0" fill="rgb(248,161,32)" rx="2" ry="2" />
<text  x="160.14" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="325" width="0.3" height="15.0" fill="rgb(242,186,0)" rx="2" ry="2" />
<text  x="88.18" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (30 samples, 0.45%)</title><rect x="416.1" y="1925" width="5.3" height="15.0" fill="rgb(253,114,35)" rx="2" ry="2" />
<text  x="419.07" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1205" width="0.2" height="15.0" fill="rgb(254,40,52)" rx="2" ry="2" />
<text  x="203.54" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="693" width="0.1" height="15.0" fill="rgb(253,71,39)" rx="2" ry="2" />
<text  x="1169.96" y="703.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="191.2" y="1669" width="0.2" height="15.0" fill="rgb(211,60,35)" rx="2" ry="2" />
<text  x="194.25" y="1679.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.20%)</title><rect x="1118.6" y="2053" width="2.3" height="15.0" fill="rgb(244,24,40)" rx="2" ry="2" />
<text  x="1121.57" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="757" width="0.3" height="15.0" fill="rgb(214,124,11)" rx="2" ry="2" />
<text  x="88.18" y="767.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="648.8" y="1861" width="0.1" height="15.0" fill="rgb(227,136,4)" rx="2" ry="2" />
<text  x="651.75" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1397" width="0.2" height="15.0" fill="rgb(214,71,54)" rx="2" ry="2" />
<text  x="1170.32" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1109" width="0.2" height="15.0" fill="rgb(222,20,48)" rx="2" ry="2" />
<text  x="203.54" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1189" width="0.2" height="15.0" fill="rgb(216,180,19)" rx="2" ry="2" />
<text  x="168.54" y="1199.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="151.8" y="1685" width="0.2" height="15.0" fill="rgb(220,179,19)" rx="2" ry="2" />
<text  x="154.79" y="1695.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (1 samples, 0.02%)</title><rect x="850.2" y="2037" width="0.2" height="15.0" fill="rgb(223,9,4)" rx="2" ry="2" />
<text  x="853.18" y="2047.5" ></text>
</g>
<g >
<title>operator new@plt (1 samples, 0.02%)</title><rect x="113.0" y="1621" width="0.2" height="15.0" fill="rgb(254,175,30)" rx="2" ry="2" />
<text  x="116.04" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="565" width="0.3" height="15.0" fill="rgb(241,186,21)" rx="2" ry="2" />
<text  x="88.18" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="594.1" y="1973" width="0.4" height="15.0" fill="rgb(227,69,15)" rx="2" ry="2" />
<text  x="597.11" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="261" width="0.2" height="15.0" fill="rgb(217,158,25)" rx="2" ry="2" />
<text  x="136.04" y="271.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (2 samples, 0.03%)</title><rect x="91.8" y="1925" width="0.3" height="15.0" fill="rgb(247,103,35)" rx="2" ry="2" />
<text  x="94.79" y="1935.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.06%)</title><rect x="712.3" y="1749" width="0.7" height="15.0" fill="rgb(211,77,49)" rx="2" ry="2" />
<text  x="715.32" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="213" width="0.4" height="15.0" fill="rgb(207,76,51)" rx="2" ry="2" />
<text  x="1170.50" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="453" width="0.4" height="15.0" fill="rgb(209,109,12)" rx="2" ry="2" />
<text  x="1170.50" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (32 samples, 0.48%)</title><rect x="105.4" y="1733" width="5.7" height="15.0" fill="rgb(243,26,10)" rx="2" ry="2" />
<text  x="108.36" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1701" width="0.2" height="15.0" fill="rgb(239,3,38)" rx="2" ry="2" />
<text  x="1170.32" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1653" width="0.2" height="15.0" fill="rgb(252,115,49)" rx="2" ry="2" />
<text  x="136.04" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="229" width="0.2" height="15.0" fill="rgb(205,166,37)" rx="2" ry="2" />
<text  x="1170.14" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="821" width="0.4" height="15.0" fill="rgb(231,89,1)" rx="2" ry="2" />
<text  x="1170.50" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="597" width="0.2" height="15.0" fill="rgb(230,172,1)" rx="2" ry="2" />
<text  x="136.04" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="181" width="0.1" height="15.0" fill="rgb(251,161,40)" rx="2" ry="2" />
<text  x="1169.96" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.03%)</title><rect x="84.5" y="1941" width="0.3" height="15.0" fill="rgb(210,36,11)" rx="2" ry="2" />
<text  x="87.46" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1589" width="0.2" height="15.0" fill="rgb(232,13,41)" rx="2" ry="2" />
<text  x="203.18" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="309" width="0.3" height="15.0" fill="rgb(234,164,17)" rx="2" ry="2" />
<text  x="88.18" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1413" width="0.1" height="15.0" fill="rgb(210,198,36)" rx="2" ry="2" />
<text  x="1169.96" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1333" width="0.2" height="15.0" fill="rgb(242,17,27)" rx="2" ry="2" />
<text  x="203.18" y="1343.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (1 samples, 0.02%)</title><rect x="167.7" y="1653" width="0.2" height="15.0" fill="rgb(223,157,10)" rx="2" ry="2" />
<text  x="170.68" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.09%)</title><rect x="199.6" y="1893" width="1.1" height="15.0" fill="rgb(226,155,39)" rx="2" ry="2" />
<text  x="202.64" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="613" width="0.3" height="15.0" fill="rgb(228,50,5)" rx="2" ry="2" />
<text  x="88.18" y="623.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="89.3" y="2021" width="0.2" height="15.0" fill="rgb(224,107,19)" rx="2" ry="2" />
<text  x="92.29" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1557" width="0.4" height="15.0" fill="rgb(252,132,44)" rx="2" ry="2" />
<text  x="1170.50" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="453" width="0.3" height="15.0" fill="rgb(211,12,52)" rx="2" ry="2" />
<text  x="88.18" y="463.5" ></text>
</g>
<g >
<title>get_futex_key (1 samples, 0.02%)</title><rect x="598.6" y="1941" width="0.2" height="15.0" fill="rgb(247,113,43)" rx="2" ry="2" />
<text  x="601.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1685" width="0.2" height="15.0" fill="rgb(227,31,10)" rx="2" ry="2" />
<text  x="1170.32" y="1695.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="178.9" y="1605" width="0.4" height="15.0" fill="rgb(205,118,4)" rx="2" ry="2" />
<text  x="181.93" y="1615.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.03%)</title><rect x="594.1" y="1861" width="0.4" height="15.0" fill="rgb(212,29,53)" rx="2" ry="2" />
<text  x="597.11" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1781" width="0.2" height="15.0" fill="rgb(210,55,5)" rx="2" ry="2" />
<text  x="1170.32" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1445" width="0.2" height="15.0" fill="rgb(250,144,38)" rx="2" ry="2" />
<text  x="1170.32" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1029" width="0.2" height="15.0" fill="rgb(237,25,40)" rx="2" ry="2" />
<text  x="203.54" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1541" width="0.3" height="15.0" fill="rgb(221,58,51)" rx="2" ry="2" />
<text  x="168.36" y="1551.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.02%)</title><rect x="1048.8" y="1973" width="0.1" height="15.0" fill="rgb(221,129,54)" rx="2" ry="2" />
<text  x="1051.75" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::next_byte_in_range (17 samples, 0.26%)</title><rect x="100.9" y="1925" width="3.0" height="15.0" fill="rgb(213,103,7)" rx="2" ry="2" />
<text  x="103.89" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1477" width="0.1" height="15.0" fill="rgb(237,116,32)" rx="2" ry="2" />
<text  x="1169.96" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (29 samples, 0.44%)</title><rect x="168.2" y="1605" width="5.2" height="15.0" fill="rgb(246,46,35)" rx="2" ry="2" />
<text  x="171.21" y="1615.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (1 samples, 0.02%)</title><rect x="155.7" y="1637" width="0.2" height="15.0" fill="rgb(212,0,28)" rx="2" ry="2" />
<text  x="158.71" y="1647.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (11 samples, 0.17%)</title><rect x="98.9" y="1909" width="2.0" height="15.0" fill="rgb(208,216,42)" rx="2" ry="2" />
<text  x="101.93" y="1919.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="110.2" y="1589" width="0.2" height="15.0" fill="rgb(239,208,22)" rx="2" ry="2" />
<text  x="113.18" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.02%)</title><rect x="183.4" y="1621" width="0.2" height="15.0" fill="rgb(214,11,41)" rx="2" ry="2" />
<text  x="186.39" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1877" width="0.5" height="15.0" fill="rgb(208,99,5)" rx="2" ry="2" />
<text  x="88.00" y="1887.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (183 samples, 2.77%)</title><rect x="133.2" y="1973" width="32.7" height="15.0" fill="rgb(210,66,20)" rx="2" ry="2" />
<text  x="136.21" y="1983.5" >TA..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (32 samples, 0.48%)</title><rect x="105.4" y="1701" width="5.7" height="15.0" fill="rgb(245,165,24)" rx="2" ry="2" />
<text  x="108.36" y="1711.5" ></text>
</g>
<g >
<title>do_page_fault (5 samples, 0.08%)</title><rect x="852.1" y="2005" width="0.9" height="15.0" fill="rgb(233,120,31)" rx="2" ry="2" />
<text  x="855.14" y="2015.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="848.0" y="1957" width="0.2" height="15.0" fill="rgb(234,126,33)" rx="2" ry="2" />
<text  x="851.04" y="1967.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (2 samples, 0.03%)</title><rect x="133.4" y="1637" width="0.4" height="15.0" fill="rgb(244,81,42)" rx="2" ry="2" />
<text  x="136.39" y="1647.5" ></text>
</g>
<g >
<title>__tls_get_addr@plt (1 samples, 0.02%)</title><rect x="850.0" y="2037" width="0.2" height="15.0" fill="rgb(206,84,29)" rx="2" ry="2" />
<text  x="853.00" y="2047.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.02%)</title><rect x="926.4" y="1973" width="0.2" height="15.0" fill="rgb(218,38,3)" rx="2" ry="2" />
<text  x="929.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1173" width="0.2" height="15.0" fill="rgb(227,86,7)" rx="2" ry="2" />
<text  x="136.04" y="1183.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.03%)</title><rect x="344.3" y="1957" width="0.3" height="15.0" fill="rgb(227,177,33)" rx="2" ry="2" />
<text  x="347.29" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1765" width="0.2" height="15.0" fill="rgb(249,137,34)" rx="2" ry="2" />
<text  x="1170.14" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="709" width="0.2" height="15.0" fill="rgb(217,166,11)" rx="2" ry="2" />
<text  x="203.18" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="899.6" y="2037" width="0.6" height="15.0" fill="rgb(253,155,28)" rx="2" ry="2" />
<text  x="902.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (32 samples, 0.48%)</title><rect x="105.4" y="1637" width="5.7" height="15.0" fill="rgb(210,154,31)" rx="2" ry="2" />
<text  x="108.36" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="261" width="0.2" height="15.0" fill="rgb(244,109,10)" rx="2" ry="2" />
<text  x="1170.14" y="271.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="211.2" y="1973" width="0.2" height="15.0" fill="rgb(254,190,43)" rx="2" ry="2" />
<text  x="214.25" y="1983.5" ></text>
</g>
<g >
<title>malloc (76 samples, 1.15%)</title><rect x="1100.7" y="2053" width="13.6" height="15.0" fill="rgb(234,102,40)" rx="2" ry="2" />
<text  x="1103.71" y="2063.5" ></text>
</g>
<g >
<title>cfree (146 samples, 2.21%)</title><rect x="900.4" y="2053" width="26.0" height="15.0" fill="rgb(243,128,20)" rx="2" ry="2" />
<text  x="903.36" y="2063.5" >c..</text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.02%)</title><rect x="713.2" y="1861" width="0.2" height="15.0" fill="rgb(246,160,34)" rx="2" ry="2" />
<text  x="716.21" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1589" width="0.3" height="15.0" fill="rgb(219,5,2)" rx="2" ry="2" />
<text  x="168.36" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (32 samples, 0.48%)</title><rect x="105.4" y="1717" width="5.7" height="15.0" fill="rgb(217,186,23)" rx="2" ry="2" />
<text  x="108.36" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.09%)</title><rect x="196.2" y="1685" width="1.1" height="15.0" fill="rgb(248,44,42)" rx="2" ry="2" />
<text  x="199.25" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1253" width="0.4" height="15.0" fill="rgb(224,212,6)" rx="2" ry="2" />
<text  x="1170.50" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1253" width="0.2" height="15.0" fill="rgb(208,104,33)" rx="2" ry="2" />
<text  x="168.54" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1269" width="0.4" height="15.0" fill="rgb(247,68,9)" rx="2" ry="2" />
<text  x="1170.50" y="1279.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="156.8" y="1653" width="0.3" height="15.0" fill="rgb(243,216,27)" rx="2" ry="2" />
<text  x="159.79" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (152 samples, 2.30%)</title><rect x="105.4" y="1861" width="27.1" height="15.0" fill="rgb(211,114,41)" rx="2" ry="2" />
<text  x="108.36" y="1871.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="933" width="0.1" height="15.0" fill="rgb(216,89,7)" rx="2" ry="2" />
<text  x="1169.96" y="943.5" ></text>
</g>
<g >
<title>copy_page_to_iter (3 samples, 0.05%)</title><rect x="899.6" y="1893" width="0.6" height="15.0" fill="rgb(231,60,23)" rx="2" ry="2" />
<text  x="902.64" y="1903.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (9 samples, 0.14%)</title><rect x="863.0" y="2005" width="1.6" height="15.0" fill="rgb(248,222,22)" rx="2" ry="2" />
<text  x="866.04" y="2015.5" ></text>
</g>
<g >
<title>strlen@plt (5 samples, 0.08%)</title><rect x="843.6" y="1893" width="0.9" height="15.0" fill="rgb(206,144,25)" rx="2" ry="2" />
<text  x="846.57" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (154 samples, 2.33%)</title><rect x="105.4" y="1909" width="27.5" height="15.0" fill="rgb(231,64,28)" rx="2" ry="2" />
<text  x="108.36" y="1919.5" >s..</text>
</g>
<g >
<title>__x64_sys_futex (15 samples, 0.23%)</title><rect x="43.8" y="1973" width="2.6" height="15.0" fill="rgb(210,125,25)" rx="2" ry="2" />
<text  x="46.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1557" width="0.3" height="15.0" fill="rgb(227,34,54)" rx="2" ry="2" />
<text  x="168.36" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1845" width="0.2" height="15.0" fill="rgb(238,86,0)" rx="2" ry="2" />
<text  x="1170.32" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1173" width="0.2" height="15.0" fill="rgb(220,54,16)" rx="2" ry="2" />
<text  x="1170.32" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="197" width="0.2" height="15.0" fill="rgb(218,2,15)" rx="2" ry="2" />
<text  x="136.04" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1573" width="0.2" height="15.0" fill="rgb(225,132,53)" rx="2" ry="2" />
<text  x="136.04" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (1 samples, 0.02%)</title><rect x="133.0" y="1957" width="0.2" height="15.0" fill="rgb(250,165,14)" rx="2" ry="2" />
<text  x="136.04" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (1 samples, 0.02%)</title><rect x="132.7" y="1813" width="0.2" height="15.0" fill="rgb(210,110,27)" rx="2" ry="2" />
<text  x="135.68" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (41 samples, 0.62%)</title><rect x="144.5" y="1653" width="7.3" height="15.0" fill="rgb(248,6,36)" rx="2" ry="2" />
<text  x="147.46" y="1663.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (1 samples, 0.02%)</title><rect x="597.3" y="1877" width="0.2" height="15.0" fill="rgb(227,147,15)" rx="2" ry="2" />
<text  x="600.32" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1541" width="0.2" height="15.0" fill="rgb(219,73,44)" rx="2" ry="2" />
<text  x="1170.14" y="1551.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="862.3" y="2005" width="0.4" height="15.0" fill="rgb(237,136,12)" rx="2" ry="2" />
<text  x="865.32" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1893" width="0.2" height="15.0" fill="rgb(209,193,16)" rx="2" ry="2" />
<text  x="1170.14" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1797" width="0.3" height="15.0" fill="rgb(253,197,51)" rx="2" ry="2" />
<text  x="168.36" y="1807.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.02%)</title><rect x="713.2" y="1845" width="0.2" height="15.0" fill="rgb(251,20,5)" rx="2" ry="2" />
<text  x="716.21" y="1855.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="158.4" y="1685" width="0.4" height="15.0" fill="rgb(234,155,50)" rx="2" ry="2" />
<text  x="161.39" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1141" width="0.2" height="15.0" fill="rgb(251,138,18)" rx="2" ry="2" />
<text  x="168.54" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1429" width="0.2" height="15.0" fill="rgb(224,60,31)" rx="2" ry="2" />
<text  x="203.54" y="1439.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.02%)</title><rect x="926.4" y="1861" width="0.2" height="15.0" fill="rgb(221,123,40)" rx="2" ry="2" />
<text  x="929.43" y="1871.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="621.2" y="1877" width="0.4" height="15.0" fill="rgb(232,228,26)" rx="2" ry="2" />
<text  x="624.25" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (1 samples, 0.02%)</title><rect x="597.3" y="2005" width="0.2" height="15.0" fill="rgb(230,223,52)" rx="2" ry="2" />
<text  x="600.32" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1093" width="0.2" height="15.0" fill="rgb(223,227,54)" rx="2" ry="2" />
<text  x="168.54" y="1103.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.03%)</title><rect x="344.3" y="1941" width="0.3" height="15.0" fill="rgb(241,3,42)" rx="2" ry="2" />
<text  x="347.29" y="1951.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 0.06%)</title><rect x="104.5" y="1845" width="0.7" height="15.0" fill="rgb(237,58,16)" rx="2" ry="2" />
<text  x="107.46" y="1855.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (1,368 samples, 20.70%)</title><rect x="602.5" y="1925" width="244.3" height="15.0" fill="rgb(234,37,51)" rx="2" ry="2" />
<text  x="605.50" y="1935.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1013" width="0.2" height="15.0" fill="rgb(213,86,29)" rx="2" ry="2" />
<text  x="1170.32" y="1023.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (29 samples, 0.44%)</title><rect x="336.2" y="1989" width="5.2" height="15.0" fill="rgb(223,163,54)" rx="2" ry="2" />
<text  x="339.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="117.7" y="1701" width="5.3" height="15.0" fill="rgb(248,204,19)" rx="2" ry="2" />
<text  x="120.68" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (30 samples, 0.45%)</title><rect x="117.7" y="1749" width="5.3" height="15.0" fill="rgb(207,104,27)" rx="2" ry="2" />
<text  x="120.68" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="853" width="0.2" height="15.0" fill="rgb(249,214,42)" rx="2" ry="2" />
<text  x="203.18" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1013" width="0.2" height="15.0" fill="rgb(232,51,46)" rx="2" ry="2" />
<text  x="203.18" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1365" width="0.1" height="15.0" fill="rgb(218,176,6)" rx="2" ry="2" />
<text  x="1169.96" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="805" width="0.2" height="15.0" fill="rgb(230,91,49)" rx="2" ry="2" />
<text  x="1170.32" y="815.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.02%)</title><rect x="926.4" y="1925" width="0.2" height="15.0" fill="rgb(228,70,37)" rx="2" ry="2" />
<text  x="929.43" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="677" width="0.2" height="15.0" fill="rgb(248,4,19)" rx="2" ry="2" />
<text  x="136.04" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="901" width="0.2" height="15.0" fill="rgb(233,99,20)" rx="2" ry="2" />
<text  x="203.18" y="911.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="421" width="0.3" height="15.0" fill="rgb(223,42,24)" rx="2" ry="2" />
<text  x="88.18" y="431.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="179.8" y="1621" width="0.2" height="15.0" fill="rgb(240,118,26)" rx="2" ry="2" />
<text  x="182.82" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="981" width="0.2" height="15.0" fill="rgb(246,32,16)" rx="2" ry="2" />
<text  x="203.54" y="991.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.02%)</title><rect x="591.8" y="1973" width="0.2" height="15.0" fill="rgb(218,44,35)" rx="2" ry="2" />
<text  x="594.79" y="1983.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.03%)</title><rect x="595.7" y="1957" width="0.4" height="15.0" fill="rgb(249,72,50)" rx="2" ry="2" />
<text  x="598.71" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1141" width="0.4" height="15.0" fill="rgb(244,209,50)" rx="2" ry="2" />
<text  x="1170.50" y="1151.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="167.0" y="1973" width="0.1" height="15.0" fill="rgb(212,138,35)" rx="2" ry="2" />
<text  x="169.96" y="1983.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="595.7" y="1973" width="0.4" height="15.0" fill="rgb(249,168,43)" rx="2" ry="2" />
<text  x="598.71" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="341" width="0.2" height="15.0" fill="rgb(211,31,53)" rx="2" ry="2" />
<text  x="136.04" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1029" width="0.1" height="15.0" fill="rgb(212,35,22)" rx="2" ry="2" />
<text  x="1169.96" y="1039.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (602 samples, 9.11%)</title><rect x="216.4" y="1989" width="107.5" height="15.0" fill="rgb(229,205,9)" rx="2" ry="2" />
<text  x="219.43" y="1999.5" >fasttext::Den..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="773" width="0.4" height="15.0" fill="rgb(205,14,3)" rx="2" ry="2" />
<text  x="1170.50" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="325" width="0.2" height="15.0" fill="rgb(230,162,40)" rx="2" ry="2" />
<text  x="1170.32" y="335.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.05%)</title><rect x="135.2" y="1573" width="0.5" height="15.0" fill="rgb(248,100,0)" rx="2" ry="2" />
<text  x="138.18" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (36 samples, 0.54%)</title><rect x="133.8" y="1669" width="6.4" height="15.0" fill="rgb(214,141,18)" rx="2" ry="2" />
<text  x="136.75" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1957" width="0.5" height="15.0" fill="rgb(233,89,3)" rx="2" ry="2" />
<text  x="88.00" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="341" width="0.1" height="15.0" fill="rgb(226,79,44)" rx="2" ry="2" />
<text  x="1169.96" y="351.5" ></text>
</g>
<g >
<title>std::istream::peek (1 samples, 0.02%)</title><rect x="599.5" y="1957" width="0.1" height="15.0" fill="rgb(228,168,32)" rx="2" ry="2" />
<text  x="602.46" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1429" width="0.2" height="15.0" fill="rgb(212,212,15)" rx="2" ry="2" />
<text  x="1170.14" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1701" width="0.3" height="15.0" fill="rgb(217,195,38)" rx="2" ry="2" />
<text  x="168.36" y="1711.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.03%)</title><rect x="745.0" y="1781" width="0.4" height="15.0" fill="rgb(243,180,52)" rx="2" ry="2" />
<text  x="748.00" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (35 samples, 0.53%)</title><rect x="173.8" y="1637" width="6.2" height="15.0" fill="rgb(207,128,24)" rx="2" ry="2" />
<text  x="176.75" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (30 samples, 0.45%)</title><rect x="168.0" y="1669" width="5.4" height="15.0" fill="rgb(254,63,37)" rx="2" ry="2" />
<text  x="171.04" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="117.7" y="1765" width="5.3" height="15.0" fill="rgb(219,18,41)" rx="2" ry="2" />
<text  x="120.68" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="805" width="0.4" height="15.0" fill="rgb(246,93,22)" rx="2" ry="2" />
<text  x="1170.50" y="815.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.02%)</title><rect x="158.9" y="1685" width="0.2" height="15.0" fill="rgb(248,3,15)" rx="2" ry="2" />
<text  x="161.93" y="1695.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (5 samples, 0.08%)</title><rect x="861.4" y="2037" width="0.9" height="15.0" fill="rgb(216,195,2)" rx="2" ry="2" />
<text  x="864.43" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1893" width="0.5" height="15.0" fill="rgb(235,215,34)" rx="2" ry="2" />
<text  x="88.00" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (17 samples, 0.26%)</title><rect x="181.6" y="1637" width="3.0" height="15.0" fill="rgb(240,172,50)" rx="2" ry="2" />
<text  x="184.61" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="421" width="0.1" height="15.0" fill="rgb(254,224,12)" rx="2" ry="2" />
<text  x="1169.96" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1029" width="0.2" height="15.0" fill="rgb(214,195,40)" rx="2" ry="2" />
<text  x="136.04" y="1039.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (19 samples, 0.29%)</title><rect x="605.0" y="1909" width="3.4" height="15.0" fill="rgb(220,74,35)" rx="2" ry="2" />
<text  x="608.00" y="1919.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (1 samples, 0.02%)</title><rect x="445.9" y="1941" width="0.2" height="15.0" fill="rgb(237,121,20)" rx="2" ry="2" />
<text  x="448.89" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1221" width="0.1" height="15.0" fill="rgb(233,144,23)" rx="2" ry="2" />
<text  x="1169.96" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1733" width="0.3" height="15.0" fill="rgb(236,84,3)" rx="2" ry="2" />
<text  x="168.36" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1061" width="0.4" height="15.0" fill="rgb(206,85,17)" rx="2" ry="2" />
<text  x="1170.50" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="789" width="0.2" height="15.0" fill="rgb(221,140,41)" rx="2" ry="2" />
<text  x="203.54" y="799.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLabel[abi:cxx11] (1 samples, 0.02%)</title><rect x="43.2" y="2005" width="0.2" height="15.0" fill="rgb(205,210,13)" rx="2" ry="2" />
<text  x="46.21" y="2015.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="159.5" y="1669" width="0.1" height="15.0" fill="rgb(211,169,54)" rx="2" ry="2" />
<text  x="162.46" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="151.8" y="1765" width="5.3" height="15.0" fill="rgb(252,55,32)" rx="2" ry="2" />
<text  x="154.79" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1157" width="0.2" height="15.0" fill="rgb(245,224,53)" rx="2" ry="2" />
<text  x="136.04" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.05%)</title><rect x="200.2" y="1797" width="0.5" height="15.0" fill="rgb(209,202,50)" rx="2" ry="2" />
<text  x="203.18" y="1807.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 0.02%)</title><rect x="445.7" y="1941" width="0.2" height="15.0" fill="rgb(230,202,42)" rx="2" ry="2" />
<text  x="448.71" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1669" width="0.2" height="15.0" fill="rgb(246,105,37)" rx="2" ry="2" />
<text  x="203.54" y="1679.5" ></text>
</g>
<g >
<title>alloc_pages_vma (27 samples, 0.41%)</title><rect x="431.4" y="1877" width="4.8" height="15.0" fill="rgb(225,94,40)" rx="2" ry="2" />
<text  x="434.43" y="1887.5" ></text>
</g>
<g >
<title>handle_mm_fault (7 samples, 0.11%)</title><rect x="38.9" y="1989" width="1.3" height="15.0" fill="rgb(240,111,33)" rx="2" ry="2" />
<text  x="41.93" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="469" width="0.2" height="15.0" fill="rgb(217,45,14)" rx="2" ry="2" />
<text  x="1170.14" y="479.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (68 samples, 1.03%)</title><rect x="637.1" y="1877" width="12.2" height="15.0" fill="rgb(218,45,3)" rx="2" ry="2" />
<text  x="640.14" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1269" width="0.5" height="15.0" fill="rgb(241,87,34)" rx="2" ry="2" />
<text  x="88.00" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="173.6" y="1733" width="6.4" height="15.0" fill="rgb(244,72,32)" rx="2" ry="2" />
<text  x="176.57" y="1743.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="753.2" y="1829" width="0.2" height="15.0" fill="rgb(231,89,40)" rx="2" ry="2" />
<text  x="756.21" y="1839.5" ></text>
</g>
<g >
<title>__munmap (2 samples, 0.03%)</title><rect x="594.1" y="1989" width="0.4" height="15.0" fill="rgb(239,160,22)" rx="2" ry="2" />
<text  x="597.11" y="1999.5" ></text>
</g>
<g >
<title>std::future&lt;boost::optional&lt;TDocument&gt; &gt;::get (6 samples, 0.09%)</title><rect x="104.1" y="1989" width="1.1" height="15.0" fill="rgb(228,39,40)" rx="2" ry="2" />
<text  x="107.11" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (576 samples, 8.72%)</title><rect x="650.5" y="1893" width="102.9" height="15.0" fill="rgb(240,9,20)" rx="2" ry="2" />
<text  x="653.54" y="1903.5" >onmt::Tokeni..</text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_0&gt; &gt; (3 samples, 0.05%)</title><rect x="597.9" y="1989" width="0.5" height="15.0" fill="rgb(254,117,23)" rx="2" ry="2" />
<text  x="600.86" y="1999.5" ></text>
</g>
<g >
<title>from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (1 samples, 0.02%)</title><rect x="849.6" y="1973" width="0.2" height="15.0" fill="rgb(250,111,5)" rx="2" ry="2" />
<text  x="852.64" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1093" width="0.2" height="15.0" fill="rgb(226,135,15)" rx="2" ry="2" />
<text  x="203.54" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1413" width="0.2" height="15.0" fill="rgb(254,93,29)" rx="2" ry="2" />
<text  x="136.04" y="1423.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="146.6" y="1621" width="0.4" height="15.0" fill="rgb(225,44,43)" rx="2" ry="2" />
<text  x="149.61" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1397" width="0.1" height="15.0" fill="rgb(220,11,18)" rx="2" ry="2" />
<text  x="1169.96" y="1407.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="926.4" y="2053" width="0.2" height="15.0" fill="rgb(212,7,48)" rx="2" ry="2" />
<text  x="929.43" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (1 samples, 0.02%)</title><rect x="173.4" y="1685" width="0.2" height="15.0" fill="rgb(250,126,41)" rx="2" ry="2" />
<text  x="176.39" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1365" width="0.2" height="15.0" fill="rgb(209,131,42)" rx="2" ry="2" />
<text  x="136.04" y="1375.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="1048.8" y="2021" width="0.1" height="15.0" fill="rgb(216,11,52)" rx="2" ry="2" />
<text  x="1051.75" y="2031.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (1 samples, 0.02%)</title><rect x="161.1" y="1669" width="0.1" height="15.0" fill="rgb(221,210,1)" rx="2" ry="2" />
<text  x="164.07" y="1679.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="169.5" y="1589" width="0.1" height="15.0" fill="rgb(216,164,20)" rx="2" ry="2" />
<text  x="172.46" y="1599.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.02%)</title><rect x="926.4" y="1941" width="0.2" height="15.0" fill="rgb(227,171,31)" rx="2" ry="2" />
<text  x="929.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1221" width="0.2" height="15.0" fill="rgb(221,183,47)" rx="2" ry="2" />
<text  x="203.18" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (36 samples, 0.54%)</title><rect x="173.6" y="1653" width="6.4" height="15.0" fill="rgb(240,155,51)" rx="2" ry="2" />
<text  x="176.57" y="1663.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.02%)</title><rect x="452.0" y="1925" width="0.1" height="15.0" fill="rgb(238,41,12)" rx="2" ry="2" />
<text  x="454.96" y="1935.5" ></text>
</g>
<g >
<title>cfree (4 samples, 0.06%)</title><rect x="215.7" y="1989" width="0.7" height="15.0" fill="rgb(215,62,21)" rx="2" ry="2" />
<text  x="218.71" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (1 samples, 0.02%)</title><rect x="143.4" y="1589" width="0.2" height="15.0" fill="rgb(248,61,49)" rx="2" ry="2" />
<text  x="146.39" y="1599.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (1 samples, 0.02%)</title><rect x="133.6" y="1621" width="0.2" height="15.0" fill="rgb(232,39,33)" rx="2" ry="2" />
<text  x="136.57" y="1631.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.02%)</title><rect x="181.4" y="1637" width="0.2" height="15.0" fill="rgb(216,69,39)" rx="2" ry="2" />
<text  x="184.43" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (41 samples, 0.62%)</title><rect x="144.5" y="1637" width="7.3" height="15.0" fill="rgb(228,168,12)" rx="2" ry="2" />
<text  x="147.46" y="1647.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (3 samples, 0.05%)</title><rect x="596.4" y="1941" width="0.6" height="15.0" fill="rgb(209,83,7)" rx="2" ry="2" />
<text  x="599.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="645" width="0.4" height="15.0" fill="rgb(242,177,37)" rx="2" ry="2" />
<text  x="1170.50" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (70 samples, 1.06%)</title><rect x="167.7" y="1749" width="12.5" height="15.0" fill="rgb(231,132,38)" rx="2" ry="2" />
<text  x="170.68" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (36 samples, 0.54%)</title><rect x="173.6" y="1717" width="6.4" height="15.0" fill="rgb(234,229,42)" rx="2" ry="2" />
<text  x="176.57" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (15 samples, 0.23%)</title><rect x="176.6" y="1621" width="2.7" height="15.0" fill="rgb(227,33,17)" rx="2" ry="2" />
<text  x="179.61" y="1631.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.02%)</title><rect x="187.9" y="1669" width="0.1" height="15.0" fill="rgb(250,141,26)" rx="2" ry="2" />
<text  x="190.86" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (30 samples, 0.45%)</title><rect x="117.7" y="1717" width="5.3" height="15.0" fill="rgb(231,122,17)" rx="2" ry="2" />
<text  x="120.68" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1189" width="0.2" height="15.0" fill="rgb(241,115,0)" rx="2" ry="2" />
<text  x="203.54" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (30 samples, 0.45%)</title><rect x="151.8" y="1701" width="5.3" height="15.0" fill="rgb(235,85,2)" rx="2" ry="2" />
<text  x="154.79" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="421" width="0.2" height="15.0" fill="rgb(206,38,26)" rx="2" ry="2" />
<text  x="136.04" y="431.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.02%)</title><rect x="876.1" y="1925" width="0.1" height="15.0" fill="rgb(215,115,16)" rx="2" ry="2" />
<text  x="879.07" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1557" width="0.5" height="15.0" fill="rgb(220,216,47)" rx="2" ry="2" />
<text  x="88.00" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="677" width="0.2" height="15.0" fill="rgb(213,38,2)" rx="2" ry="2" />
<text  x="203.54" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.02%)</title><rect x="165.2" y="1829" width="0.2" height="15.0" fill="rgb(214,164,32)" rx="2" ry="2" />
<text  x="168.18" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="549" width="0.2" height="15.0" fill="rgb(239,211,11)" rx="2" ry="2" />
<text  x="203.18" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.05%)</title><rect x="200.2" y="1781" width="0.5" height="15.0" fill="rgb(244,89,25)" rx="2" ry="2" />
<text  x="203.18" y="1791.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="158.8" y="1685" width="0.1" height="15.0" fill="rgb(205,15,49)" rx="2" ry="2" />
<text  x="161.75" y="1695.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.02%)</title><rect x="141.4" y="1605" width="0.2" height="15.0" fill="rgb(219,166,11)" rx="2" ry="2" />
<text  x="144.43" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="549" width="0.2" height="15.0" fill="rgb(229,26,11)" rx="2" ry="2" />
<text  x="1170.32" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="181" width="0.2" height="15.0" fill="rgb(246,199,39)" rx="2" ry="2" />
<text  x="136.04" y="191.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.03%)</title><rect x="46.4" y="1957" width="0.4" height="15.0" fill="rgb(239,228,25)" rx="2" ry="2" />
<text  x="49.43" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::underflow (2 samples, 0.03%)</title><rect x="873.8" y="2005" width="0.3" height="15.0" fill="rgb(222,7,6)" rx="2" ry="2" />
<text  x="876.75" y="2015.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.02%)</title><rect x="452.0" y="1781" width="0.1" height="15.0" fill="rgb(228,37,15)" rx="2" ry="2" />
<text  x="454.96" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="261" width="0.2" height="15.0" fill="rgb(251,127,35)" rx="2" ry="2" />
<text  x="1170.32" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (16 samples, 0.24%)</title><rect x="195.0" y="1701" width="2.9" height="15.0" fill="rgb(206,204,31)" rx="2" ry="2" />
<text  x="198.00" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1845" width="0.2" height="15.0" fill="rgb(234,217,17)" rx="2" ry="2" />
<text  x="136.04" y="1855.5" ></text>
</g>
<g >
<title>handle_mm_fault (39 samples, 0.59%)</title><rect x="430.4" y="1909" width="6.9" height="15.0" fill="rgb(232,105,30)" rx="2" ry="2" />
<text  x="433.36" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="165.2" y="1877" width="0.2" height="15.0" fill="rgb(228,44,28)" rx="2" ry="2" />
<text  x="168.18" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1445" width="0.2" height="15.0" fill="rgb(212,182,51)" rx="2" ry="2" />
<text  x="203.18" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1317" width="0.2" height="15.0" fill="rgb(245,141,3)" rx="2" ry="2" />
<text  x="203.54" y="1327.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="155.4" y="1637" width="0.3" height="15.0" fill="rgb(225,96,35)" rx="2" ry="2" />
<text  x="158.36" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="405" width="0.3" height="15.0" fill="rgb(252,78,3)" rx="2" ry="2" />
<text  x="88.18" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.02%)</title><rect x="713.0" y="1765" width="0.2" height="15.0" fill="rgb(227,81,39)" rx="2" ry="2" />
<text  x="716.04" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="821" width="0.3" height="15.0" fill="rgb(210,91,15)" rx="2" ry="2" />
<text  x="88.18" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="917" width="0.4" height="15.0" fill="rgb(237,120,4)" rx="2" ry="2" />
<text  x="1170.50" y="927.5" ></text>
</g>
<g >
<title>__munmap (1 samples, 0.02%)</title><rect x="452.0" y="1973" width="0.1" height="15.0" fill="rgb(237,51,1)" rx="2" ry="2" />
<text  x="454.96" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (1 samples, 0.02%)</title><rect x="164.6" y="1813" width="0.2" height="15.0" fill="rgb(245,135,26)" rx="2" ry="2" />
<text  x="167.64" y="1823.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (3 samples, 0.05%)</title><rect x="87.0" y="2021" width="0.5" height="15.0" fill="rgb(252,20,5)" rx="2" ry="2" />
<text  x="89.96" y="2031.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;ENewsCategory, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (1 samples, 0.02%)</title><rect x="599.1" y="1941" width="0.2" height="15.0" fill="rgb(229,72,50)" rx="2" ry="2" />
<text  x="602.11" y="1951.5" ></text>
</g>
<g >
<title>cfree (4 samples, 0.06%)</title><rect x="193.9" y="1701" width="0.7" height="15.0" fill="rgb(210,29,24)" rx="2" ry="2" />
<text  x="196.93" y="1711.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="598.6" y="2021" width="0.2" height="15.0" fill="rgb(224,205,51)" rx="2" ry="2" />
<text  x="601.57" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (28 samples, 0.42%)</title><rect x="127.3" y="1781" width="5.0" height="15.0" fill="rgb(222,105,41)" rx="2" ry="2" />
<text  x="130.32" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="757" width="0.2" height="15.0" fill="rgb(217,179,8)" rx="2" ry="2" />
<text  x="1170.14" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="565" width="0.1" height="15.0" fill="rgb(232,107,13)" rx="2" ry="2" />
<text  x="1169.96" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="89.8" y="2005" width="0.7" height="15.0" fill="rgb(229,72,20)" rx="2" ry="2" />
<text  x="92.82" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1045" width="0.1" height="15.0" fill="rgb(221,77,33)" rx="2" ry="2" />
<text  x="1169.96" y="1055.5" ></text>
</g>
<g >
<title>uncharge_page (1 samples, 0.02%)</title><rect x="595.7" y="1797" width="0.2" height="15.0" fill="rgb(246,96,44)" rx="2" ry="2" />
<text  x="598.71" y="1807.5" ></text>
</g>
<g >
<title>get_futex_key (1 samples, 0.02%)</title><rect x="43.8" y="1925" width="0.1" height="15.0" fill="rgb(222,225,39)" rx="2" ry="2" />
<text  x="46.75" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="133.8" y="1637" width="6.4" height="15.0" fill="rgb(238,79,53)" rx="2" ry="2" />
<text  x="136.75" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1173" width="0.5" height="15.0" fill="rgb(223,39,49)" rx="2" ry="2" />
<text  x="88.00" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1157" width="0.2" height="15.0" fill="rgb(222,7,49)" rx="2" ry="2" />
<text  x="1170.32" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1893" width="0.4" height="15.0" fill="rgb(232,202,49)" rx="2" ry="2" />
<text  x="1170.50" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1493" width="0.2" height="15.0" fill="rgb(208,145,6)" rx="2" ry="2" />
<text  x="136.04" y="1503.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="173.2" y="1589" width="0.2" height="15.0" fill="rgb(213,154,52)" rx="2" ry="2" />
<text  x="176.21" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1653" width="0.3" height="15.0" fill="rgb(240,122,25)" rx="2" ry="2" />
<text  x="168.36" y="1663.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.02%)</title><rect x="84.3" y="1925" width="0.2" height="15.0" fill="rgb(240,72,25)" rx="2" ry="2" />
<text  x="87.29" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1253" width="0.2" height="15.0" fill="rgb(244,194,20)" rx="2" ry="2" />
<text  x="136.04" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="597" width="0.1" height="15.0" fill="rgb(236,27,40)" rx="2" ry="2" />
<text  x="1169.96" y="607.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="593.9" y="1973" width="0.2" height="15.0" fill="rgb(226,37,15)" rx="2" ry="2" />
<text  x="596.93" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="725" width="0.2" height="15.0" fill="rgb(236,218,14)" rx="2" ry="2" />
<text  x="1170.14" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="453" width="0.2" height="15.0" fill="rgb(237,83,32)" rx="2" ry="2" />
<text  x="136.04" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.26%)</title><rect x="43.8" y="1989" width="3.0" height="15.0" fill="rgb(249,155,52)" rx="2" ry="2" />
<text  x="46.75" y="1999.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.03%)</title><rect x="118.2" y="1637" width="0.4" height="15.0" fill="rgb(212,106,1)" rx="2" ry="2" />
<text  x="121.21" y="1647.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (10 samples, 0.15%)</title><rect x="634.6" y="1877" width="1.8" height="15.0" fill="rgb(224,27,7)" rx="2" ry="2" />
<text  x="637.64" y="1887.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.02%)</title><rect x="1042.5" y="1989" width="0.2" height="15.0" fill="rgb(216,180,38)" rx="2" ry="2" />
<text  x="1045.50" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (32 samples, 0.48%)</title><rect x="105.4" y="1685" width="5.7" height="15.0" fill="rgb(229,187,19)" rx="2" ry="2" />
<text  x="108.36" y="1695.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (1 samples, 0.02%)</title><rect x="597.3" y="1925" width="0.2" height="15.0" fill="rgb(215,103,6)" rx="2" ry="2" />
<text  x="600.32" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.03%)</title><rect x="155.0" y="1637" width="0.4" height="15.0" fill="rgb(220,90,41)" rx="2" ry="2" />
<text  x="158.00" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (36 samples, 0.54%)</title><rect x="111.1" y="1717" width="6.4" height="15.0" fill="rgb(246,155,40)" rx="2" ry="2" />
<text  x="114.07" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="629" width="0.3" height="15.0" fill="rgb(218,84,0)" rx="2" ry="2" />
<text  x="88.18" y="639.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1589" width="0.5" height="15.0" fill="rgb(218,217,16)" rx="2" ry="2" />
<text  x="88.00" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9 samples, 0.14%)</title><rect x="869.5" y="1973" width="1.6" height="15.0" fill="rgb(212,221,33)" rx="2" ry="2" />
<text  x="872.46" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="405" width="0.2" height="15.0" fill="rgb(211,16,40)" rx="2" ry="2" />
<text  x="1170.32" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="997" width="0.2" height="15.0" fill="rgb(228,140,2)" rx="2" ry="2" />
<text  x="203.54" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="2021" width="0.2" height="15.0" fill="rgb(253,32,48)" rx="2" ry="2" />
<text  x="1170.14" y="2031.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (138 samples, 2.09%)</title><rect x="625.9" y="1893" width="24.6" height="15.0" fill="rgb(222,31,24)" rx="2" ry="2" />
<text  x="628.89" y="1903.5" >o..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (36 samples, 0.54%)</title><rect x="192.3" y="1781" width="6.5" height="15.0" fill="rgb(235,105,3)" rx="2" ry="2" />
<text  x="195.32" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="185.4" y="1637" width="0.1" height="15.0" fill="rgb(222,216,19)" rx="2" ry="2" />
<text  x="188.36" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="389" width="0.2" height="15.0" fill="rgb(239,158,27)" rx="2" ry="2" />
<text  x="1170.14" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1381" width="0.2" height="15.0" fill="rgb(212,111,12)" rx="2" ry="2" />
<text  x="203.54" y="1391.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (5 samples, 0.08%)</title><rect x="428.2" y="1861" width="0.9" height="15.0" fill="rgb(231,150,31)" rx="2" ry="2" />
<text  x="431.21" y="1871.5" ></text>
</g>
<g >
<title>malloc (8 samples, 0.12%)</title><rect x="859.8" y="2037" width="1.4" height="15.0" fill="rgb(230,73,3)" rx="2" ry="2" />
<text  x="862.82" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="661" width="0.4" height="15.0" fill="rgb(218,24,0)" rx="2" ry="2" />
<text  x="1170.50" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1717" width="0.2" height="15.0" fill="rgb(213,47,37)" rx="2" ry="2" />
<text  x="203.18" y="1727.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="341.4" y="1989" width="0.2" height="15.0" fill="rgb(241,88,5)" rx="2" ry="2" />
<text  x="344.43" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="164.8" y="1813" width="0.2" height="15.0" fill="rgb(246,75,3)" rx="2" ry="2" />
<text  x="167.82" y="1823.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="89.6" y="1941" width="0.2" height="15.0" fill="rgb(254,188,22)" rx="2" ry="2" />
<text  x="92.64" y="1951.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="713.4" y="1781" width="0.4" height="15.0" fill="rgb(207,126,2)" rx="2" ry="2" />
<text  x="716.39" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="149" width="0.3" height="15.0" fill="rgb(236,115,22)" rx="2" ry="2" />
<text  x="88.18" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1349" width="0.2" height="15.0" fill="rgb(240,128,10)" rx="2" ry="2" />
<text  x="1170.14" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (13 samples, 0.20%)</title><rect x="107.9" y="1589" width="2.3" height="15.0" fill="rgb(227,181,8)" rx="2" ry="2" />
<text  x="110.86" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="837" width="0.2" height="15.0" fill="rgb(212,203,46)" rx="2" ry="2" />
<text  x="136.04" y="847.5" ></text>
</g>
<g >
<title>__pthread_once (1 samples, 0.02%)</title><rect x="874.5" y="2005" width="0.1" height="15.0" fill="rgb(236,44,47)" rx="2" ry="2" />
<text  x="877.46" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (1 samples, 0.02%)</title><rect x="596.2" y="1989" width="0.2" height="15.0" fill="rgb(243,196,39)" rx="2" ry="2" />
<text  x="599.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="37" width="0.2" height="15.0" fill="rgb(233,111,33)" rx="2" ry="2" />
<text  x="1170.14" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1013" width="0.1" height="15.0" fill="rgb(252,155,37)" rx="2" ry="2" />
<text  x="1169.96" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1093" width="0.1" height="15.0" fill="rgb(231,128,4)" rx="2" ry="2" />
<text  x="1169.96" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="549" width="0.2" height="15.0" fill="rgb(220,105,17)" rx="2" ry="2" />
<text  x="136.04" y="559.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1 samples, 0.02%)</title><rect x="594.3" y="1829" width="0.2" height="15.0" fill="rgb(240,183,19)" rx="2" ry="2" />
<text  x="597.29" y="1839.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1 samples, 0.02%)</title><rect x="876.1" y="1845" width="0.1" height="15.0" fill="rgb(214,92,6)" rx="2" ry="2" />
<text  x="879.07" y="1855.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.02%)</title><rect x="713.0" y="1781" width="0.2" height="15.0" fill="rgb(215,73,42)" rx="2" ry="2" />
<text  x="716.04" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="693" width="0.2" height="15.0" fill="rgb(237,148,50)" rx="2" ry="2" />
<text  x="203.18" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="981" width="0.2" height="15.0" fill="rgb(239,186,54)" rx="2" ry="2" />
<text  x="1170.14" y="991.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.06%)</title><rect x="152.1" y="1653" width="0.8" height="15.0" fill="rgb(247,195,39)" rx="2" ry="2" />
<text  x="155.14" y="1663.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::get_str[abi:cxx11] (1 samples, 0.02%)</title><rect x="603.0" y="1909" width="0.2" height="15.0" fill="rgb(221,61,35)" rx="2" ry="2" />
<text  x="606.04" y="1919.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="128.8" y="1701" width="0.1" height="15.0" fill="rgb(208,163,2)" rx="2" ry="2" />
<text  x="131.75" y="1711.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.03%)</title><rect x="745.0" y="1877" width="0.4" height="15.0" fill="rgb(228,41,39)" rx="2" ry="2" />
<text  x="748.00" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1429" width="0.2" height="15.0" fill="rgb(254,26,24)" rx="2" ry="2" />
<text  x="168.54" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (1 samples, 0.02%)</title><rect x="165.0" y="1829" width="0.2" height="15.0" fill="rgb(235,196,44)" rx="2" ry="2" />
<text  x="168.00" y="1839.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="144.3" y="1605" width="0.2" height="15.0" fill="rgb(219,3,51)" rx="2" ry="2" />
<text  x="147.29" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1141" width="0.2" height="15.0" fill="rgb(207,30,51)" rx="2" ry="2" />
<text  x="136.04" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1749" width="0.2" height="15.0" fill="rgb(246,13,40)" rx="2" ry="2" />
<text  x="203.18" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1669" width="0.1" height="15.0" fill="rgb(248,21,3)" rx="2" ry="2" />
<text  x="1169.96" y="1679.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.02%)</title><rect x="84.6" y="1893" width="0.2" height="15.0" fill="rgb(218,208,43)" rx="2" ry="2" />
<text  x="87.64" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.05%)</title><rect x="1167.0" y="2053" width="0.5" height="15.0" fill="rgb(241,178,10)" rx="2" ry="2" />
<text  x="1169.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1941" width="0.2" height="15.0" fill="rgb(207,218,42)" rx="2" ry="2" />
<text  x="136.04" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="629" width="0.2" height="15.0" fill="rgb(214,12,29)" rx="2" ry="2" />
<text  x="1170.14" y="639.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="661" width="0.3" height="15.0" fill="rgb(235,167,48)" rx="2" ry="2" />
<text  x="88.18" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="181" width="0.2" height="15.0" fill="rgb(246,4,28)" rx="2" ry="2" />
<text  x="1170.32" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1109" width="0.2" height="15.0" fill="rgb(251,112,45)" rx="2" ry="2" />
<text  x="1170.32" y="1119.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.09%)</title><rect x="83.8" y="2021" width="1.0" height="15.0" fill="rgb(206,93,38)" rx="2" ry="2" />
<text  x="86.75" y="2031.5" ></text>
</g>
<g >
<title>do_page_fault (35 samples, 0.53%)</title><rect x="422.9" y="1925" width="6.2" height="15.0" fill="rgb(232,224,49)" rx="2" ry="2" />
<text  x="425.86" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1893" width="0.3" height="15.0" fill="rgb(253,172,48)" rx="2" ry="2" />
<text  x="168.36" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="933" width="0.2" height="15.0" fill="rgb(214,131,18)" rx="2" ry="2" />
<text  x="203.18" y="943.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.03%)</title><rect x="142.9" y="1589" width="0.3" height="15.0" fill="rgb(219,45,21)" rx="2" ry="2" />
<text  x="145.86" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1381" width="0.2" height="15.0" fill="rgb(231,37,33)" rx="2" ry="2" />
<text  x="136.04" y="1391.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (4 samples, 0.06%)</title><rect x="88.6" y="2021" width="0.7" height="15.0" fill="rgb(219,131,0)" rx="2" ry="2" />
<text  x="91.57" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="357" width="0.4" height="15.0" fill="rgb(233,75,17)" rx="2" ry="2" />
<text  x="1170.50" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (24 samples, 0.36%)</title><rect x="140.2" y="1701" width="4.3" height="15.0" fill="rgb(217,115,25)" rx="2" ry="2" />
<text  x="143.18" y="1711.5" ></text>
</g>
<g >
<title>Summarize (996 samples, 15.07%)</title><rect x="166.4" y="2005" width="177.9" height="15.0" fill="rgb(236,200,53)" rx="2" ry="2" />
<text  x="169.43" y="2015.5" >Summarize</text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.12%)</title><rect x="175.0" y="1621" width="1.4" height="15.0" fill="rgb(210,27,54)" rx="2" ry="2" />
<text  x="178.00" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="132.5" y="1797" width="0.2" height="15.0" fill="rgb(241,89,31)" rx="2" ry="2" />
<text  x="135.50" y="1807.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.02%)</title><rect x="84.1" y="1941" width="0.2" height="15.0" fill="rgb(212,98,5)" rx="2" ry="2" />
<text  x="87.11" y="1951.5" ></text>
</g>
<g >
<title>TNewsCluster::GetTimestamp (1 samples, 0.02%)</title><rect x="165.9" y="1973" width="0.2" height="15.0" fill="rgb(230,119,2)" rx="2" ry="2" />
<text  x="168.89" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="981" width="0.4" height="15.0" fill="rgb(219,33,21)" rx="2" ry="2" />
<text  x="1170.50" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="885" width="0.2" height="15.0" fill="rgb(220,176,2)" rx="2" ry="2" />
<text  x="136.04" y="895.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="187.7" y="1669" width="0.2" height="15.0" fill="rgb(236,36,33)" rx="2" ry="2" />
<text  x="190.68" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (31 samples, 0.47%)</title><rect x="167.9" y="1701" width="5.5" height="15.0" fill="rgb(213,225,31)" rx="2" ry="2" />
<text  x="170.86" y="1711.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (2 samples, 0.03%)</title><rect x="602.0" y="1941" width="0.3" height="15.0" fill="rgb(220,227,27)" rx="2" ry="2" />
<text  x="604.96" y="1951.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="118.6" y="1637" width="0.2" height="15.0" fill="rgb(236,59,17)" rx="2" ry="2" />
<text  x="121.57" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="581" width="0.2" height="15.0" fill="rgb(223,125,33)" rx="2" ry="2" />
<text  x="203.18" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="901" width="0.2" height="15.0" fill="rgb(206,146,22)" rx="2" ry="2" />
<text  x="136.04" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (28 samples, 0.42%)</title><rect x="127.3" y="1733" width="5.0" height="15.0" fill="rgb(222,206,18)" rx="2" ry="2" />
<text  x="130.32" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (179 samples, 2.71%)</title><rect x="167.5" y="1909" width="32.0" height="15.0" fill="rgb(217,161,11)" rx="2" ry="2" />
<text  x="170.50" y="1919.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="85" width="0.2" height="15.0" fill="rgb(233,72,48)" rx="2" ry="2" />
<text  x="1170.14" y="95.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="949" width="0.5" height="15.0" fill="rgb(237,117,50)" rx="2" ry="2" />
<text  x="88.00" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (7 samples, 0.11%)</title><rect x="846.8" y="1941" width="1.2" height="15.0" fill="rgb(252,212,50)" rx="2" ry="2" />
<text  x="849.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.09%)</title><rect x="199.6" y="1925" width="1.1" height="15.0" fill="rgb(225,59,52)" rx="2" ry="2" />
<text  x="202.64" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1413" width="0.2" height="15.0" fill="rgb(252,61,2)" rx="2" ry="2" />
<text  x="203.18" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="773" width="0.3" height="15.0" fill="rgb(246,153,1)" rx="2" ry="2" />
<text  x="88.18" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1621" width="0.2" height="15.0" fill="rgb(210,101,42)" rx="2" ry="2" />
<text  x="203.18" y="1631.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (34 samples, 0.51%)</title><rect x="1042.9" y="2053" width="6.0" height="15.0" fill="rgb(210,56,15)" rx="2" ry="2" />
<text  x="1045.86" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (30 samples, 0.45%)</title><rect x="117.7" y="1653" width="5.3" height="15.0" fill="rgb(237,149,40)" rx="2" ry="2" />
<text  x="120.68" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1077" width="0.2" height="15.0" fill="rgb(229,213,24)" rx="2" ry="2" />
<text  x="1170.14" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="725" width="0.4" height="15.0" fill="rgb(221,37,12)" rx="2" ry="2" />
<text  x="1170.50" y="735.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.02%)</title><rect x="713.0" y="1749" width="0.2" height="15.0" fill="rgb(206,121,13)" rx="2" ry="2" />
<text  x="716.04" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="613" width="0.2" height="15.0" fill="rgb(226,102,46)" rx="2" ry="2" />
<text  x="136.04" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="517" width="0.2" height="15.0" fill="rgb(237,172,30)" rx="2" ry="2" />
<text  x="136.04" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1797" width="0.1" height="15.0" fill="rgb(252,46,11)" rx="2" ry="2" />
<text  x="1169.96" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="965" width="0.1" height="15.0" fill="rgb(254,212,8)" rx="2" ry="2" />
<text  x="1169.96" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1333" width="0.2" height="15.0" fill="rgb(221,191,30)" rx="2" ry="2" />
<text  x="203.54" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (30 samples, 0.45%)</title><rect x="151.8" y="1733" width="5.3" height="15.0" fill="rgb(234,133,36)" rx="2" ry="2" />
<text  x="154.79" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="168.0" y="1637" width="0.2" height="15.0" fill="rgb(214,55,4)" rx="2" ry="2" />
<text  x="171.04" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="117.5" y="1717" width="0.2" height="15.0" fill="rgb(243,191,0)" rx="2" ry="2" />
<text  x="120.50" y="1727.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1 samples, 0.02%)</title><rect x="595.7" y="1877" width="0.2" height="15.0" fill="rgb(213,215,40)" rx="2" ry="2" />
<text  x="598.71" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="85" width="0.3" height="15.0" fill="rgb(210,187,38)" rx="2" ry="2" />
<text  x="88.18" y="95.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="159.5" y="1621" width="0.1" height="15.0" fill="rgb(207,57,2)" rx="2" ry="2" />
<text  x="162.46" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1829" width="0.2" height="15.0" fill="rgb(211,13,50)" rx="2" ry="2" />
<text  x="136.04" y="1839.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (1 samples, 0.02%)</title><rect x="637.0" y="1877" width="0.1" height="15.0" fill="rgb(214,223,3)" rx="2" ry="2" />
<text  x="639.96" y="1887.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="876.1" y="2005" width="0.1" height="15.0" fill="rgb(245,3,35)" rx="2" ry="2" />
<text  x="879.07" y="2015.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.06%)</title><rect x="712.3" y="1765" width="0.7" height="15.0" fill="rgb(245,216,14)" rx="2" ry="2" />
<text  x="715.32" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.5" y="37" width="0.2" height="15.0" fill="rgb(240,196,46)" rx="2" ry="2" />
<text  x="1170.50" y="47.5" ></text>
</g>
<g >
<title>get_user_pages_fast (1 samples, 0.02%)</title><rect x="43.8" y="1909" width="0.1" height="15.0" fill="rgb(247,128,39)" rx="2" ry="2" />
<text  x="46.75" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="198.9" y="1797" width="0.2" height="15.0" fill="rgb(236,229,10)" rx="2" ry="2" />
<text  x="201.93" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="517" width="0.3" height="15.0" fill="rgb(249,191,14)" rx="2" ry="2" />
<text  x="88.18" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (22 samples, 0.33%)</title><rect x="123.2" y="1685" width="3.9" height="15.0" fill="rgb(242,135,9)" rx="2" ry="2" />
<text  x="126.21" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="805" width="0.2" height="15.0" fill="rgb(224,137,34)" rx="2" ry="2" />
<text  x="203.54" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="165.2" y="1781" width="0.2" height="15.0" fill="rgb(240,26,19)" rx="2" ry="2" />
<text  x="168.18" y="1791.5" ></text>
</g>
<g >
<title>__dynamic_cast (7 samples, 0.11%)</title><rect x="192.7" y="1701" width="1.2" height="15.0" fill="rgb(206,162,7)" rx="2" ry="2" />
<text  x="195.68" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (152 samples, 2.30%)</title><rect x="105.4" y="1845" width="27.1" height="15.0" fill="rgb(239,200,2)" rx="2" ry="2" />
<text  x="108.36" y="1855.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1477" width="0.2" height="15.0" fill="rgb(236,103,33)" rx="2" ry="2" />
<text  x="1170.14" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="501" width="0.2" height="15.0" fill="rgb(218,171,36)" rx="2" ry="2" />
<text  x="1170.14" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="452.0" y="1957" width="0.1" height="15.0" fill="rgb(242,56,21)" rx="2" ry="2" />
<text  x="454.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (35 samples, 0.53%)</title><rect x="133.8" y="1589" width="6.2" height="15.0" fill="rgb(235,215,42)" rx="2" ry="2" />
<text  x="136.75" y="1599.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.05%)</title><rect x="127.9" y="1701" width="0.5" height="15.0" fill="rgb(247,202,13)" rx="2" ry="2" />
<text  x="130.86" y="1711.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="46.4" y="1973" width="0.4" height="15.0" fill="rgb(244,144,52)" rx="2" ry="2" />
<text  x="49.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1045" width="0.2" height="15.0" fill="rgb(246,20,53)" rx="2" ry="2" />
<text  x="1170.32" y="1055.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.02%)</title><rect x="926.4" y="1989" width="0.2" height="15.0" fill="rgb(222,194,35)" rx="2" ry="2" />
<text  x="929.43" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="677" width="0.2" height="15.0" fill="rgb(237,113,19)" rx="2" ry="2" />
<text  x="1170.32" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="117.5" y="1733" width="0.2" height="15.0" fill="rgb(205,59,32)" rx="2" ry="2" />
<text  x="120.50" y="1743.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.02%)</title><rect x="597.1" y="1973" width="0.2" height="15.0" fill="rgb(234,52,39)" rx="2" ry="2" />
<text  x="600.14" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="965" width="0.2" height="15.0" fill="rgb(208,113,24)" rx="2" ry="2" />
<text  x="1170.32" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1397" width="0.2" height="15.0" fill="rgb(240,54,45)" rx="2" ry="2" />
<text  x="136.04" y="1407.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="183.2" y="1621" width="0.2" height="15.0" fill="rgb(212,27,50)" rx="2" ry="2" />
<text  x="186.21" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1205" width="0.2" height="15.0" fill="rgb(239,42,25)" rx="2" ry="2" />
<text  x="1170.32" y="1215.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;@plt (1 samples, 0.02%)</title><rect x="861.2" y="2037" width="0.2" height="15.0" fill="rgb(235,107,46)" rx="2" ry="2" />
<text  x="864.25" y="2047.5" ></text>
</g>
<g >
<title>DetectCategory (3 samples, 0.05%)</title><rect x="599.1" y="1973" width="0.5" height="15.0" fill="rgb(242,26,7)" rx="2" ry="2" />
<text  x="602.11" y="1983.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="172.3" y="1573" width="0.2" height="15.0" fill="rgb(211,12,46)" rx="2" ry="2" />
<text  x="175.32" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="133" width="0.2" height="15.0" fill="rgb(220,174,12)" rx="2" ry="2" />
<text  x="1170.14" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="981" width="0.2" height="15.0" fill="rgb(210,79,39)" rx="2" ry="2" />
<text  x="136.04" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="164.8" y="1797" width="0.2" height="15.0" fill="rgb(218,157,35)" rx="2" ry="2" />
<text  x="167.82" y="1807.5" ></text>
</g>
<g >
<title>blk_done_softirq (1 samples, 0.02%)</title><rect x="713.2" y="1797" width="0.2" height="15.0" fill="rgb(252,10,49)" rx="2" ry="2" />
<text  x="716.21" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1637" width="0.2" height="15.0" fill="rgb(213,165,37)" rx="2" ry="2" />
<text  x="1170.14" y="1647.5" ></text>
</g>
<g >
<title>handle_mm_fault (26 samples, 0.39%)</title><rect x="424.5" y="1893" width="4.6" height="15.0" fill="rgb(209,229,21)" rx="2" ry="2" />
<text  x="427.46" y="1903.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (2 samples, 0.03%)</title><rect x="603.8" y="1909" width="0.3" height="15.0" fill="rgb(233,178,29)" rx="2" ry="2" />
<text  x="606.75" y="1919.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="188.0" y="1669" width="0.2" height="15.0" fill="rgb(239,108,38)" rx="2" ry="2" />
<text  x="191.04" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.03%)</title><rect x="133.4" y="1669" width="0.4" height="15.0" fill="rgb(248,197,50)" rx="2" ry="2" />
<text  x="136.39" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1477" width="0.2" height="15.0" fill="rgb(223,215,20)" rx="2" ry="2" />
<text  x="203.18" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="165" width="0.2" height="15.0" fill="rgb(205,69,8)" rx="2" ry="2" />
<text  x="1170.32" y="175.5" ></text>
</g>
<g >
<title>TDocument::PreprocessTextFields (1,390 samples, 21.04%)</title><rect x="600.2" y="1973" width="248.2" height="15.0" fill="rgb(220,115,2)" rx="2" ry="2" />
<text  x="603.18" y="1983.5" >TDocument::PreprocessTextFields</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1973" width="0.2" height="15.0" fill="rgb(228,226,35)" rx="2" ry="2" />
<text  x="1170.14" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="965" width="0.2" height="15.0" fill="rgb(228,54,25)" rx="2" ry="2" />
<text  x="203.18" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1045" width="0.2" height="15.0" fill="rgb(232,195,18)" rx="2" ry="2" />
<text  x="1170.14" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="853" width="0.1" height="15.0" fill="rgb(246,104,24)" rx="2" ry="2" />
<text  x="1169.96" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (36 samples, 0.54%)</title><rect x="111.1" y="1669" width="6.4" height="15.0" fill="rgb(222,177,20)" rx="2" ry="2" />
<text  x="114.07" y="1679.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (6 samples, 0.09%)</title><rect x="1093.8" y="2053" width="1.0" height="15.0" fill="rgb(222,65,5)" rx="2" ry="2" />
<text  x="1096.75" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1157" width="0.4" height="15.0" fill="rgb(233,11,44)" rx="2" ry="2" />
<text  x="1170.50" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1509" width="0.2" height="15.0" fill="rgb(212,117,17)" rx="2" ry="2" />
<text  x="1170.14" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1781" width="0.1" height="15.0" fill="rgb(234,154,42)" rx="2" ry="2" />
<text  x="1169.96" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="965" width="0.4" height="15.0" fill="rgb(205,45,8)" rx="2" ry="2" />
<text  x="1170.50" y="975.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="756.2" y="1845" width="0.2" height="15.0" fill="rgb(238,37,43)" rx="2" ry="2" />
<text  x="759.25" y="1855.5" ></text>
</g>
<g >
<title>page_fault (11 samples, 0.17%)</title><rect x="38.2" y="2037" width="2.0" height="15.0" fill="rgb(243,98,8)" rx="2" ry="2" />
<text  x="41.21" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (23 samples, 0.35%)</title><rect x="123.0" y="1717" width="4.1" height="15.0" fill="rgb(246,226,34)" rx="2" ry="2" />
<text  x="126.04" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1381" width="0.2" height="15.0" fill="rgb(253,60,39)" rx="2" ry="2" />
<text  x="1170.32" y="1391.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (165 samples, 2.50%)</title><rect x="10.7" y="2053" width="29.5" height="15.0" fill="rgb(230,7,47)" rx="2" ry="2" />
<text  x="13.71" y="2063.5" >[l..</text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.03%)</title><rect x="594.1" y="1845" width="0.4" height="15.0" fill="rgb(246,176,23)" rx="2" ry="2" />
<text  x="597.11" y="1855.5" ></text>
</g>
<g >
<title>memcmp@plt (9 samples, 0.14%)</title><rect x="1115.0" y="2053" width="1.6" height="15.0" fill="rgb(237,99,18)" rx="2" ry="2" />
<text  x="1118.00" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1317" width="0.4" height="15.0" fill="rgb(237,96,24)" rx="2" ry="2" />
<text  x="1170.50" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (38 samples, 0.58%)</title><rect x="133.4" y="1701" width="6.8" height="15.0" fill="rgb(231,155,35)" rx="2" ry="2" />
<text  x="136.39" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;onmt::AnnotatedToken, std::allocator&lt;onmt::AnnotatedToken&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="843.4" y="1893" width="0.2" height="15.0" fill="rgb(211,12,47)" rx="2" ry="2" />
<text  x="846.39" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="325" width="0.2" height="15.0" fill="rgb(239,92,26)" rx="2" ry="2" />
<text  x="136.04" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="725" width="0.2" height="15.0" fill="rgb(224,146,35)" rx="2" ry="2" />
<text  x="203.54" y="735.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1365" width="0.5" height="15.0" fill="rgb(220,163,25)" rx="2" ry="2" />
<text  x="88.00" y="1375.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (33 samples, 0.50%)</title><rect x="1155.5" y="2037" width="5.9" height="15.0" fill="rgb(218,163,8)" rx="2" ry="2" />
<text  x="1158.54" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="821" width="0.1" height="15.0" fill="rgb(229,3,50)" rx="2" ry="2" />
<text  x="1169.96" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="469" width="0.2" height="15.0" fill="rgb(222,24,32)" rx="2" ry="2" />
<text  x="203.18" y="479.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.02%)</title><rect x="595.9" y="1813" width="0.2" height="15.0" fill="rgb(253,223,4)" rx="2" ry="2" />
<text  x="598.89" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (35 samples, 0.53%)</title><rect x="111.2" y="1637" width="6.3" height="15.0" fill="rgb(238,144,46)" rx="2" ry="2" />
<text  x="114.25" y="1647.5" ></text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.09%)</title><rect x="83.8" y="1973" width="1.0" height="15.0" fill="rgb(248,46,53)" rx="2" ry="2" />
<text  x="86.75" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve@plt (1 samples, 0.02%)</title><rect x="842.3" y="1893" width="0.2" height="15.0" fill="rgb(252,2,19)" rx="2" ry="2" />
<text  x="845.32" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1461" width="0.2" height="15.0" fill="rgb(246,29,3)" rx="2" ry="2" />
<text  x="203.18" y="1471.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.02%)</title><rect x="89.6" y="1957" width="0.2" height="15.0" fill="rgb(240,39,37)" rx="2" ry="2" />
<text  x="92.64" y="1967.5" ></text>
</g>
<g >
<title>ksys_read (4 samples, 0.06%)</title><rect x="89.8" y="1973" width="0.7" height="15.0" fill="rgb(232,186,30)" rx="2" ry="2" />
<text  x="92.82" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1061" width="0.2" height="15.0" fill="rgb(230,137,49)" rx="2" ry="2" />
<text  x="1170.32" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (5 samples, 0.08%)</title><rect x="649.6" y="1877" width="0.9" height="15.0" fill="rgb(247,19,25)" rx="2" ry="2" />
<text  x="652.64" y="1887.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.05%)</title><rect x="159.1" y="1685" width="0.5" height="15.0" fill="rgb(239,26,33)" rx="2" ry="2" />
<text  x="162.11" y="1695.5" ></text>
</g>
<g >
<title>Eigen::internal::product_evaluator&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt;, 7, Eigen::DenseShape, Eigen::DenseShape, float, float&gt;::product_evaluator (1 samples, 0.02%)</title><rect x="211.1" y="1973" width="0.1" height="15.0" fill="rgb(238,21,46)" rx="2" ry="2" />
<text  x="214.07" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (180 samples, 2.72%)</title><rect x="133.2" y="1925" width="32.2" height="15.0" fill="rgb(209,29,33)" rx="2" ry="2" />
<text  x="136.21" y="1935.5" >st..</text>
</g>
<g >
<title>fasttext::Vector::addRow (4 samples, 0.06%)</title><rect x="575.4" y="1973" width="0.7" height="15.0" fill="rgb(210,95,33)" rx="2" ry="2" />
<text  x="578.36" y="1983.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1941" width="0.2" height="15.0" fill="rgb(233,36,21)" rx="2" ry="2" />
<text  x="600.32" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="853" width="0.4" height="15.0" fill="rgb(245,180,47)" rx="2" ry="2" />
<text  x="1170.50" y="863.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (2 samples, 0.03%)</title><rect x="427.9" y="1861" width="0.3" height="15.0" fill="rgb(241,172,34)" rx="2" ry="2" />
<text  x="430.86" y="1871.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.02%)</title><rect x="597.1" y="1957" width="0.2" height="15.0" fill="rgb(209,45,9)" rx="2" ry="2" />
<text  x="600.14" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.09%)</title><rect x="199.6" y="1909" width="1.1" height="15.0" fill="rgb(244,96,52)" rx="2" ry="2" />
<text  x="202.64" y="1919.5" ></text>
</g>
<g >
<title>fasttext::entry::entry (1 samples, 0.02%)</title><rect x="1100.2" y="2053" width="0.2" height="15.0" fill="rgb(246,7,15)" rx="2" ry="2" />
<text  x="1103.18" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_repeat (1 samples, 0.02%)</title><rect x="173.4" y="1701" width="0.2" height="15.0" fill="rgb(243,111,16)" rx="2" ry="2" />
<text  x="176.39" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (42 samples, 0.64%)</title><rect x="157.1" y="1781" width="7.5" height="15.0" fill="rgb(209,217,42)" rx="2" ry="2" />
<text  x="160.14" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (28 samples, 0.42%)</title><rect x="127.3" y="1797" width="5.0" height="15.0" fill="rgb(248,98,28)" rx="2" ry="2" />
<text  x="130.32" y="1807.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (3 samples, 0.05%)</title><rect x="42.7" y="2037" width="0.5" height="15.0" fill="rgb(226,4,43)" rx="2" ry="2" />
<text  x="45.68" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1973" width="0.2" height="15.0" fill="rgb(236,33,26)" rx="2" ry="2" />
<text  x="1170.32" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (8 samples, 0.12%)</title><rect x="1136.1" y="2053" width="1.4" height="15.0" fill="rgb(225,36,51)" rx="2" ry="2" />
<text  x="1139.07" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1189" width="0.2" height="15.0" fill="rgb(229,26,12)" rx="2" ry="2" />
<text  x="1170.32" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1829" width="0.2" height="15.0" fill="rgb(223,167,36)" rx="2" ry="2" />
<text  x="1170.32" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="869" width="0.4" height="15.0" fill="rgb(216,43,15)" rx="2" ry="2" />
<text  x="1170.50" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1221" width="0.2" height="15.0" fill="rgb(217,123,23)" rx="2" ry="2" />
<text  x="136.04" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1605" width="0.2" height="15.0" fill="rgb(218,222,26)" rx="2" ry="2" />
<text  x="1170.32" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="309" width="0.2" height="15.0" fill="rgb(234,95,15)" rx="2" ry="2" />
<text  x="1170.32" y="319.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.02%)</title><rect x="112.9" y="1621" width="0.1" height="15.0" fill="rgb(237,23,10)" rx="2" ry="2" />
<text  x="115.86" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.03%)</title><rect x="831.8" y="1893" width="0.3" height="15.0" fill="rgb(215,112,14)" rx="2" ry="2" />
<text  x="834.79" y="1903.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (3 samples, 0.05%)</title><rect x="143.6" y="1589" width="0.5" height="15.0" fill="rgb(227,175,31)" rx="2" ry="2" />
<text  x="146.57" y="1599.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.02%)</title><rect x="876.1" y="1909" width="0.1" height="15.0" fill="rgb(250,1,49)" rx="2" ry="2" />
<text  x="879.07" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1749" width="0.1" height="15.0" fill="rgb(207,148,34)" rx="2" ry="2" />
<text  x="1169.96" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="533" width="0.2" height="15.0" fill="rgb(230,174,52)" rx="2" ry="2" />
<text  x="203.18" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (37 samples, 0.56%)</title><rect x="192.1" y="1813" width="6.7" height="15.0" fill="rgb(218,21,0)" rx="2" ry="2" />
<text  x="195.14" y="1823.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.03%)</title><rect x="184.6" y="1637" width="0.4" height="15.0" fill="rgb(229,105,43)" rx="2" ry="2" />
<text  x="187.64" y="1647.5" ></text>
</g>
<g >
<title>do_futex (15 samples, 0.23%)</title><rect x="43.8" y="1957" width="2.6" height="15.0" fill="rgb(219,142,37)" rx="2" ry="2" />
<text  x="46.75" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1669" width="0.5" height="15.0" fill="rgb(251,171,15)" rx="2" ry="2" />
<text  x="88.00" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1013" width="0.2" height="15.0" fill="rgb(240,45,35)" rx="2" ry="2" />
<text  x="203.54" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (30 samples, 0.45%)</title><rect x="151.8" y="1749" width="5.3" height="15.0" fill="rgb(216,81,33)" rx="2" ry="2" />
<text  x="154.79" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="309" width="0.4" height="15.0" fill="rgb(229,103,49)" rx="2" ry="2" />
<text  x="1170.50" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1621" width="0.2" height="15.0" fill="rgb(223,46,7)" rx="2" ry="2" />
<text  x="1170.32" y="1631.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="436.4" y="1829" width="0.2" height="15.0" fill="rgb(233,228,20)" rx="2" ry="2" />
<text  x="439.43" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1669" width="0.2" height="15.0" fill="rgb(247,124,29)" rx="2" ry="2" />
<text  x="136.04" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (42 samples, 0.64%)</title><rect x="157.1" y="1701" width="7.5" height="15.0" fill="rgb(214,103,38)" rx="2" ry="2" />
<text  x="160.14" y="1711.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.02%)</title><rect x="594.3" y="1781" width="0.2" height="15.0" fill="rgb(219,81,44)" rx="2" ry="2" />
<text  x="597.29" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1749" width="0.2" height="15.0" fill="rgb(211,95,39)" rx="2" ry="2" />
<text  x="136.04" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="149" width="0.1" height="15.0" fill="rgb(249,2,2)" rx="2" ry="2" />
<text  x="1169.96" y="159.5" ></text>
</g>
<g >
<title>cfree (4 samples, 0.06%)</title><rect x="145.9" y="1621" width="0.7" height="15.0" fill="rgb(250,130,14)" rx="2" ry="2" />
<text  x="148.89" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1013" width="0.4" height="15.0" fill="rgb(216,219,14)" rx="2" ry="2" />
<text  x="1170.50" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1781" width="0.5" height="15.0" fill="rgb(226,50,52)" rx="2" ry="2" />
<text  x="88.00" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (41 samples, 0.62%)</title><rect x="144.5" y="1701" width="7.3" height="15.0" fill="rgb(254,210,44)" rx="2" ry="2" />
<text  x="147.46" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1637" width="0.5" height="15.0" fill="rgb(223,145,33)" rx="2" ry="2" />
<text  x="88.00" y="1647.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="156.6" y="1653" width="0.2" height="15.0" fill="rgb(254,16,12)" rx="2" ry="2" />
<text  x="159.61" y="1663.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (1 samples, 0.02%)</title><rect x="596.2" y="2005" width="0.2" height="15.0" fill="rgb(207,70,32)" rx="2" ry="2" />
<text  x="599.25" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (180 samples, 2.72%)</title><rect x="133.2" y="1909" width="32.2" height="15.0" fill="rgb(220,89,46)" rx="2" ry="2" />
<text  x="136.21" y="1919.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1845" width="0.4" height="15.0" fill="rgb(215,120,49)" rx="2" ry="2" />
<text  x="1170.50" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (28 samples, 0.42%)</title><rect x="127.3" y="1717" width="5.0" height="15.0" fill="rgb(227,195,54)" rx="2" ry="2" />
<text  x="130.32" y="1727.5" ></text>
</g>
<g >
<title>fasttext::Loss::findKBest (1 samples, 0.02%)</title><rect x="1049.1" y="2053" width="0.2" height="15.0" fill="rgb(212,103,19)" rx="2" ry="2" />
<text  x="1052.11" y="2063.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="862.9" y="2005" width="0.1" height="15.0" fill="rgb(239,228,19)" rx="2" ry="2" />
<text  x="865.86" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="2005" width="0.4" height="15.0" fill="rgb(251,165,41)" rx="2" ry="2" />
<text  x="1170.50" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1381" width="0.2" height="15.0" fill="rgb(232,22,37)" rx="2" ry="2" />
<text  x="1170.14" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="229" width="0.2" height="15.0" fill="rgb(230,89,10)" rx="2" ry="2" />
<text  x="136.04" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (2 samples, 0.03%)</title><rect x="427.5" y="1861" width="0.4" height="15.0" fill="rgb(247,191,3)" rx="2" ry="2" />
<text  x="430.50" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1477" width="0.2" height="15.0" fill="rgb(243,209,35)" rx="2" ry="2" />
<text  x="168.54" y="1487.5" ></text>
</g>
<g >
<title>TDocument::operator= (1 samples, 0.02%)</title><rect x="598.0" y="1957" width="0.2" height="15.0" fill="rgb(218,72,10)" rx="2" ry="2" />
<text  x="601.04" y="1967.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (70 samples, 1.06%)</title><rect x="609.1" y="1893" width="12.5" height="15.0" fill="rgb(250,220,39)" rx="2" ry="2" />
<text  x="612.11" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="821" width="0.2" height="15.0" fill="rgb(216,127,29)" rx="2" ry="2" />
<text  x="203.54" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (68 samples, 1.03%)</title><rect x="105.4" y="1749" width="12.1" height="15.0" fill="rgb(231,7,12)" rx="2" ry="2" />
<text  x="108.36" y="1759.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (3 samples, 0.05%)</title><rect x="596.4" y="1957" width="0.6" height="15.0" fill="rgb(227,115,15)" rx="2" ry="2" />
<text  x="599.43" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="917" width="0.2" height="15.0" fill="rgb(230,116,1)" rx="2" ry="2" />
<text  x="1170.32" y="927.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (3 samples, 0.05%)</title><rect x="874.8" y="2037" width="0.6" height="15.0" fill="rgb(229,74,17)" rx="2" ry="2" />
<text  x="877.82" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;TNewsCluster, std::allocator&lt;TNewsCluster&gt; &gt;::_M_realloc_insert&lt;TNewsCluster const&amp;&gt; (1 samples, 0.02%)</title><rect x="598.4" y="2021" width="0.2" height="15.0" fill="rgb(236,74,50)" rx="2" ry="2" />
<text  x="601.39" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="85" width="0.1" height="15.0" fill="rgb(238,128,54)" rx="2" ry="2" />
<text  x="1169.96" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="901" width="0.2" height="15.0" fill="rgb(241,61,1)" rx="2" ry="2" />
<text  x="1170.32" y="911.5" ></text>
</g>
<g >
<title>page_fault (8 samples, 0.12%)</title><rect x="711.8" y="1861" width="1.4" height="15.0" fill="rgb(237,73,40)" rx="2" ry="2" />
<text  x="714.79" y="1871.5" ></text>
</g>
<g >
<title>__strxfrm_l (31 samples, 0.47%)</title><rect x="1161.4" y="2037" width="5.6" height="15.0" fill="rgb(208,53,49)" rx="2" ry="2" />
<text  x="1164.43" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="597.9" y="1973" width="0.1" height="15.0" fill="rgb(207,89,37)" rx="2" ry="2" />
<text  x="600.86" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (99 samples, 1.50%)</title><rect x="105.4" y="1781" width="17.6" height="15.0" fill="rgb(207,207,29)" rx="2" ry="2" />
<text  x="108.36" y="1791.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.02%)</title><rect x="40.0" y="1941" width="0.2" height="15.0" fill="rgb(212,36,33)" rx="2" ry="2" />
<text  x="43.00" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (1 samples, 0.02%)</title><rect x="173.4" y="1717" width="0.2" height="15.0" fill="rgb(249,25,51)" rx="2" ry="2" />
<text  x="176.39" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1109" width="0.5" height="15.0" fill="rgb(215,175,52)" rx="2" ry="2" />
<text  x="88.00" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (152 samples, 2.30%)</title><rect x="105.4" y="1829" width="27.1" height="15.0" fill="rgb(214,43,8)" rx="2" ry="2" />
<text  x="108.36" y="1839.5" >s..</text>
</g>
<g >
<title>schedule (1 samples, 0.02%)</title><rect x="1048.8" y="1989" width="0.1" height="15.0" fill="rgb(248,55,14)" rx="2" ry="2" />
<text  x="1051.75" y="1999.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="597.1" y="1861" width="0.2" height="15.0" fill="rgb(211,80,0)" rx="2" ry="2" />
<text  x="600.14" y="1871.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="1167.0" y="37" width="0.1" height="15.0" fill="rgb(212,89,24)" rx="2" ry="2" />
<text  x="1169.96" y="47.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="150.2" y="1605" width="0.2" height="15.0" fill="rgb(223,95,33)" rx="2" ry="2" />
<text  x="153.18" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (9 samples, 0.14%)</title><rect x="844.8" y="1909" width="1.6" height="15.0" fill="rgb(250,91,33)" rx="2" ry="2" />
<text  x="847.82" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1541" width="0.2" height="15.0" fill="rgb(249,40,45)" rx="2" ry="2" />
<text  x="203.18" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1765" width="0.2" height="15.0" fill="rgb(240,145,1)" rx="2" ry="2" />
<text  x="1170.32" y="1775.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (1 samples, 0.02%)</title><rect x="876.1" y="1893" width="0.1" height="15.0" fill="rgb(214,224,14)" rx="2" ry="2" />
<text  x="879.07" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1461" width="0.2" height="15.0" fill="rgb(253,17,44)" rx="2" ry="2" />
<text  x="1170.32" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1317" width="0.2" height="15.0" fill="rgb(240,101,32)" rx="2" ry="2" />
<text  x="1170.14" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="805" width="0.2" height="15.0" fill="rgb(213,113,26)" rx="2" ry="2" />
<text  x="1170.14" y="815.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.02%)</title><rect x="437.1" y="1845" width="0.2" height="15.0" fill="rgb(230,57,4)" rx="2" ry="2" />
<text  x="440.14" y="1855.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.06%)</title><rect x="104.5" y="1829" width="0.7" height="15.0" fill="rgb(240,121,54)" rx="2" ry="2" />
<text  x="107.46" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="837" width="0.2" height="15.0" fill="rgb(225,73,10)" rx="2" ry="2" />
<text  x="1170.32" y="847.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="104.1" y="1957" width="0.2" height="15.0" fill="rgb(251,46,29)" rx="2" ry="2" />
<text  x="107.11" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1685" width="0.4" height="15.0" fill="rgb(244,70,15)" rx="2" ry="2" />
<text  x="1170.50" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1285" width="0.2" height="15.0" fill="rgb(252,177,33)" rx="2" ry="2" />
<text  x="1170.32" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (175 samples, 2.65%)</title><rect x="167.5" y="1845" width="31.3" height="15.0" fill="rgb(227,186,4)" rx="2" ry="2" />
<text  x="170.50" y="1855.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="965" width="0.2" height="15.0" fill="rgb(237,61,15)" rx="2" ry="2" />
<text  x="203.54" y="975.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;, std::allocator&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt; &gt;,  (1 samples, 0.02%)</title><rect x="105.2" y="1957" width="0.2" height="15.0" fill="rgb(233,159,34)" rx="2" ry="2" />
<text  x="108.18" y="1967.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.02%)</title><rect x="926.4" y="1845" width="0.2" height="15.0" fill="rgb(218,169,44)" rx="2" ry="2" />
<text  x="929.43" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (50 samples, 0.76%)</title><rect x="832.1" y="1893" width="9.0" height="15.0" fill="rgb(225,73,52)" rx="2" ry="2" />
<text  x="835.14" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="165" width="0.1" height="15.0" fill="rgb(230,40,31)" rx="2" ry="2" />
<text  x="1169.96" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1125" width="0.2" height="15.0" fill="rgb(232,197,3)" rx="2" ry="2" />
<text  x="136.04" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.02%)</title><rect x="198.9" y="1813" width="0.2" height="15.0" fill="rgb(253,157,7)" rx="2" ry="2" />
<text  x="201.93" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (62 samples, 0.94%)</title><rect x="133.4" y="1733" width="11.1" height="15.0" fill="rgb(228,142,39)" rx="2" ry="2" />
<text  x="136.39" y="1743.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="431.1" y="1877" width="0.3" height="15.0" fill="rgb(247,107,21)" rx="2" ry="2" />
<text  x="434.07" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1701" width="0.1" height="15.0" fill="rgb(253,58,2)" rx="2" ry="2" />
<text  x="1169.96" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1861" width="0.2" height="15.0" fill="rgb(239,211,11)" rx="2" ry="2" />
<text  x="136.04" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1125" width="0.5" height="15.0" fill="rgb(209,44,33)" rx="2" ry="2" />
<text  x="88.00" y="1135.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1 samples, 0.02%)</title><rect x="874.6" y="2005" width="0.2" height="15.0" fill="rgb(250,82,12)" rx="2" ry="2" />
<text  x="877.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="185.4" y="1653" width="0.1" height="15.0" fill="rgb(249,177,54)" rx="2" ry="2" />
<text  x="188.36" y="1663.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1 samples, 0.02%)</title><rect x="452.0" y="1813" width="0.1" height="15.0" fill="rgb(228,185,21)" rx="2" ry="2" />
<text  x="454.96" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1573" width="0.2" height="15.0" fill="rgb(221,114,25)" rx="2" ry="2" />
<text  x="1170.14" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="84.8" y="2021" width="0.2" height="15.0" fill="rgb(252,172,53)" rx="2" ry="2" />
<text  x="87.82" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1173" width="0.1" height="15.0" fill="rgb(245,221,9)" rx="2" ry="2" />
<text  x="1169.96" y="1183.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (2 samples, 0.03%)</title><rect x="88.2" y="2021" width="0.4" height="15.0" fill="rgb(232,205,18)" rx="2" ry="2" />
<text  x="91.21" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (35 samples, 0.53%)</title><rect x="185.9" y="1701" width="6.2" height="15.0" fill="rgb(253,152,14)" rx="2" ry="2" />
<text  x="188.89" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (1 samples, 0.02%)</title><rect x="127.1" y="1797" width="0.2" height="15.0" fill="rgb(251,167,7)" rx="2" ry="2" />
<text  x="130.14" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1733" width="0.2" height="15.0" fill="rgb(241,124,20)" rx="2" ry="2" />
<text  x="136.04" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1797" width="0.2" height="15.0" fill="rgb(251,164,43)" rx="2" ry="2" />
<text  x="1170.32" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="597.3" y="1797" width="0.2" height="15.0" fill="rgb(207,144,17)" rx="2" ry="2" />
<text  x="600.32" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1829" width="0.2" height="15.0" fill="rgb(250,224,23)" rx="2" ry="2" />
<text  x="600.32" y="1839.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (58 samples, 0.88%)</title><rect x="201.2" y="1989" width="10.4" height="15.0" fill="rgb(241,67,45)" rx="2" ry="2" />
<text  x="204.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1061" width="0.2" height="15.0" fill="rgb(208,227,35)" rx="2" ry="2" />
<text  x="203.54" y="1071.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (314 samples, 4.75%)</title><rect x="759.5" y="1893" width="56.0" height="15.0" fill="rgb(253,29,46)" rx="2" ry="2" />
<text  x="762.46" y="1903.5" >onmt:..</text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.08%)</title><rect x="188.8" y="1653" width="0.8" height="15.0" fill="rgb(245,172,8)" rx="2" ry="2" />
<text  x="191.75" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1477" width="0.2" height="15.0" fill="rgb(232,23,1)" rx="2" ry="2" />
<text  x="1170.32" y="1487.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="131.8" y="1701" width="0.2" height="15.0" fill="rgb(227,125,52)" rx="2" ry="2" />
<text  x="134.79" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="101" width="0.3" height="15.0" fill="rgb(248,77,9)" rx="2" ry="2" />
<text  x="88.18" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="837" width="0.4" height="15.0" fill="rgb(214,206,43)" rx="2" ry="2" />
<text  x="1170.50" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="565" width="0.4" height="15.0" fill="rgb(211,159,6)" rx="2" ry="2" />
<text  x="1170.50" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="933" width="0.2" height="15.0" fill="rgb(245,198,12)" rx="2" ry="2" />
<text  x="136.04" y="943.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="179.3" y="1621" width="0.2" height="15.0" fill="rgb(239,201,46)" rx="2" ry="2" />
<text  x="182.29" y="1631.5" ></text>
</g>
<g >
<title>do_page_fault (8 samples, 0.12%)</title><rect x="711.8" y="1845" width="1.4" height="15.0" fill="rgb(229,36,54)" rx="2" ry="2" />
<text  x="714.79" y="1855.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="595.9" y="1797" width="0.2" height="15.0" fill="rgb(241,90,28)" rx="2" ry="2" />
<text  x="598.89" y="1807.5" ></text>
</g>
<g >
<title>do_page_fault (46 samples, 0.70%)</title><rect x="429.1" y="1941" width="8.2" height="15.0" fill="rgb(208,175,25)" rx="2" ry="2" />
<text  x="432.11" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="117.5" y="1749" width="0.2" height="15.0" fill="rgb(221,42,12)" rx="2" ry="2" />
<text  x="120.50" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.09%)</title><rect x="115.0" y="1605" width="1.1" height="15.0" fill="rgb(215,105,30)" rx="2" ry="2" />
<text  x="118.00" y="1615.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="1042.5" y="2005" width="0.2" height="15.0" fill="rgb(206,229,8)" rx="2" ry="2" />
<text  x="1045.50" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (35 samples, 0.53%)</title><rect x="192.3" y="1717" width="6.3" height="15.0" fill="rgb(244,46,33)" rx="2" ry="2" />
<text  x="195.32" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="821" width="0.2" height="15.0" fill="rgb(236,124,1)" rx="2" ry="2" />
<text  x="136.04" y="831.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="343.9" y="1925" width="0.2" height="15.0" fill="rgb(251,37,13)" rx="2" ry="2" />
<text  x="346.93" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (24 samples, 0.36%)</title><rect x="140.2" y="1621" width="4.3" height="15.0" fill="rgb(222,79,36)" rx="2" ry="2" />
<text  x="143.18" y="1631.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.02%)</title><rect x="427.3" y="1829" width="0.2" height="15.0" fill="rgb(250,98,17)" rx="2" ry="2" />
<text  x="430.32" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="709" width="0.2" height="15.0" fill="rgb(212,4,2)" rx="2" ry="2" />
<text  x="1170.32" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="53" width="0.2" height="15.0" fill="rgb(224,0,26)" rx="2" ry="2" />
<text  x="1170.32" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1509" width="0.4" height="15.0" fill="rgb(248,199,24)" rx="2" ry="2" />
<text  x="1170.50" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="389" width="0.4" height="15.0" fill="rgb(230,209,49)" rx="2" ry="2" />
<text  x="1170.50" y="399.5" ></text>
</g>
<g >
<title>__dynamic_cast (7 samples, 0.11%)</title><rect x="133.9" y="1573" width="1.3" height="15.0" fill="rgb(253,30,17)" rx="2" ry="2" />
<text  x="136.93" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="180.4" y="1701" width="5.3" height="15.0" fill="rgb(254,88,1)" rx="2" ry="2" />
<text  x="183.36" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="213" width="0.2" height="15.0" fill="rgb(241,84,43)" rx="2" ry="2" />
<text  x="136.04" y="223.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_0&gt; &gt; (1 samples, 0.02%)</title><rect x="598.2" y="1973" width="0.2" height="15.0" fill="rgb(237,81,54)" rx="2" ry="2" />
<text  x="601.21" y="1983.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="753.2" y="1861" width="0.2" height="15.0" fill="rgb(215,56,49)" rx="2" ry="2" />
<text  x="756.21" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1221" width="0.2" height="15.0" fill="rgb(212,180,12)" rx="2" ry="2" />
<text  x="168.54" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="981" width="0.2" height="15.0" fill="rgb(228,33,44)" rx="2" ry="2" />
<text  x="203.18" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1397" width="0.4" height="15.0" fill="rgb(226,64,46)" rx="2" ry="2" />
<text  x="1170.50" y="1407.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (2 samples, 0.03%)</title><rect x="91.8" y="1941" width="0.3" height="15.0" fill="rgb(236,52,44)" rx="2" ry="2" />
<text  x="94.79" y="1951.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="138.8" y="1557" width="0.3" height="15.0" fill="rgb(212,60,32)" rx="2" ry="2" />
<text  x="141.75" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (2 samples, 0.03%)</title><rect x="165.4" y="1941" width="0.3" height="15.0" fill="rgb(206,54,13)" rx="2" ry="2" />
<text  x="168.36" y="1951.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="343.9" y="1989" width="0.2" height="15.0" fill="rgb(252,96,53)" rx="2" ry="2" />
<text  x="346.93" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.09%)</title><rect x="189.6" y="1653" width="1.1" height="15.0" fill="rgb(205,25,34)" rx="2" ry="2" />
<text  x="192.64" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="133" width="0.1" height="15.0" fill="rgb(229,211,7)" rx="2" ry="2" />
<text  x="1169.96" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (179 samples, 2.71%)</title><rect x="167.5" y="1925" width="32.0" height="15.0" fill="rgb(206,108,0)" rx="2" ry="2" />
<text  x="170.50" y="1935.5" >st..</text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.03%)</title><rect x="745.0" y="1845" width="0.4" height="15.0" fill="rgb(254,197,5)" rx="2" ry="2" />
<text  x="748.00" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1061" width="0.2" height="15.0" fill="rgb(208,31,53)" rx="2" ry="2" />
<text  x="1170.14" y="1071.5" ></text>
</g>
<g >
<title>__pthread_once_slow (1,408 samples, 21.31%)</title><rect x="598.6" y="2037" width="251.4" height="15.0" fill="rgb(219,144,39)" rx="2" ry="2" />
<text  x="601.57" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>TDocument::TDocument (1 samples, 0.02%)</title><rect x="90.9" y="1989" width="0.2" height="15.0" fill="rgb(231,26,13)" rx="2" ry="2" />
<text  x="93.89" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1573" width="0.1" height="15.0" fill="rgb(210,126,21)" rx="2" ry="2" />
<text  x="1169.96" y="1583.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.02%)</title><rect x="1048.8" y="1957" width="0.1" height="15.0" fill="rgb(215,103,39)" rx="2" ry="2" />
<text  x="1051.75" y="1967.5" ></text>
</g>
<g >
<title>__do_page_fault (11 samples, 0.17%)</title><rect x="38.2" y="2005" width="2.0" height="15.0" fill="rgb(241,156,34)" rx="2" ry="2" />
<text  x="41.21" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1349" width="0.2" height="15.0" fill="rgb(233,81,42)" rx="2" ry="2" />
<text  x="168.54" y="1359.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (3 samples, 0.05%)</title><rect x="183.6" y="1621" width="0.5" height="15.0" fill="rgb(236,177,54)" rx="2" ry="2" />
<text  x="186.57" y="1631.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.05%)</title><rect x="124.1" y="1669" width="0.5" height="15.0" fill="rgb(223,3,51)" rx="2" ry="2" />
<text  x="127.11" y="1679.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.02%)</title><rect x="597.1" y="1941" width="0.2" height="15.0" fill="rgb(245,66,33)" rx="2" ry="2" />
<text  x="600.14" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::~collate (24 samples, 0.36%)</title><rect x="869.5" y="2037" width="4.3" height="15.0" fill="rgb(230,127,17)" rx="2" ry="2" />
<text  x="872.46" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1445" width="0.2" height="15.0" fill="rgb(215,146,53)" rx="2" ry="2" />
<text  x="1170.14" y="1455.5" ></text>
</g>
<g >
<title>operator new[] (3 samples, 0.05%)</title><rect x="1121.2" y="2053" width="0.6" height="15.0" fill="rgb(220,196,25)" rx="2" ry="2" />
<text  x="1124.25" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.06%)</title><rect x="873.8" y="2021" width="0.7" height="15.0" fill="rgb(245,116,26)" rx="2" ry="2" />
<text  x="876.75" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="869" width="0.2" height="15.0" fill="rgb(235,39,20)" rx="2" ry="2" />
<text  x="1170.32" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1045" width="0.2" height="15.0" fill="rgb(245,150,17)" rx="2" ry="2" />
<text  x="136.04" y="1055.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (1 samples, 0.02%)</title><rect x="603.2" y="1909" width="0.2" height="15.0" fill="rgb(226,53,25)" rx="2" ry="2" />
<text  x="606.21" y="1919.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="185.2" y="1637" width="0.2" height="15.0" fill="rgb(205,61,22)" rx="2" ry="2" />
<text  x="188.18" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="917" width="0.2" height="15.0" fill="rgb(249,124,44)" rx="2" ry="2" />
<text  x="203.18" y="927.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.02%)</title><rect x="84.1" y="1909" width="0.2" height="15.0" fill="rgb(245,36,9)" rx="2" ry="2" />
<text  x="87.11" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (179 samples, 2.71%)</title><rect x="133.2" y="1845" width="32.0" height="15.0" fill="rgb(229,174,15)" rx="2" ry="2" />
<text  x="136.21" y="1855.5" >st..</text>
</g>
<g >
<title>__libc_read (3 samples, 0.05%)</title><rect x="899.6" y="2053" width="0.6" height="15.0" fill="rgb(230,129,2)" rx="2" ry="2" />
<text  x="902.64" y="2063.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.02%)</title><rect x="111.1" y="1653" width="0.1" height="15.0" fill="rgb(236,132,23)" rx="2" ry="2" />
<text  x="114.07" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="789" width="0.2" height="15.0" fill="rgb(240,149,27)" rx="2" ry="2" />
<text  x="1170.14" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (36 samples, 0.54%)</title><rect x="192.3" y="1733" width="6.5" height="15.0" fill="rgb(246,25,37)" rx="2" ry="2" />
<text  x="195.32" y="1743.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (7 samples, 0.11%)</title><rect x="713.8" y="1877" width="1.2" height="15.0" fill="rgb(233,198,51)" rx="2" ry="2" />
<text  x="716.75" y="1887.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="107.5" y="1589" width="0.2" height="15.0" fill="rgb(225,103,42)" rx="2" ry="2" />
<text  x="110.50" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="741" width="0.2" height="15.0" fill="rgb(205,96,53)" rx="2" ry="2" />
<text  x="1170.14" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="613" width="0.1" height="15.0" fill="rgb(218,110,41)" rx="2" ry="2" />
<text  x="1169.96" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="997" width="0.1" height="15.0" fill="rgb(218,178,6)" rx="2" ry="2" />
<text  x="1169.96" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="501" width="0.2" height="15.0" fill="rgb(226,147,48)" rx="2" ry="2" />
<text  x="1170.32" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="485" width="0.2" height="15.0" fill="rgb(213,79,19)" rx="2" ry="2" />
<text  x="203.18" y="495.5" ></text>
</g>
<g >
<title>clear_page_erms (11 samples, 0.17%)</title><rect x="425.4" y="1829" width="1.9" height="15.0" fill="rgb(229,164,40)" rx="2" ry="2" />
<text  x="428.36" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (36 samples, 0.54%)</title><rect x="173.6" y="1701" width="6.4" height="15.0" fill="rgb(254,117,32)" rx="2" ry="2" />
<text  x="176.57" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1909" width="0.1" height="15.0" fill="rgb(248,28,14)" rx="2" ry="2" />
<text  x="1169.96" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1749" width="0.2" height="15.0" fill="rgb(254,159,28)" rx="2" ry="2" />
<text  x="1170.32" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (41 samples, 0.62%)</title><rect x="144.5" y="1685" width="7.3" height="15.0" fill="rgb(206,151,41)" rx="2" ry="2" />
<text  x="147.46" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (28 samples, 0.42%)</title><rect x="127.3" y="1749" width="5.0" height="15.0" fill="rgb(245,118,12)" rx="2" ry="2" />
<text  x="130.32" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1381" width="0.1" height="15.0" fill="rgb(220,116,48)" rx="2" ry="2" />
<text  x="1169.96" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1141" width="0.2" height="15.0" fill="rgb(210,56,23)" rx="2" ry="2" />
<text  x="203.54" y="1151.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (7 samples, 0.11%)</title><rect x="841.1" y="1893" width="1.2" height="15.0" fill="rgb(211,216,27)" rx="2" ry="2" />
<text  x="844.07" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1829" width="0.2" height="15.0" fill="rgb(206,92,12)" rx="2" ry="2" />
<text  x="1170.14" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="325" width="0.2" height="15.0" fill="rgb(243,162,46)" rx="2" ry="2" />
<text  x="1170.14" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1285" width="0.1" height="15.0" fill="rgb(217,22,2)" rx="2" ry="2" />
<text  x="1169.96" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1717" width="0.1" height="15.0" fill="rgb(241,1,3)" rx="2" ry="2" />
<text  x="1169.96" y="1727.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="122.3" y="1621" width="0.2" height="15.0" fill="rgb(209,170,39)" rx="2" ry="2" />
<text  x="125.32" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (2 samples, 0.03%)</title><rect x="114.6" y="1605" width="0.4" height="15.0" fill="rgb(225,103,44)" rx="2" ry="2" />
<text  x="117.64" y="1615.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="843.2" y="1893" width="0.2" height="15.0" fill="rgb(232,182,36)" rx="2" ry="2" />
<text  x="846.21" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="164.8" y="1829" width="0.2" height="15.0" fill="rgb(224,156,12)" rx="2" ry="2" />
<text  x="167.82" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="613" width="0.4" height="15.0" fill="rgb(208,98,47)" rx="2" ry="2" />
<text  x="1170.50" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.02%)</title><rect x="178.2" y="1605" width="0.2" height="15.0" fill="rgb(223,154,36)" rx="2" ry="2" />
<text  x="181.21" y="1615.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (249 samples, 3.77%)</title><rect x="1049.3" y="2053" width="44.5" height="15.0" fill="rgb(240,132,31)" rx="2" ry="2" />
<text  x="1052.29" y="2063.5" >fast..</text>
</g>
<g >
<title>TDocument::TDocument (2 samples, 0.03%)</title><rect x="848.4" y="1973" width="0.4" height="15.0" fill="rgb(242,152,12)" rx="2" ry="2" />
<text  x="851.39" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.03%)</title><rect x="126.2" y="1653" width="0.4" height="15.0" fill="rgb(209,124,7)" rx="2" ry="2" />
<text  x="129.25" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="597" width="0.3" height="15.0" fill="rgb(214,99,32)" rx="2" ry="2" />
<text  x="88.18" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="549" width="0.4" height="15.0" fill="rgb(239,211,13)" rx="2" ry="2" />
<text  x="1170.50" y="559.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="190.9" y="1653" width="0.3" height="15.0" fill="rgb(237,93,36)" rx="2" ry="2" />
<text  x="193.89" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1813" width="0.1" height="15.0" fill="rgb(254,162,11)" rx="2" ry="2" />
<text  x="1169.96" y="1823.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Bind&lt;Annotate (1,406 samples, 21.28%)</title><rect x="598.9" y="1989" width="251.1" height="15.0" fill="rgb(242,41,15)" rx="2" ry="2" />
<text  x="601.93" y="1999.5" >std::__invoke&lt;std::_Bind&lt;Annotate</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="245" width="0.1" height="15.0" fill="rgb(244,228,28)" rx="2" ry="2" />
<text  x="1169.96" y="255.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="176.4" y="1621" width="0.2" height="15.0" fill="rgb(233,200,34)" rx="2" ry="2" />
<text  x="179.43" y="1631.5" ></text>
</g>
<g >
<title>__dynamic_cast (7 samples, 0.11%)</title><rect x="186.4" y="1669" width="1.3" height="15.0" fill="rgb(250,37,16)" rx="2" ry="2" />
<text  x="189.43" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="805" width="0.2" height="15.0" fill="rgb(229,112,4)" rx="2" ry="2" />
<text  x="136.04" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (138 samples, 2.09%)</title><rect x="167.5" y="1813" width="24.6" height="15.0" fill="rgb(219,174,18)" rx="2" ry="2" />
<text  x="170.50" y="1823.5" >s..</text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.06%)</title><rect x="39.1" y="1925" width="0.7" height="15.0" fill="rgb(235,220,37)" rx="2" ry="2" />
<text  x="42.11" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (69 samples, 1.04%)</title><rect x="105.4" y="1765" width="12.3" height="15.0" fill="rgb(216,20,28)" rx="2" ry="2" />
<text  x="108.36" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.47%)</title><rect x="862.3" y="2021" width="5.6" height="15.0" fill="rgb(220,78,18)" rx="2" ry="2" />
<text  x="865.32" y="2031.5" ></text>
</g>
<g >
<title>__handle_mm_fault (25 samples, 0.38%)</title><rect x="424.6" y="1877" width="4.5" height="15.0" fill="rgb(207,37,0)" rx="2" ry="2" />
<text  x="427.64" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1061" width="0.1" height="15.0" fill="rgb(216,213,18)" rx="2" ry="2" />
<text  x="1169.96" y="1071.5" ></text>
</g>
<g >
<title>__dynamic_cast (59 samples, 0.89%)</title><rect x="889.1" y="2053" width="10.5" height="15.0" fill="rgb(232,103,48)" rx="2" ry="2" />
<text  x="892.11" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1029" width="0.5" height="15.0" fill="rgb(220,20,44)" rx="2" ry="2" />
<text  x="88.00" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="213" width="0.3" height="15.0" fill="rgb(210,58,24)" rx="2" ry="2" />
<text  x="88.18" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="581" width="0.4" height="15.0" fill="rgb(244,171,35)" rx="2" ry="2" />
<text  x="1170.50" y="591.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.06%)</title><rect x="140.5" y="1605" width="0.7" height="15.0" fill="rgb(219,148,42)" rx="2" ry="2" />
<text  x="143.54" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1461" width="0.5" height="15.0" fill="rgb(227,215,16)" rx="2" ry="2" />
<text  x="88.00" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="245" width="0.2" height="15.0" fill="rgb(243,105,24)" rx="2" ry="2" />
<text  x="136.04" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1845" width="0.1" height="15.0" fill="rgb(227,193,21)" rx="2" ry="2" />
<text  x="1169.96" y="1855.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (1 samples, 0.02%)</title><rect x="180.2" y="1701" width="0.2" height="15.0" fill="rgb(222,150,18)" rx="2" ry="2" />
<text  x="183.18" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1269" width="0.1" height="15.0" fill="rgb(230,66,14)" rx="2" ry="2" />
<text  x="1169.96" y="1279.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="753.2" y="1845" width="0.2" height="15.0" fill="rgb(254,48,12)" rx="2" ry="2" />
<text  x="756.21" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="901" width="0.2" height="15.0" fill="rgb(242,13,11)" rx="2" ry="2" />
<text  x="1170.14" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1813" width="0.2" height="15.0" fill="rgb(220,183,15)" rx="2" ry="2" />
<text  x="1170.14" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1749" width="0.2" height="15.0" fill="rgb(212,20,20)" rx="2" ry="2" />
<text  x="1170.14" y="1759.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.02%)</title><rect x="128.6" y="1701" width="0.2" height="15.0" fill="rgb(250,128,32)" rx="2" ry="2" />
<text  x="131.57" y="1711.5" ></text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache (4 samples, 0.06%)</title><rect x="873.8" y="2037" width="0.7" height="15.0" fill="rgb(207,40,6)" rx="2" ry="2" />
<text  x="876.75" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="725" width="0.1" height="15.0" fill="rgb(215,189,51)" rx="2" ry="2" />
<text  x="1169.96" y="735.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.02%)</title><rect x="452.0" y="1877" width="0.1" height="15.0" fill="rgb(236,135,45)" rx="2" ry="2" />
<text  x="454.96" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1493" width="0.2" height="15.0" fill="rgb(233,171,41)" rx="2" ry="2" />
<text  x="203.18" y="1503.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.12%)</title><rect x="105.5" y="1589" width="1.5" height="15.0" fill="rgb(231,121,37)" rx="2" ry="2" />
<text  x="108.54" y="1599.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (11 samples, 0.17%)</title><rect x="328.0" y="1989" width="2.0" height="15.0" fill="rgb(238,11,45)" rx="2" ry="2" />
<text  x="331.04" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="132.5" y="1861" width="0.4" height="15.0" fill="rgb(214,191,8)" rx="2" ry="2" />
<text  x="135.50" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1877" width="0.3" height="15.0" fill="rgb(220,6,49)" rx="2" ry="2" />
<text  x="168.36" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="180.2" y="1749" width="0.2" height="15.0" fill="rgb(243,13,46)" rx="2" ry="2" />
<text  x="183.18" y="1759.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 0.06%)</title><rect x="104.5" y="1909" width="0.7" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="107.46" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1333" width="0.1" height="15.0" fill="rgb(244,182,31)" rx="2" ry="2" />
<text  x="1169.96" y="1343.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (1 samples, 0.02%)</title><rect x="323.9" y="1989" width="0.2" height="15.0" fill="rgb(231,215,29)" rx="2" ry="2" />
<text  x="326.93" y="1999.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7 samples, 0.11%)</title><rect x="712.0" y="1797" width="1.2" height="15.0" fill="rgb(244,28,1)" rx="2" ry="2" />
<text  x="714.96" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (154 samples, 2.33%)</title><rect x="105.4" y="1925" width="27.5" height="15.0" fill="rgb(244,173,24)" rx="2" ry="2" />
<text  x="108.36" y="1935.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="277" width="0.2" height="15.0" fill="rgb(243,194,22)" rx="2" ry="2" />
<text  x="1170.32" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="132.5" y="1813" width="0.2" height="15.0" fill="rgb(205,93,16)" rx="2" ry="2" />
<text  x="135.50" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1685" width="0.2" height="15.0" fill="rgb(248,77,27)" rx="2" ry="2" />
<text  x="136.04" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1301" width="0.2" height="15.0" fill="rgb(206,10,9)" rx="2" ry="2" />
<text  x="1170.32" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1173" width="0.2" height="15.0" fill="rgb(236,105,37)" rx="2" ry="2" />
<text  x="203.18" y="1183.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (5 samples, 0.08%)</title><rect x="150.7" y="1605" width="0.9" height="15.0" fill="rgb(248,44,4)" rx="2" ry="2" />
<text  x="153.71" y="1615.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (1 samples, 0.02%)</title><rect x="596.4" y="1893" width="0.2" height="15.0" fill="rgb(241,102,24)" rx="2" ry="2" />
<text  x="599.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="373" width="0.2" height="15.0" fill="rgb(227,48,13)" rx="2" ry="2" />
<text  x="1170.32" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="949" width="0.2" height="15.0" fill="rgb(238,113,23)" rx="2" ry="2" />
<text  x="203.18" y="959.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="184.1" y="1621" width="0.2" height="15.0" fill="rgb(219,211,39)" rx="2" ry="2" />
<text  x="187.11" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1109" width="0.1" height="15.0" fill="rgb(224,41,24)" rx="2" ry="2" />
<text  x="1169.96" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="501" width="0.2" height="15.0" fill="rgb(231,82,3)" rx="2" ry="2" />
<text  x="203.18" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (35 samples, 0.53%)</title><rect x="422.9" y="1909" width="6.2" height="15.0" fill="rgb(212,83,14)" rx="2" ry="2" />
<text  x="425.86" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="875.9" y="2005" width="0.2" height="15.0" fill="rgb(218,191,38)" rx="2" ry="2" />
<text  x="878.89" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="965" width="0.2" height="15.0" fill="rgb(237,67,24)" rx="2" ry="2" />
<text  x="1170.14" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="661" width="0.2" height="15.0" fill="rgb(219,131,18)" rx="2" ry="2" />
<text  x="136.04" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1669" width="0.2" height="15.0" fill="rgb(247,32,4)" rx="2" ry="2" />
<text  x="203.18" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (23 samples, 0.35%)</title><rect x="123.0" y="1749" width="4.1" height="15.0" fill="rgb(205,228,22)" rx="2" ry="2" />
<text  x="126.04" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="949" width="0.1" height="15.0" fill="rgb(207,123,47)" rx="2" ry="2" />
<text  x="1169.96" y="959.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (66 samples, 1.00%)</title><rect x="92.1" y="1941" width="11.8" height="15.0" fill="rgb(243,82,52)" rx="2" ry="2" />
<text  x="95.14" y="1951.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.03%)</title><rect x="745.0" y="1797" width="0.4" height="15.0" fill="rgb(240,85,42)" rx="2" ry="2" />
<text  x="748.00" y="1807.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (165 samples, 2.50%)</title><rect x="961.8" y="2053" width="29.4" height="15.0" fill="rgb(227,65,26)" rx="2" ry="2" />
<text  x="964.79" y="2063.5" >fa..</text>
</g>
<g >
<title>std::locale::locale (3 samples, 0.05%)</title><rect x="42.7" y="2021" width="0.5" height="15.0" fill="rgb(220,200,6)" rx="2" ry="2" />
<text  x="45.68" y="2031.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (2 samples, 0.03%)</title><rect x="132.0" y="1701" width="0.3" height="15.0" fill="rgb(230,148,8)" rx="2" ry="2" />
<text  x="134.96" y="1711.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.02%)</title><rect x="452.0" y="1845" width="0.1" height="15.0" fill="rgb(218,229,12)" rx="2" ry="2" />
<text  x="454.96" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1957" width="0.1" height="15.0" fill="rgb(219,102,15)" rx="2" ry="2" />
<text  x="1169.96" y="1967.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.02%)</title><rect x="452.0" y="1909" width="0.1" height="15.0" fill="rgb(235,217,46)" rx="2" ry="2" />
<text  x="454.96" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1221" width="0.5" height="15.0" fill="rgb(235,98,40)" rx="2" ry="2" />
<text  x="88.00" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.14%)</title><rect x="869.5" y="2005" width="1.6" height="15.0" fill="rgb(247,18,22)" rx="2" ry="2" />
<text  x="872.46" y="2015.5" ></text>
</g>
<g >
<title>strcmp@plt (7 samples, 0.11%)</title><rect x="1187.9" y="2037" width="1.2" height="15.0" fill="rgb(210,111,28)" rx="2" ry="2" />
<text  x="1190.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="453" width="0.2" height="15.0" fill="rgb(250,10,51)" rx="2" ry="2" />
<text  x="203.18" y="463.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="501" width="0.3" height="15.0" fill="rgb(253,110,8)" rx="2" ry="2" />
<text  x="88.18" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="773" width="0.2" height="15.0" fill="rgb(218,219,17)" rx="2" ry="2" />
<text  x="136.04" y="783.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;boost::optional&lt;TDocument&gt; &gt;::_M_get_result (1 samples, 0.02%)</title><rect x="104.3" y="1973" width="0.2" height="15.0" fill="rgb(249,101,24)" rx="2" ry="2" />
<text  x="107.29" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1253" width="0.1" height="15.0" fill="rgb(210,83,51)" rx="2" ry="2" />
<text  x="1169.96" y="1263.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.03%)</title><rect x="427.5" y="1813" width="0.4" height="15.0" fill="rgb(245,66,28)" rx="2" ry="2" />
<text  x="430.50" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="533" width="0.2" height="15.0" fill="rgb(253,33,4)" rx="2" ry="2" />
<text  x="136.04" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (1 samples, 0.02%)</title><rect x="180.0" y="1733" width="0.2" height="15.0" fill="rgb(248,31,0)" rx="2" ry="2" />
<text  x="183.00" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="693" width="0.3" height="15.0" fill="rgb(217,105,16)" rx="2" ry="2" />
<text  x="88.18" y="703.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, 0, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, false, 0&gt;::run (2 samples, 0.03%)</title><rect x="10.4" y="2053" width="0.3" height="15.0" fill="rgb(251,222,14)" rx="2" ry="2" />
<text  x="13.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="293" width="0.2" height="15.0" fill="rgb(206,162,54)" rx="2" ry="2" />
<text  x="1170.32" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (1,407 samples, 21.29%)</title><rect x="598.8" y="2021" width="251.2" height="15.0" fill="rgb(208,41,0)" rx="2" ry="2" />
<text  x="601.75" y="2031.5" >std::__future_base::_State_baseV2..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.03%)</title><rect x="132.5" y="1829" width="0.4" height="15.0" fill="rgb(223,150,27)" rx="2" ry="2" />
<text  x="135.50" y="1839.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (1 samples, 0.02%)</title><rect x="211.6" y="1989" width="0.2" height="15.0" fill="rgb(228,129,53)" rx="2" ry="2" />
<text  x="214.61" y="1999.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="110.5" y="1589" width="0.4" height="15.0" fill="rgb(226,156,10)" rx="2" ry="2" />
<text  x="113.54" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (36 samples, 0.54%)</title><rect x="111.1" y="1701" width="6.4" height="15.0" fill="rgb(244,203,37)" rx="2" ry="2" />
<text  x="114.07" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="405" width="0.2" height="15.0" fill="rgb(242,80,6)" rx="2" ry="2" />
<text  x="1170.14" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="629" width="0.2" height="15.0" fill="rgb(247,36,20)" rx="2" ry="2" />
<text  x="203.18" y="639.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="789" width="0.3" height="15.0" fill="rgb(217,225,27)" rx="2" ry="2" />
<text  x="88.18" y="799.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.02%)</title><rect x="597.1" y="1893" width="0.2" height="15.0" fill="rgb(252,185,53)" rx="2" ry="2" />
<text  x="600.14" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (2 samples, 0.03%)</title><rect x="132.5" y="1877" width="0.4" height="15.0" fill="rgb(230,115,28)" rx="2" ry="2" />
<text  x="135.50" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="789" width="0.2" height="15.0" fill="rgb(212,18,19)" rx="2" ry="2" />
<text  x="203.18" y="799.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="170.9" y="1573" width="0.2" height="15.0" fill="rgb(243,222,14)" rx="2" ry="2" />
<text  x="173.89" y="1583.5" ></text>
</g>
<g >
<title>__do_page_fault (5 samples, 0.08%)</title><rect x="852.1" y="1989" width="0.9" height="15.0" fill="rgb(254,160,1)" rx="2" ry="2" />
<text  x="855.14" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="69" width="0.1" height="15.0" fill="rgb(245,28,10)" rx="2" ry="2" />
<text  x="1169.96" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1605" width="0.2" height="15.0" fill="rgb(237,5,18)" rx="2" ry="2" />
<text  x="136.04" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1077" width="0.2" height="15.0" fill="rgb(209,11,45)" rx="2" ry="2" />
<text  x="203.18" y="1087.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.08%)</title><rect x="39.1" y="1941" width="0.9" height="15.0" fill="rgb(245,190,18)" rx="2" ry="2" />
<text  x="42.11" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1877" width="0.4" height="15.0" fill="rgb(239,83,22)" rx="2" ry="2" />
<text  x="1170.50" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="629" width="0.2" height="15.0" fill="rgb(232,3,7)" rx="2" ry="2" />
<text  x="136.04" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1397" width="0.2" height="15.0" fill="rgb(223,154,11)" rx="2" ry="2" />
<text  x="168.54" y="1407.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 0.06%)</title><rect x="104.5" y="1925" width="0.7" height="15.0" fill="rgb(252,84,29)" rx="2" ry="2" />
<text  x="107.46" y="1935.5" ></text>
</g>
<g >
<title>generic_file_read_iter (4 samples, 0.06%)</title><rect x="89.8" y="1893" width="0.7" height="15.0" fill="rgb(249,171,13)" rx="2" ry="2" />
<text  x="92.82" y="1903.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="591.4" y="1973" width="0.2" height="15.0" fill="rgb(231,123,16)" rx="2" ry="2" />
<text  x="594.43" y="1983.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="172.7" y="1589" width="0.2" height="15.0" fill="rgb(213,147,10)" rx="2" ry="2" />
<text  x="175.68" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="357" width="0.2" height="15.0" fill="rgb(213,79,32)" rx="2" ry="2" />
<text  x="1170.14" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="185.7" y="1685" width="0.2" height="15.0" fill="rgb(236,56,5)" rx="2" ry="2" />
<text  x="188.71" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1621" width="0.1" height="15.0" fill="rgb(250,197,12)" rx="2" ry="2" />
<text  x="1169.96" y="1631.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long&gt; (2 samples, 0.03%)</title><rect x="874.1" y="2005" width="0.4" height="15.0" fill="rgb(243,21,7)" rx="2" ry="2" />
<text  x="877.11" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1109" width="0.2" height="15.0" fill="rgb(240,81,15)" rx="2" ry="2" />
<text  x="203.18" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1029" width="0.2" height="15.0" fill="rgb(218,63,10)" rx="2" ry="2" />
<text  x="1170.32" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1509" width="0.2" height="15.0" fill="rgb(235,163,25)" rx="2" ry="2" />
<text  x="203.54" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="2037" width="0.4" height="15.0" fill="rgb(254,35,5)" rx="2" ry="2" />
<text  x="1170.50" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="277" width="0.3" height="15.0" fill="rgb(206,42,48)" rx="2" ry="2" />
<text  x="88.18" y="287.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1 samples, 0.02%)</title><rect x="437.0" y="1877" width="0.1" height="15.0" fill="rgb(251,187,38)" rx="2" ry="2" />
<text  x="439.96" y="1887.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (15 samples, 0.23%)</title><rect x="871.1" y="2005" width="2.7" height="15.0" fill="rgb(251,72,17)" rx="2" ry="2" />
<text  x="874.07" y="2015.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="104.5" y="1957" width="0.7" height="15.0" fill="rgb(234,89,54)" rx="2" ry="2" />
<text  x="107.46" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="773" width="0.2" height="15.0" fill="rgb(212,44,16)" rx="2" ry="2" />
<text  x="203.18" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1349" width="0.2" height="15.0" fill="rgb(241,148,25)" rx="2" ry="2" />
<text  x="136.04" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="949" width="0.4" height="15.0" fill="rgb(218,3,26)" rx="2" ry="2" />
<text  x="1170.50" y="959.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (18 samples, 0.27%)</title><rect x="211.8" y="1989" width="3.2" height="15.0" fill="rgb(218,105,43)" rx="2" ry="2" />
<text  x="214.79" y="1999.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.02%)</title><rect x="84.6" y="1909" width="0.2" height="15.0" fill="rgb(231,64,42)" rx="2" ry="2" />
<text  x="87.64" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="485" width="0.3" height="15.0" fill="rgb(233,98,14)" rx="2" ry="2" />
<text  x="88.18" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="84.8" y="2005" width="0.2" height="15.0" fill="rgb(237,160,15)" rx="2" ry="2" />
<text  x="87.82" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="773" width="0.2" height="15.0" fill="rgb(233,75,34)" rx="2" ry="2" />
<text  x="1170.14" y="783.5" ></text>
</g>
<g >
<title>TDocument::operator= (1 samples, 0.02%)</title><rect x="598.2" y="1957" width="0.2" height="15.0" fill="rgb(253,16,1)" rx="2" ry="2" />
<text  x="601.21" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1189" width="0.2" height="15.0" fill="rgb(229,28,3)" rx="2" ry="2" />
<text  x="1170.14" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (30 samples, 0.45%)</title><rect x="180.4" y="1685" width="5.3" height="15.0" fill="rgb(224,13,9)" rx="2" ry="2" />
<text  x="183.36" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1733" width="0.4" height="15.0" fill="rgb(236,166,54)" rx="2" ry="2" />
<text  x="1170.50" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (14 samples, 0.21%)</title><rect x="141.6" y="1605" width="2.5" height="15.0" fill="rgb(229,150,15)" rx="2" ry="2" />
<text  x="144.61" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="133.8" y="1685" width="6.4" height="15.0" fill="rgb(209,88,43)" rx="2" ry="2" />
<text  x="136.75" y="1695.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="1042.7" y="2005" width="0.2" height="15.0" fill="rgb(227,86,36)" rx="2" ry="2" />
<text  x="1045.68" y="2015.5" ></text>
</g>
<g >
<title>clear_page_erms (25 samples, 0.38%)</title><rect x="431.6" y="1845" width="4.5" height="15.0" fill="rgb(228,34,20)" rx="2" ry="2" />
<text  x="434.61" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1221" width="0.4" height="15.0" fill="rgb(215,62,15)" rx="2" ry="2" />
<text  x="1170.50" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (177 samples, 2.68%)</title><rect x="133.2" y="1829" width="31.6" height="15.0" fill="rgb(208,115,46)" rx="2" ry="2" />
<text  x="136.21" y="1839.5" >st..</text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (4 samples, 0.06%)</title><rect x="103.2" y="1909" width="0.7" height="15.0" fill="rgb(216,206,9)" rx="2" ry="2" />
<text  x="106.21" y="1919.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.02%)</title><rect x="194.8" y="1701" width="0.2" height="15.0" fill="rgb(239,167,17)" rx="2" ry="2" />
<text  x="197.82" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1525" width="0.3" height="15.0" fill="rgb(249,176,2)" rx="2" ry="2" />
<text  x="168.36" y="1535.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.02%)</title><rect x="852.7" y="1909" width="0.2" height="15.0" fill="rgb(234,169,21)" rx="2" ry="2" />
<text  x="855.68" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1461" width="0.2" height="15.0" fill="rgb(248,189,5)" rx="2" ry="2" />
<text  x="1170.14" y="1471.5" ></text>
</g>
<g >
<title>cfree (13 samples, 0.20%)</title><rect x="621.6" y="1893" width="2.3" height="15.0" fill="rgb(223,26,25)" rx="2" ry="2" />
<text  x="624.61" y="1903.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="446.1" y="1957" width="0.1" height="15.0" fill="rgb(235,223,52)" rx="2" ry="2" />
<text  x="449.07" y="1967.5" ></text>
</g>
<g >
<title>blk_update_request (1 samples, 0.02%)</title><rect x="713.2" y="1717" width="0.2" height="15.0" fill="rgb(244,92,47)" rx="2" ry="2" />
<text  x="716.21" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="165.2" y="1813" width="0.2" height="15.0" fill="rgb(215,115,27)" rx="2" ry="2" />
<text  x="168.18" y="1823.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="109.5" y="1573" width="0.1" height="15.0" fill="rgb(209,111,18)" rx="2" ry="2" />
<text  x="112.46" y="1583.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%)</title><rect x="599.3" y="1957" width="0.2" height="15.0" fill="rgb(234,39,41)" rx="2" ry="2" />
<text  x="602.29" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (1 samples, 0.02%)</title><rect x="103.0" y="1909" width="0.2" height="15.0" fill="rgb(231,125,0)" rx="2" ry="2" />
<text  x="106.04" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (44 samples, 0.67%)</title><rect x="1137.5" y="2053" width="7.9" height="15.0" fill="rgb(206,116,0)" rx="2" ry="2" />
<text  x="1140.50" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1477" width="0.4" height="15.0" fill="rgb(221,164,2)" rx="2" ry="2" />
<text  x="1170.50" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="133" width="0.2" height="15.0" fill="rgb(206,0,49)" rx="2" ry="2" />
<text  x="1170.32" y="143.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (658 samples, 9.96%)</title><rect x="452.3" y="1973" width="117.5" height="15.0" fill="rgb(223,147,6)" rx="2" ry="2" />
<text  x="455.32" y="1983.5" >fasttext::Dens..</text>
</g>
<g >
<title>[libc-2.27.so] (9 samples, 0.14%)</title><rect x="600.4" y="1941" width="1.6" height="15.0" fill="rgb(252,6,50)" rx="2" ry="2" />
<text  x="603.36" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="613" width="0.2" height="15.0" fill="rgb(239,119,28)" rx="2" ry="2" />
<text  x="1170.14" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (29 samples, 0.44%)</title><rect x="152.0" y="1669" width="5.1" height="15.0" fill="rgb(221,10,3)" rx="2" ry="2" />
<text  x="154.96" y="1679.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (4 samples, 0.06%)</title><rect x="428.4" y="1845" width="0.7" height="15.0" fill="rgb(207,127,8)" rx="2" ry="2" />
<text  x="431.39" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1061" width="0.2" height="15.0" fill="rgb(236,145,42)" rx="2" ry="2" />
<text  x="203.18" y="1071.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.02%)</title><rect x="876.1" y="1989" width="0.1" height="15.0" fill="rgb(239,11,47)" rx="2" ry="2" />
<text  x="879.07" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (152 samples, 2.30%)</title><rect x="105.4" y="1893" width="27.1" height="15.0" fill="rgb(206,42,33)" rx="2" ry="2" />
<text  x="108.36" y="1903.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="389" width="0.2" height="15.0" fill="rgb(246,191,38)" rx="2" ry="2" />
<text  x="1170.32" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1637" width="0.4" height="15.0" fill="rgb(209,104,12)" rx="2" ry="2" />
<text  x="1170.50" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="192.3" y="1765" width="6.5" height="15.0" fill="rgb(238,21,40)" rx="2" ry="2" />
<text  x="195.32" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="277" width="0.2" height="15.0" fill="rgb(241,127,26)" rx="2" ry="2" />
<text  x="1170.14" y="287.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.03%)</title><rect x="636.4" y="1877" width="0.4" height="15.0" fill="rgb(247,156,50)" rx="2" ry="2" />
<text  x="639.43" y="1887.5" ></text>
</g>
<g >
<title>main (2,844 samples, 43.04%)</title><rect x="90.5" y="2021" width="507.9" height="15.0" fill="rgb(254,15,34)" rx="2" ry="2" />
<text  x="93.54" y="2031.5" >main</text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (26 samples, 0.39%)</title><rect x="96.2" y="1925" width="4.7" height="15.0" fill="rgb(239,153,17)" rx="2" ry="2" />
<text  x="99.25" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (155 samples, 2.35%)</title><rect x="105.4" y="1957" width="27.6" height="15.0" fill="rgb(239,52,17)" rx="2" ry="2" />
<text  x="108.36" y="1967.5" >s..</text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="159.5" y="1637" width="0.1" height="15.0" fill="rgb(205,200,25)" rx="2" ry="2" />
<text  x="162.46" y="1647.5" ></text>
</g>
<g >
<title>__x64_sys_read (4 samples, 0.06%)</title><rect x="89.8" y="1989" width="0.7" height="15.0" fill="rgb(206,209,45)" rx="2" ry="2" />
<text  x="92.82" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1477" width="0.5" height="15.0" fill="rgb(245,96,30)" rx="2" ry="2" />
<text  x="88.00" y="1487.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="598.6" y="1989" width="0.2" height="15.0" fill="rgb(253,182,22)" rx="2" ry="2" />
<text  x="601.57" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (286 samples, 4.33%)</title><rect x="991.8" y="2053" width="51.1" height="15.0" fill="rgb(218,167,42)" rx="2" ry="2" />
<text  x="994.79" y="2063.5" >fastt..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1205" width="0.2" height="15.0" fill="rgb(223,52,23)" rx="2" ry="2" />
<text  x="203.18" y="1215.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.02%)</title><rect x="152.9" y="1653" width="0.1" height="15.0" fill="rgb(240,19,39)" rx="2" ry="2" />
<text  x="155.86" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1861" width="0.4" height="15.0" fill="rgb(249,62,27)" rx="2" ry="2" />
<text  x="1170.50" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (30 samples, 0.45%)</title><rect x="180.4" y="1717" width="5.3" height="15.0" fill="rgb(251,46,42)" rx="2" ry="2" />
<text  x="183.36" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1509" width="0.2" height="15.0" fill="rgb(216,139,16)" rx="2" ry="2" />
<text  x="136.04" y="1519.5" ></text>
</g>
<g >
<title>copy_page_to_iter (4 samples, 0.06%)</title><rect x="89.8" y="1877" width="0.7" height="15.0" fill="rgb(232,94,49)" rx="2" ry="2" />
<text  x="92.82" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (19 samples, 0.29%)</title><rect x="135.7" y="1573" width="3.4" height="15.0" fill="rgb(229,127,17)" rx="2" ry="2" />
<text  x="138.71" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1493" width="0.1" height="15.0" fill="rgb(226,47,3)" rx="2" ry="2" />
<text  x="1169.96" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (36 samples, 0.54%)</title><rect x="192.3" y="1749" width="6.5" height="15.0" fill="rgb(236,162,1)" rx="2" ry="2" />
<text  x="195.32" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="245" width="0.2" height="15.0" fill="rgb(221,121,9)" rx="2" ry="2" />
<text  x="1170.32" y="255.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1042.5" y="2037" width="0.2" height="15.0" fill="rgb(222,174,10)" rx="2" ry="2" />
<text  x="1045.50" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (9 samples, 0.14%)</title><rect x="867.9" y="2037" width="1.6" height="15.0" fill="rgb(213,41,40)" rx="2" ry="2" />
<text  x="870.86" y="2047.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1989" width="0.2" height="15.0" fill="rgb(214,187,34)" rx="2" ry="2" />
<text  x="600.32" y="1999.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.02%)</title><rect x="595.7" y="1813" width="0.2" height="15.0" fill="rgb(219,157,10)" rx="2" ry="2" />
<text  x="598.71" y="1823.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.02%)</title><rect x="341.6" y="1989" width="0.2" height="15.0" fill="rgb(251,63,50)" rx="2" ry="2" />
<text  x="344.61" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="709" width="0.2" height="15.0" fill="rgb(232,205,54)" rx="2" ry="2" />
<text  x="1170.14" y="719.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1813" width="0.5" height="15.0" fill="rgb(253,149,33)" rx="2" ry="2" />
<text  x="88.00" y="1823.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (4 samples, 0.06%)</title><rect x="87.5" y="2021" width="0.7" height="15.0" fill="rgb(220,178,49)" rx="2" ry="2" />
<text  x="90.50" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="245" width="0.3" height="15.0" fill="rgb(217,159,20)" rx="2" ry="2" />
<text  x="88.18" y="255.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.02%)</title><rect x="84.5" y="1909" width="0.1" height="15.0" fill="rgb(238,199,14)" rx="2" ry="2" />
<text  x="87.46" y="1919.5" ></text>
</g>
<g >
<title>wake_up_q (13 samples, 0.20%)</title><rect x="44.1" y="1925" width="2.3" height="15.0" fill="rgb(244,120,50)" rx="2" ry="2" />
<text  x="47.11" y="1935.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.03%)</title><rect x="84.5" y="1925" width="0.3" height="15.0" fill="rgb(211,103,31)" rx="2" ry="2" />
<text  x="87.46" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (32 samples, 0.48%)</title><rect x="167.7" y="1717" width="5.7" height="15.0" fill="rgb(222,42,29)" rx="2" ry="2" />
<text  x="170.68" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1861" width="0.2" height="15.0" fill="rgb(217,82,18)" rx="2" ry="2" />
<text  x="1170.32" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1621" width="0.2" height="15.0" fill="rgb(233,93,46)" rx="2" ry="2" />
<text  x="203.54" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1989" width="0.1" height="15.0" fill="rgb(214,140,11)" rx="2" ry="2" />
<text  x="1169.96" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="933" width="0.2" height="15.0" fill="rgb(221,222,39)" rx="2" ry="2" />
<text  x="1170.32" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (32 samples, 0.48%)</title><rect x="105.4" y="1605" width="5.7" height="15.0" fill="rgb(228,38,15)" rx="2" ry="2" />
<text  x="108.36" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="85" width="0.2" height="15.0" fill="rgb(205,146,47)" rx="2" ry="2" />
<text  x="1170.32" y="95.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (1 samples, 0.02%)</title><rect x="211.1" y="1957" width="0.1" height="15.0" fill="rgb(222,132,14)" rx="2" ry="2" />
<text  x="214.07" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="69" width="0.3" height="15.0" fill="rgb(233,187,23)" rx="2" ry="2" />
<text  x="88.18" y="79.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.08%)</title><rect x="848.8" y="1973" width="0.8" height="15.0" fill="rgb(224,69,19)" rx="2" ry="2" />
<text  x="851.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.02%)</title><rect x="185.7" y="1717" width="0.2" height="15.0" fill="rgb(253,19,32)" rx="2" ry="2" />
<text  x="188.71" y="1727.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.02%)</title><rect x="621.4" y="1797" width="0.2" height="15.0" fill="rgb(207,84,1)" rx="2" ry="2" />
<text  x="624.43" y="1807.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.02%)</title><rect x="107.7" y="1589" width="0.2" height="15.0" fill="rgb(252,16,3)" rx="2" ry="2" />
<text  x="110.68" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="565" width="0.2" height="15.0" fill="rgb(240,6,13)" rx="2" ry="2" />
<text  x="1170.32" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1989" width="0.2" height="15.0" fill="rgb(218,119,45)" rx="2" ry="2" />
<text  x="1170.14" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="885" width="0.3" height="15.0" fill="rgb(253,94,33)" rx="2" ry="2" />
<text  x="88.18" y="895.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (17 samples, 0.26%)</title><rect x="333.2" y="1989" width="3.0" height="15.0" fill="rgb(240,25,20)" rx="2" ry="2" />
<text  x="336.21" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1877" width="0.2" height="15.0" fill="rgb(252,17,30)" rx="2" ry="2" />
<text  x="136.04" y="1887.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (28 samples, 0.42%)</title><rect x="1094.8" y="2053" width="5.0" height="15.0" fill="rgb(212,166,35)" rx="2" ry="2" />
<text  x="1097.82" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="677" width="0.3" height="15.0" fill="rgb(243,0,39)" rx="2" ry="2" />
<text  x="88.18" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (35 samples, 0.53%)</title><rect x="111.2" y="1653" width="6.3" height="15.0" fill="rgb(225,96,10)" rx="2" ry="2" />
<text  x="114.25" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1493" width="0.2" height="15.0" fill="rgb(222,226,49)" rx="2" ry="2" />
<text  x="203.54" y="1503.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4 samples, 0.06%)</title><rect x="436.2" y="1877" width="0.8" height="15.0" fill="rgb(238,119,18)" rx="2" ry="2" />
<text  x="439.25" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="997" width="0.5" height="15.0" fill="rgb(241,17,42)" rx="2" ry="2" />
<text  x="88.00" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1317" width="0.2" height="15.0" fill="rgb(237,131,34)" rx="2" ry="2" />
<text  x="136.04" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="869" width="0.2" height="15.0" fill="rgb(239,62,2)" rx="2" ry="2" />
<text  x="1170.14" y="879.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (1 samples, 0.02%)</title><rect x="103.8" y="1893" width="0.1" height="15.0" fill="rgb(224,139,29)" rx="2" ry="2" />
<text  x="106.75" y="1903.5" ></text>
</g>
<g >
<title>generic_file_read_iter (3 samples, 0.05%)</title><rect x="899.6" y="1909" width="0.6" height="15.0" fill="rgb(241,122,29)" rx="2" ry="2" />
<text  x="902.64" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="693" width="0.4" height="15.0" fill="rgb(205,35,54)" rx="2" ry="2" />
<text  x="1170.50" y="703.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="725" width="0.3" height="15.0" fill="rgb(221,29,22)" rx="2" ry="2" />
<text  x="88.18" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1301" width="0.2" height="15.0" fill="rgb(229,191,51)" rx="2" ry="2" />
<text  x="1170.14" y="1311.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.03%)</title><rect x="46.4" y="1941" width="0.4" height="15.0" fill="rgb(248,152,9)" rx="2" ry="2" />
<text  x="49.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1429" width="0.4" height="15.0" fill="rgb(210,26,41)" rx="2" ry="2" />
<text  x="1170.50" y="1439.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (1 samples, 0.02%)</title><rect x="569.8" y="1973" width="0.2" height="15.0" fill="rgb(253,197,5)" rx="2" ry="2" />
<text  x="572.82" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1157" width="0.2" height="15.0" fill="rgb(229,3,47)" rx="2" ry="2" />
<text  x="203.18" y="1167.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="198.2" y="1701" width="0.2" height="15.0" fill="rgb(223,32,3)" rx="2" ry="2" />
<text  x="201.21" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="645" width="0.2" height="15.0" fill="rgb(220,123,21)" rx="2" ry="2" />
<text  x="1170.32" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.27%)</title><rect x="828.6" y="1893" width="3.2" height="15.0" fill="rgb(240,211,43)" rx="2" ry="2" />
<text  x="831.57" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (24 samples, 0.36%)</title><rect x="140.2" y="1669" width="4.3" height="15.0" fill="rgb(240,110,32)" rx="2" ry="2" />
<text  x="143.18" y="1679.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (6 samples, 0.09%)</title><rect x="571.2" y="1973" width="1.1" height="15.0" fill="rgb(239,78,49)" rx="2" ry="2" />
<text  x="574.25" y="1983.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (3 samples, 0.05%)</title><rect x="899.6" y="1925" width="0.6" height="15.0" fill="rgb(234,186,47)" rx="2" ry="2" />
<text  x="902.64" y="1935.5" ></text>
</g>
<g >
<title>std::locale::~locale (4 samples, 0.06%)</title><rect x="342.5" y="1989" width="0.7" height="15.0" fill="rgb(217,151,32)" rx="2" ry="2" />
<text  x="345.50" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1941" width="0.5" height="15.0" fill="rgb(224,70,48)" rx="2" ry="2" />
<text  x="88.00" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.05%)</title><rect x="200.2" y="1829" width="0.5" height="15.0" fill="rgb(211,2,52)" rx="2" ry="2" />
<text  x="203.18" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1525" width="0.2" height="15.0" fill="rgb(224,185,18)" rx="2" ry="2" />
<text  x="136.04" y="1535.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (56 samples, 0.85%)</title><rect x="879.1" y="2053" width="10.0" height="15.0" fill="rgb(211,45,22)" rx="2" ry="2" />
<text  x="882.11" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1333" width="0.2" height="15.0" fill="rgb(209,140,5)" rx="2" ry="2" />
<text  x="168.54" y="1343.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (8 samples, 0.12%)</title><rect x="330.0" y="1989" width="1.4" height="15.0" fill="rgb(224,129,44)" rx="2" ry="2" />
<text  x="333.00" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1525" width="0.2" height="15.0" fill="rgb(209,228,34)" rx="2" ry="2" />
<text  x="203.54" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="677" width="0.2" height="15.0" fill="rgb(231,125,10)" rx="2" ry="2" />
<text  x="203.18" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1285" width="0.2" height="15.0" fill="rgb(224,114,27)" rx="2" ry="2" />
<text  x="203.54" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (36 samples, 0.54%)</title><rect x="133.8" y="1621" width="6.4" height="15.0" fill="rgb(217,204,33)" rx="2" ry="2" />
<text  x="136.75" y="1631.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.05%)</title><rect x="107.0" y="1589" width="0.5" height="15.0" fill="rgb(231,175,43)" rx="2" ry="2" />
<text  x="109.96" y="1599.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="452.0" y="1765" width="0.1" height="15.0" fill="rgb(226,212,20)" rx="2" ry="2" />
<text  x="454.96" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1205" width="0.5" height="15.0" fill="rgb(210,136,33)" rx="2" ry="2" />
<text  x="88.00" y="1215.5" ></text>
</g>
<g >
<title>__lru_cache_add (4 samples, 0.06%)</title><rect x="436.2" y="1861" width="0.8" height="15.0" fill="rgb(243,110,41)" rx="2" ry="2" />
<text  x="439.25" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="85.4" y="37" width="0.1" height="15.0" fill="rgb(220,3,52)" rx="2" ry="2" />
<text  x="88.36" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="869" width="0.1" height="15.0" fill="rgb(207,6,2)" rx="2" ry="2" />
<text  x="1169.96" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="533" width="0.2" height="15.0" fill="rgb(207,205,31)" rx="2" ry="2" />
<text  x="1170.14" y="543.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (1 samples, 0.02%)</title><rect x="1189.5" y="2053" width="0.1" height="15.0" fill="rgb(212,139,43)" rx="2" ry="2" />
<text  x="1192.46" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="167.7" y="1669" width="0.2" height="15.0" fill="rgb(233,103,12)" rx="2" ry="2" />
<text  x="170.68" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.06%)</title><rect x="200.0" y="1861" width="0.7" height="15.0" fill="rgb(239,229,4)" rx="2" ry="2" />
<text  x="203.00" y="1871.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.02%)</title><rect x="595.9" y="1861" width="0.2" height="15.0" fill="rgb(218,49,39)" rx="2" ry="2" />
<text  x="598.89" y="1871.5" ></text>
</g>
<g >
<title>__x64_sys_read (3 samples, 0.05%)</title><rect x="899.6" y="2005" width="0.6" height="15.0" fill="rgb(251,96,6)" rx="2" ry="2" />
<text  x="902.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="309" width="0.2" height="15.0" fill="rgb(251,76,17)" rx="2" ry="2" />
<text  x="1170.14" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (38 samples, 0.58%)</title><rect x="133.4" y="1717" width="6.8" height="15.0" fill="rgb(243,78,28)" rx="2" ry="2" />
<text  x="136.39" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (32 samples, 0.48%)</title><rect x="105.4" y="1653" width="5.7" height="15.0" fill="rgb(240,95,54)" rx="2" ry="2" />
<text  x="108.36" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1205" width="0.2" height="15.0" fill="rgb(248,20,7)" rx="2" ry="2" />
<text  x="136.04" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="629" width="0.4" height="15.0" fill="rgb(228,160,26)" rx="2" ry="2" />
<text  x="1170.50" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="517" width="0.4" height="15.0" fill="rgb(248,171,31)" rx="2" ry="2" />
<text  x="1170.50" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="213" width="0.2" height="15.0" fill="rgb(218,106,46)" rx="2" ry="2" />
<text  x="1170.14" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="693" width="0.2" height="15.0" fill="rgb(225,127,46)" rx="2" ry="2" />
<text  x="136.04" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="2021" width="0.1" height="15.0" fill="rgb(212,134,4)" rx="2" ry="2" />
<text  x="1169.96" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1541" width="0.1" height="15.0" fill="rgb(214,97,24)" rx="2" ry="2" />
<text  x="1169.96" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1093" width="0.5" height="15.0" fill="rgb(244,6,2)" rx="2" ry="2" />
<text  x="88.00" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1621" width="0.3" height="15.0" fill="rgb(226,31,23)" rx="2" ry="2" />
<text  x="168.36" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="725" width="0.2" height="15.0" fill="rgb(231,156,33)" rx="2" ry="2" />
<text  x="1170.32" y="735.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (1 samples, 0.02%)</title><rect x="1048.9" y="2053" width="0.2" height="15.0" fill="rgb(218,69,2)" rx="2" ry="2" />
<text  x="1051.93" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="198.9" y="1781" width="0.2" height="15.0" fill="rgb(249,196,43)" rx="2" ry="2" />
<text  x="201.93" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1157" width="0.2" height="15.0" fill="rgb(222,18,9)" rx="2" ry="2" />
<text  x="203.54" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1557" width="0.1" height="15.0" fill="rgb(221,14,11)" rx="2" ry="2" />
<text  x="1169.96" y="1567.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="197.9" y="1701" width="0.1" height="15.0" fill="rgb(207,137,16)" rx="2" ry="2" />
<text  x="200.86" y="1711.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="126.8" y="1653" width="0.2" height="15.0" fill="rgb(236,172,24)" rx="2" ry="2" />
<text  x="129.79" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1349" width="0.2" height="15.0" fill="rgb(231,213,45)" rx="2" ry="2" />
<text  x="203.54" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="389" width="0.2" height="15.0" fill="rgb(222,49,53)" rx="2" ry="2" />
<text  x="136.04" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.03%)</title><rect x="745.0" y="1829" width="0.4" height="15.0" fill="rgb(218,94,40)" rx="2" ry="2" />
<text  x="748.00" y="1839.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="1048.8" y="2005" width="0.1" height="15.0" fill="rgb(222,2,19)" rx="2" ry="2" />
<text  x="1051.75" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (134 samples, 2.03%)</title><rect x="133.2" y="1797" width="23.9" height="15.0" fill="rgb(229,220,13)" rx="2" ry="2" />
<text  x="136.21" y="1807.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="437" width="0.2" height="15.0" fill="rgb(243,220,45)" rx="2" ry="2" />
<text  x="136.04" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1 samples, 0.02%)</title><rect x="103.9" y="1989" width="0.2" height="15.0" fill="rgb(215,195,46)" rx="2" ry="2" />
<text  x="106.93" y="1999.5" ></text>
</g>
<g >
<title>write (1 samples, 0.02%)</title><rect x="876.1" y="2037" width="0.1" height="15.0" fill="rgb(206,9,39)" rx="2" ry="2" />
<text  x="879.07" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.41%)</title><rect x="85.0" y="2037" width="4.8" height="15.0" fill="rgb(217,86,46)" rx="2" ry="2" />
<text  x="88.00" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="709" width="0.2" height="15.0" fill="rgb(209,20,38)" rx="2" ry="2" />
<text  x="136.04" y="719.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="165" width="0.3" height="15.0" fill="rgb(253,146,5)" rx="2" ry="2" />
<text  x="88.18" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="789" width="0.1" height="15.0" fill="rgb(218,134,5)" rx="2" ry="2" />
<text  x="1169.96" y="799.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.03%)</title><rect x="745.0" y="1861" width="0.4" height="15.0" fill="rgb(221,207,0)" rx="2" ry="2" />
<text  x="748.00" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="293" width="0.2" height="15.0" fill="rgb(248,175,35)" rx="2" ry="2" />
<text  x="1170.14" y="303.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="185.0" y="1637" width="0.2" height="15.0" fill="rgb(227,26,44)" rx="2" ry="2" />
<text  x="188.00" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1029" width="0.2" height="15.0" fill="rgb(247,28,31)" rx="2" ry="2" />
<text  x="1170.14" y="1039.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.03%)</title><rect x="594.1" y="1893" width="0.4" height="15.0" fill="rgb(211,164,32)" rx="2" ry="2" />
<text  x="597.11" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1077" width="0.2" height="15.0" fill="rgb(214,120,30)" rx="2" ry="2" />
<text  x="203.54" y="1087.5" ></text>
</g>
<g >
<title>handle_mm_fault (7 samples, 0.11%)</title><rect x="712.0" y="1813" width="1.2" height="15.0" fill="rgb(243,52,15)" rx="2" ry="2" />
<text  x="714.96" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1077" width="0.2" height="15.0" fill="rgb(213,185,12)" rx="2" ry="2" />
<text  x="1170.32" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="709" width="0.3" height="15.0" fill="rgb(236,103,10)" rx="2" ry="2" />
<text  x="88.18" y="719.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="110.4" y="1589" width="0.1" height="15.0" fill="rgb(223,98,30)" rx="2" ry="2" />
<text  x="113.36" y="1599.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="91.2" y="1973" width="0.2" height="15.0" fill="rgb(216,208,52)" rx="2" ry="2" />
<text  x="94.25" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (24 samples, 0.36%)</title><rect x="140.2" y="1717" width="4.3" height="15.0" fill="rgb(239,189,54)" rx="2" ry="2" />
<text  x="143.18" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="309" width="0.2" height="15.0" fill="rgb(205,22,6)" rx="2" ry="2" />
<text  x="136.04" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.06%)</title><rect x="712.3" y="1781" width="0.7" height="15.0" fill="rgb(208,107,5)" rx="2" ry="2" />
<text  x="715.32" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="84.8" y="1989" width="0.2" height="15.0" fill="rgb(236,81,28)" rx="2" ry="2" />
<text  x="87.82" y="1999.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.02%)</title><rect x="40.0" y="1957" width="0.2" height="15.0" fill="rgb(222,32,0)" rx="2" ry="2" />
<text  x="43.00" y="1967.5" ></text>
</g>
<g >
<title>try_charge (3 samples, 0.05%)</title><rect x="428.6" y="1829" width="0.5" height="15.0" fill="rgb(225,8,31)" rx="2" ry="2" />
<text  x="431.57" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1733" width="0.2" height="15.0" fill="rgb(230,3,43)" rx="2" ry="2" />
<text  x="1170.32" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1349" width="0.5" height="15.0" fill="rgb(254,9,9)" rx="2" ry="2" />
<text  x="88.00" y="1359.5" ></text>
</g>
<g >
<title>operator new@plt (2 samples, 0.03%)</title><rect x="1120.9" y="2053" width="0.3" height="15.0" fill="rgb(251,215,17)" rx="2" ry="2" />
<text  x="1123.89" y="2063.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (2 samples, 0.03%)</title><rect x="757.1" y="1893" width="0.4" height="15.0" fill="rgb(245,189,31)" rx="2" ry="2" />
<text  x="760.14" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1413" width="0.4" height="15.0" fill="rgb(250,148,40)" rx="2" ry="2" />
<text  x="1170.50" y="1423.5" ></text>
</g>
<g >
<title>malloc@plt (4 samples, 0.06%)</title><rect x="1114.3" y="2053" width="0.7" height="15.0" fill="rgb(229,134,4)" rx="2" ry="2" />
<text  x="1117.29" y="2063.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (13 samples, 0.20%)</title><rect x="44.1" y="1893" width="2.3" height="15.0" fill="rgb(246,116,27)" rx="2" ry="2" />
<text  x="47.11" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (5 samples, 0.08%)</title><rect x="850.4" y="2037" width="0.8" height="15.0" fill="rgb(230,126,34)" rx="2" ry="2" />
<text  x="853.36" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter@plt (5 samples, 0.08%)</title><rect x="815.5" y="1893" width="0.9" height="15.0" fill="rgb(221,220,44)" rx="2" ry="2" />
<text  x="818.54" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="549" width="0.2" height="15.0" fill="rgb(230,55,21)" rx="2" ry="2" />
<text  x="1170.14" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1861" width="0.3" height="15.0" fill="rgb(254,216,28)" rx="2" ry="2" />
<text  x="168.36" y="1871.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.06%)</title><rect x="215.0" y="1989" width="0.7" height="15.0" fill="rgb(205,151,7)" rx="2" ry="2" />
<text  x="218.00" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (25 samples, 0.38%)</title><rect x="159.6" y="1685" width="4.5" height="15.0" fill="rgb(218,206,50)" rx="2" ry="2" />
<text  x="162.64" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (30 samples, 0.45%)</title><rect x="180.4" y="1669" width="5.3" height="15.0" fill="rgb(238,194,23)" rx="2" ry="2" />
<text  x="183.36" y="1679.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="91.4" y="1941" width="0.2" height="15.0" fill="rgb(208,35,54)" rx="2" ry="2" />
<text  x="94.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1493" width="0.2" height="15.0" fill="rgb(209,93,22)" rx="2" ry="2" />
<text  x="168.54" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1605" width="0.2" height="15.0" fill="rgb(239,92,33)" rx="2" ry="2" />
<text  x="1170.14" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1461" width="0.2" height="15.0" fill="rgb(206,129,34)" rx="2" ry="2" />
<text  x="203.54" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="133.4" y="1685" width="0.4" height="15.0" fill="rgb(251,188,19)" rx="2" ry="2" />
<text  x="136.39" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1941" width="0.1" height="15.0" fill="rgb(253,195,41)" rx="2" ry="2" />
<text  x="1169.96" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.14%)</title><rect x="85.0" y="2021" width="1.6" height="15.0" fill="rgb(234,185,52)" rx="2" ry="2" />
<text  x="88.00" y="2031.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="343.9" y="1941" width="0.2" height="15.0" fill="rgb(244,47,29)" rx="2" ry="2" />
<text  x="346.93" y="1951.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (1,398 samples, 21.16%)</title><rect x="344.8" y="2005" width="249.7" height="15.0" fill="rgb(232,33,53)" rx="2" ry="2" />
<text  x="347.82" y="2015.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1797" width="0.4" height="15.0" fill="rgb(228,37,36)" rx="2" ry="2" />
<text  x="1170.50" y="1807.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.03%)</title><rect x="137.1" y="1557" width="0.4" height="15.0" fill="rgb(207,171,15)" rx="2" ry="2" />
<text  x="140.14" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="453" width="0.1" height="15.0" fill="rgb(246,153,53)" rx="2" ry="2" />
<text  x="1169.96" y="463.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.05%)</title><rect x="122.5" y="1637" width="0.5" height="15.0" fill="rgb(253,82,17)" rx="2" ry="2" />
<text  x="125.50" y="1647.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.02%)</title><rect x="594.3" y="1797" width="0.2" height="15.0" fill="rgb(211,199,41)" rx="2" ry="2" />
<text  x="597.29" y="1807.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (8 samples, 0.12%)</title><rect x="324.1" y="1989" width="1.4" height="15.0" fill="rgb(221,105,33)" rx="2" ry="2" />
<text  x="327.11" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="229" width="0.4" height="15.0" fill="rgb(227,56,29)" rx="2" ry="2" />
<text  x="1170.50" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1109" width="0.4" height="15.0" fill="rgb(251,167,38)" rx="2" ry="2" />
<text  x="1170.50" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="597" width="0.2" height="15.0" fill="rgb(234,164,28)" rx="2" ry="2" />
<text  x="1170.32" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="533" width="0.1" height="15.0" fill="rgb(251,196,33)" rx="2" ry="2" />
<text  x="1169.96" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (123 samples, 1.86%)</title><rect x="105.4" y="1813" width="21.9" height="15.0" fill="rgb(246,4,49)" rx="2" ry="2" />
<text  x="108.36" y="1823.5" >s..</text>
</g>
<g >
<title>__lru_cache_add (2 samples, 0.03%)</title><rect x="427.5" y="1845" width="0.4" height="15.0" fill="rgb(233,224,19)" rx="2" ry="2" />
<text  x="430.50" y="1855.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (1 samples, 0.02%)</title><rect x="179.6" y="1621" width="0.2" height="15.0" fill="rgb(237,89,45)" rx="2" ry="2" />
<text  x="182.64" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="197" width="0.2" height="15.0" fill="rgb(215,163,41)" rx="2" ry="2" />
<text  x="1170.14" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (8 samples, 0.12%)</title><rect x="199.5" y="1957" width="1.4" height="15.0" fill="rgb(239,145,26)" rx="2" ry="2" />
<text  x="202.46" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="101" width="0.1" height="15.0" fill="rgb(227,55,2)" rx="2" ry="2" />
<text  x="1169.96" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="741" width="0.4" height="15.0" fill="rgb(227,107,12)" rx="2" ry="2" />
<text  x="1170.50" y="751.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (1 samples, 0.02%)</title><rect x="150.5" y="1605" width="0.2" height="15.0" fill="rgb(252,98,53)" rx="2" ry="2" />
<text  x="153.54" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="165.2" y="1797" width="0.2" height="15.0" fill="rgb(207,36,28)" rx="2" ry="2" />
<text  x="168.18" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (31 samples, 0.47%)</title><rect x="180.4" y="1749" width="5.5" height="15.0" fill="rgb(244,63,15)" rx="2" ry="2" />
<text  x="183.36" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.03%)</title><rect x="198.9" y="1829" width="0.4" height="15.0" fill="rgb(221,229,22)" rx="2" ry="2" />
<text  x="201.93" y="1839.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="184.3" y="1621" width="0.3" height="15.0" fill="rgb(221,125,13)" rx="2" ry="2" />
<text  x="187.29" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (1 samples, 0.02%)</title><rect x="198.6" y="1717" width="0.2" height="15.0" fill="rgb(254,0,5)" rx="2" ry="2" />
<text  x="201.57" y="1727.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="899.6" y="2021" width="0.6" height="15.0" fill="rgb(219,103,23)" rx="2" ry="2" />
<text  x="902.64" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="581" width="0.3" height="15.0" fill="rgb(207,85,17)" rx="2" ry="2" />
<text  x="88.18" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="741" width="0.2" height="15.0" fill="rgb(225,113,45)" rx="2" ry="2" />
<text  x="1170.32" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1957" width="0.4" height="15.0" fill="rgb(219,25,20)" rx="2" ry="2" />
<text  x="1170.50" y="1967.5" ></text>
</g>
<g >
<title>std::locale::~locale (2 samples, 0.03%)</title><rect x="592.9" y="1973" width="0.3" height="15.0" fill="rgb(210,3,46)" rx="2" ry="2" />
<text  x="595.86" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="661" width="0.2" height="15.0" fill="rgb(210,198,23)" rx="2" ry="2" />
<text  x="1170.14" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1765" width="0.4" height="15.0" fill="rgb(220,157,41)" rx="2" ry="2" />
<text  x="1170.50" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1381" width="0.2" height="15.0" fill="rgb(213,13,3)" rx="2" ry="2" />
<text  x="203.18" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (30 samples, 0.45%)</title><rect x="117.7" y="1685" width="5.3" height="15.0" fill="rgb(213,13,5)" rx="2" ry="2" />
<text  x="120.68" y="1695.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="116.8" y="1621" width="0.2" height="15.0" fill="rgb(251,129,17)" rx="2" ry="2" />
<text  x="119.79" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1909" width="0.2" height="15.0" fill="rgb(234,21,0)" rx="2" ry="2" />
<text  x="1170.32" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="501" width="0.2" height="15.0" fill="rgb(248,15,15)" rx="2" ry="2" />
<text  x="136.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1541" width="0.2" height="15.0" fill="rgb(224,220,48)" rx="2" ry="2" />
<text  x="1170.32" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1141" width="0.2" height="15.0" fill="rgb(238,38,1)" rx="2" ry="2" />
<text  x="1170.32" y="1151.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="89.8" y="2021" width="0.7" height="15.0" fill="rgb(218,228,32)" rx="2" ry="2" />
<text  x="92.82" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="2037" width="0.2" height="15.0" fill="rgb(213,15,44)" rx="2" ry="2" />
<text  x="1170.32" y="2047.5" ></text>
</g>
<g >
<title>__strxfrm_l (1 samples, 0.02%)</title><rect x="900.2" y="2053" width="0.2" height="15.0" fill="rgb(250,55,9)" rx="2" ry="2" />
<text  x="903.18" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1349" width="0.2" height="15.0" fill="rgb(220,46,48)" rx="2" ry="2" />
<text  x="1170.32" y="1359.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.03%)</title><rect x="713.4" y="1797" width="0.4" height="15.0" fill="rgb(239,35,6)" rx="2" ry="2" />
<text  x="716.39" y="1807.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (4 samples, 0.06%)</title><rect x="104.5" y="1877" width="0.7" height="15.0" fill="rgb(223,69,48)" rx="2" ry="2" />
<text  x="107.46" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1285" width="0.2" height="15.0" fill="rgb(241,62,42)" rx="2" ry="2" />
<text  x="203.18" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1925" width="0.1" height="15.0" fill="rgb(237,64,49)" rx="2" ry="2" />
<text  x="1169.96" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (179 samples, 2.71%)</title><rect x="133.2" y="1861" width="32.0" height="15.0" fill="rgb(234,37,30)" rx="2" ry="2" />
<text  x="136.21" y="1871.5" >st..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (3 samples, 0.05%)</title><rect x="596.4" y="2005" width="0.6" height="15.0" fill="rgb(239,199,12)" rx="2" ry="2" />
<text  x="599.43" y="2015.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.03%)</title><rect x="344.3" y="1989" width="0.3" height="15.0" fill="rgb(242,107,13)" rx="2" ry="2" />
<text  x="347.29" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1285" width="0.5" height="15.0" fill="rgb(220,88,28)" rx="2" ry="2" />
<text  x="88.00" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1973" width="0.5" height="15.0" fill="rgb(226,113,34)" rx="2" ry="2" />
<text  x="88.00" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1653" width="0.5" height="15.0" fill="rgb(219,63,44)" rx="2" ry="2" />
<text  x="88.00" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1605" width="0.1" height="15.0" fill="rgb(223,136,7)" rx="2" ry="2" />
<text  x="1169.96" y="1615.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append@plt (2 samples, 0.03%)</title><rect x="625.4" y="1893" width="0.3" height="15.0" fill="rgb(247,116,39)" rx="2" ry="2" />
<text  x="628.36" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1525" width="0.2" height="15.0" fill="rgb(247,118,0)" rx="2" ry="2" />
<text  x="203.18" y="1535.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.02%)</title><rect x="452.0" y="1861" width="0.1" height="15.0" fill="rgb(227,145,49)" rx="2" ry="2" />
<text  x="454.96" y="1871.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TWeightedDoc*, std::vector&lt;TWeightedDoc, std::allocator&lt;TWeightedDoc&gt; &gt; &gt;, TWeightedDoc*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TNewsCluster::SortByWeights (1 samples, 0.02%)</title><rect x="211.6" y="1973" width="0.2" height="15.0" fill="rgb(231,161,28)" rx="2" ry="2" />
<text  x="214.61" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1269" width="0.2" height="15.0" fill="rgb(241,76,26)" rx="2" ry="2" />
<text  x="1170.32" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1765" width="0.1" height="15.0" fill="rgb(212,58,45)" rx="2" ry="2" />
<text  x="1169.96" y="1775.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="197.3" y="1685" width="0.4" height="15.0" fill="rgb(238,158,30)" rx="2" ry="2" />
<text  x="200.32" y="1695.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="163.8" y="1669" width="0.1" height="15.0" fill="rgb(226,183,42)" rx="2" ry="2" />
<text  x="166.75" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1605" width="0.2" height="15.0" fill="rgb(229,4,44)" rx="2" ry="2" />
<text  x="203.54" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1845" width="0.5" height="15.0" fill="rgb(226,5,53)" rx="2" ry="2" />
<text  x="88.00" y="1855.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="110.9" y="1589" width="0.2" height="15.0" fill="rgb(218,96,36)" rx="2" ry="2" />
<text  x="113.89" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1365" width="0.4" height="15.0" fill="rgb(208,52,24)" rx="2" ry="2" />
<text  x="1170.50" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1333" width="0.2" height="15.0" fill="rgb(205,193,39)" rx="2" ry="2" />
<text  x="1170.32" y="1343.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.03%)</title><rect x="649.3" y="1877" width="0.3" height="15.0" fill="rgb(249,44,14)" rx="2" ry="2" />
<text  x="652.29" y="1887.5" ></text>
</g>
<g >
<title>futex_wake (15 samples, 0.23%)</title><rect x="43.8" y="1941" width="2.6" height="15.0" fill="rgb(245,32,42)" rx="2" ry="2" />
<text  x="46.75" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="885" width="0.1" height="15.0" fill="rgb(212,126,14)" rx="2" ry="2" />
<text  x="1169.96" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1701" width="0.2" height="15.0" fill="rgb(226,189,19)" rx="2" ry="2" />
<text  x="136.04" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1957" width="0.2" height="15.0" fill="rgb(225,41,12)" rx="2" ry="2" />
<text  x="1170.14" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="53" width="0.4" height="15.0" fill="rgb(207,167,49)" rx="2" ry="2" />
<text  x="1170.50" y="63.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="46.4" y="1925" width="0.4" height="15.0" fill="rgb(241,184,19)" rx="2" ry="2" />
<text  x="49.43" y="1935.5" ></text>
</g>
<g >
<title>__vfs_write (1 samples, 0.02%)</title><rect x="876.1" y="1941" width="0.1" height="15.0" fill="rgb(217,135,18)" rx="2" ry="2" />
<text  x="879.07" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="597" width="0.2" height="15.0" fill="rgb(230,151,21)" rx="2" ry="2" />
<text  x="203.18" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="133" width="0.4" height="15.0" fill="rgb(216,186,0)" rx="2" ry="2" />
<text  x="1170.50" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1493" width="0.4" height="15.0" fill="rgb(224,113,44)" rx="2" ry="2" />
<text  x="1170.50" y="1503.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (14 samples, 0.21%)</title><rect x="325.5" y="1989" width="2.5" height="15.0" fill="rgb(234,189,5)" rx="2" ry="2" />
<text  x="328.54" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="469" width="0.2" height="15.0" fill="rgb(238,159,31)" rx="2" ry="2" />
<text  x="136.04" y="479.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 48, 4, false, false&gt;::operator (30 samples, 0.45%)</title><rect x="416.1" y="1909" width="5.3" height="15.0" fill="rgb(242,226,50)" rx="2" ry="2" />
<text  x="419.07" y="1919.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (38 samples, 0.58%)</title><rect x="853.0" y="2037" width="6.8" height="15.0" fill="rgb(235,149,15)" rx="2" ry="2" />
<text  x="856.04" y="2047.5" ></text>
</g>
<g >
<title>std::istream::get (1 samples, 0.02%)</title><rect x="1189.6" y="2053" width="0.2" height="15.0" fill="rgb(208,56,20)" rx="2" ry="2" />
<text  x="1192.64" y="2063.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 0.06%)</title><rect x="89.8" y="1957" width="0.7" height="15.0" fill="rgb(218,113,24)" rx="2" ry="2" />
<text  x="92.82" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (21 samples, 0.32%)</title><rect x="118.8" y="1637" width="3.7" height="15.0" fill="rgb(245,90,21)" rx="2" ry="2" />
<text  x="121.75" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="565" width="0.2" height="15.0" fill="rgb(227,122,28)" rx="2" ry="2" />
<text  x="136.04" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="373" width="0.1" height="15.0" fill="rgb(236,148,20)" rx="2" ry="2" />
<text  x="1169.96" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1269" width="0.2" height="15.0" fill="rgb(244,206,26)" rx="2" ry="2" />
<text  x="203.54" y="1279.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1973" width="0.2" height="15.0" fill="rgb(209,226,37)" rx="2" ry="2" />
<text  x="600.32" y="1983.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="164.3" y="1685" width="0.3" height="15.0" fill="rgb(223,19,43)" rx="2" ry="2" />
<text  x="167.29" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1493" width="0.5" height="15.0" fill="rgb(210,71,6)" rx="2" ry="2" />
<text  x="88.00" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="69" width="0.2" height="15.0" fill="rgb(216,164,23)" rx="2" ry="2" />
<text  x="1170.14" y="79.5" ></text>
</g>
<g >
<title>Preprocess (1,388 samples, 21.00%)</title><rect x="600.2" y="1957" width="247.8" height="15.0" fill="rgb(220,55,49)" rx="2" ry="2" />
<text  x="603.18" y="1967.5" >Preprocess</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="341" width="0.4" height="15.0" fill="rgb(226,13,40)" rx="2" ry="2" />
<text  x="1170.50" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="140.0" y="1589" width="0.2" height="15.0" fill="rgb(228,162,26)" rx="2" ry="2" />
<text  x="143.00" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="997" width="0.2" height="15.0" fill="rgb(212,18,19)" rx="2" ry="2" />
<text  x="1170.14" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1653" width="0.2" height="15.0" fill="rgb(225,198,31)" rx="2" ry="2" />
<text  x="1170.32" y="1663.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (54 samples, 0.82%)</title><rect x="817.5" y="1893" width="9.6" height="15.0" fill="rgb(239,210,48)" rx="2" ry="2" />
<text  x="820.50" y="1903.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (1 samples, 0.02%)</title><rect x="852.9" y="1941" width="0.1" height="15.0" fill="rgb(222,100,33)" rx="2" ry="2" />
<text  x="855.86" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="997" width="0.2" height="15.0" fill="rgb(227,81,24)" rx="2" ry="2" />
<text  x="203.18" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1717" width="0.3" height="15.0" fill="rgb(252,95,5)" rx="2" ry="2" />
<text  x="168.36" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="200.7" y="1941" width="0.2" height="15.0" fill="rgb(210,126,10)" rx="2" ry="2" />
<text  x="203.71" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (41 samples, 0.62%)</title><rect x="144.5" y="1669" width="7.3" height="15.0" fill="rgb(250,203,9)" rx="2" ry="2" />
<text  x="147.46" y="1679.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="602.3" y="1941" width="0.2" height="15.0" fill="rgb(228,41,13)" rx="2" ry="2" />
<text  x="605.32" y="1951.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1042.5" y="2021" width="0.2" height="15.0" fill="rgb(251,101,34)" rx="2" ry="2" />
<text  x="1045.50" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="693" width="0.2" height="15.0" fill="rgb(207,173,3)" rx="2" ry="2" />
<text  x="203.54" y="703.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.06%)</title><rect x="875.4" y="2021" width="0.7" height="15.0" fill="rgb(240,95,37)" rx="2" ry="2" />
<text  x="878.36" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="437" width="0.1" height="15.0" fill="rgb(212,155,21)" rx="2" ry="2" />
<text  x="1169.96" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="837" width="0.2" height="15.0" fill="rgb(213,220,23)" rx="2" ry="2" />
<text  x="203.18" y="847.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (4 samples, 0.06%)</title><rect x="89.8" y="1909" width="0.7" height="15.0" fill="rgb(214,159,47)" rx="2" ry="2" />
<text  x="92.82" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1589" width="0.1" height="15.0" fill="rgb(225,110,24)" rx="2" ry="2" />
<text  x="1169.96" y="1599.5" ></text>
</g>
<g >
<title>alloc_pages_vma (12 samples, 0.18%)</title><rect x="425.4" y="1861" width="2.1" height="15.0" fill="rgb(205,173,38)" rx="2" ry="2" />
<text  x="428.36" y="1871.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.03%)</title><rect x="597.0" y="2005" width="0.3" height="15.0" fill="rgb(247,11,19)" rx="2" ry="2" />
<text  x="599.96" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1381" width="0.5" height="15.0" fill="rgb(210,134,47)" rx="2" ry="2" />
<text  x="88.00" y="1391.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (18 samples, 0.27%)</title><rect x="864.6" y="2005" width="3.3" height="15.0" fill="rgb(219,39,47)" rx="2" ry="2" />
<text  x="867.64" y="2015.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (14 samples, 0.21%)</title><rect x="753.9" y="1893" width="2.5" height="15.0" fill="rgb(231,164,19)" rx="2" ry="2" />
<text  x="756.93" y="1903.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1 samples, 0.02%)</title><rect x="876.1" y="1829" width="0.1" height="15.0" fill="rgb(242,115,49)" rx="2" ry="2" />
<text  x="879.07" y="1839.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::evalTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (30 samples, 0.45%)</title><rect x="416.1" y="1957" width="5.3" height="15.0" fill="rgb(230,161,36)" rx="2" ry="2" />
<text  x="419.07" y="1967.5" ></text>
</g>
<g >
<title>RunFasttextClf (1 samples, 0.02%)</title><rect x="599.6" y="1957" width="0.2" height="15.0" fill="rgb(206,116,52)" rx="2" ry="2" />
<text  x="602.64" y="1967.5" ></text>
</g>
<g >
<title>std::locale::locale (4 samples, 0.06%)</title><rect x="592.1" y="1973" width="0.8" height="15.0" fill="rgb(221,135,10)" rx="2" ry="2" />
<text  x="595.14" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="453" width="0.2" height="15.0" fill="rgb(248,56,17)" rx="2" ry="2" />
<text  x="1170.14" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1781" width="0.2" height="15.0" fill="rgb(248,67,18)" rx="2" ry="2" />
<text  x="136.04" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (74 samples, 1.12%)</title><rect x="1121.8" y="2053" width="13.2" height="15.0" fill="rgb(227,28,33)" rx="2" ry="2" />
<text  x="1124.79" y="2063.5" ></text>
</g>
<g >
<title>TNewsCluster::GetCategory (1 samples, 0.02%)</title><rect x="166.2" y="1989" width="0.2" height="15.0" fill="rgb(233,16,43)" rx="2" ry="2" />
<text  x="169.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="373" width="0.2" height="15.0" fill="rgb(233,171,19)" rx="2" ry="2" />
<text  x="136.04" y="383.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.03%)</title><rect x="1118.0" y="2053" width="0.4" height="15.0" fill="rgb(240,187,40)" rx="2" ry="2" />
<text  x="1121.04" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (111 samples, 1.68%)</title><rect x="942.0" y="2053" width="19.8" height="15.0" fill="rgb(209,0,4)" rx="2" ry="2" />
<text  x="944.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1669" width="0.2" height="15.0" fill="rgb(232,204,27)" rx="2" ry="2" />
<text  x="1170.14" y="1679.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.02%)</title><rect x="621.4" y="1829" width="0.2" height="15.0" fill="rgb(238,11,29)" rx="2" ry="2" />
<text  x="624.43" y="1839.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.03%)</title><rect x="594.1" y="1909" width="0.4" height="15.0" fill="rgb(251,14,12)" rx="2" ry="2" />
<text  x="597.11" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (24 samples, 0.36%)</title><rect x="140.2" y="1653" width="4.3" height="15.0" fill="rgb(250,172,7)" rx="2" ry="2" />
<text  x="143.18" y="1663.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (10 samples, 0.15%)</title><rect x="331.4" y="1989" width="1.8" height="15.0" fill="rgb(229,198,26)" rx="2" ry="2" />
<text  x="334.43" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1653" width="0.2" height="15.0" fill="rgb(207,20,18)" rx="2" ry="2" />
<text  x="1170.14" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1813" width="0.2" height="15.0" fill="rgb(206,32,53)" rx="2" ry="2" />
<text  x="1170.32" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1317" width="0.1" height="15.0" fill="rgb(214,216,8)" rx="2" ry="2" />
<text  x="1169.96" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="421" width="0.2" height="15.0" fill="rgb(242,156,28)" rx="2" ry="2" />
<text  x="1170.32" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="130.5" y="1685" width="0.2" height="15.0" fill="rgb(253,117,44)" rx="2" ry="2" />
<text  x="133.54" y="1695.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.02%)</title><rect x="428.4" y="1829" width="0.2" height="15.0" fill="rgb(206,109,5)" rx="2" ry="2" />
<text  x="431.39" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1381" width="0.4" height="15.0" fill="rgb(247,165,8)" rx="2" ry="2" />
<text  x="1170.50" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (24 samples, 0.36%)</title><rect x="140.2" y="1637" width="4.3" height="15.0" fill="rgb(213,189,38)" rx="2" ry="2" />
<text  x="143.18" y="1647.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (1 samples, 0.02%)</title><rect x="926.6" y="2053" width="0.2" height="15.0" fill="rgb(245,51,48)" rx="2" ry="2" />
<text  x="929.61" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (28 samples, 0.42%)</title><rect x="79.8" y="2037" width="5.0" height="15.0" fill="rgb(252,34,19)" rx="2" ry="2" />
<text  x="82.82" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.05%)</title><rect x="117.7" y="1637" width="0.5" height="15.0" fill="rgb(241,100,31)" rx="2" ry="2" />
<text  x="120.68" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="917" width="0.2" height="15.0" fill="rgb(225,208,35)" rx="2" ry="2" />
<text  x="203.54" y="927.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.08%)</title><rect x="677.7" y="1877" width="0.9" height="15.0" fill="rgb(245,150,12)" rx="2" ry="2" />
<text  x="680.68" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (180 samples, 2.72%)</title><rect x="133.2" y="1893" width="32.2" height="15.0" fill="rgb(205,220,27)" rx="2" ry="2" />
<text  x="136.21" y="1903.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="261" width="0.1" height="15.0" fill="rgb(241,197,54)" rx="2" ry="2" />
<text  x="1169.96" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="581" width="0.1" height="15.0" fill="rgb(223,185,50)" rx="2" ry="2" />
<text  x="1169.96" y="591.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (32 samples, 0.48%)</title><rect x="578.2" y="1973" width="5.7" height="15.0" fill="rgb(234,225,10)" rx="2" ry="2" />
<text  x="581.21" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1877" width="0.2" height="15.0" fill="rgb(236,175,31)" rx="2" ry="2" />
<text  x="1170.32" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="789" width="0.2" height="15.0" fill="rgb(226,21,10)" rx="2" ry="2" />
<text  x="136.04" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="885" width="0.4" height="15.0" fill="rgb(207,84,54)" rx="2" ry="2" />
<text  x="1170.50" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (175 samples, 2.65%)</title><rect x="167.5" y="1893" width="31.3" height="15.0" fill="rgb(232,187,31)" rx="2" ry="2" />
<text  x="170.50" y="1903.5" >st..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (138 samples, 2.09%)</title><rect x="167.5" y="1797" width="24.6" height="15.0" fill="rgb(211,221,29)" rx="2" ry="2" />
<text  x="170.50" y="1807.5" >s..</text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;float, float&gt;, Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_opposite_op&lt;float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::ArrayWrapper&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, 0&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;float, float&gt; &gt; (135 samples, 2.04%)</title><rect x="413.2" y="1973" width="24.1" height="15.0" fill="rgb(247,28,24)" rx="2" ry="2" />
<text  x="416.21" y="1983.5" >E..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (71 samples, 1.07%)</title><rect x="167.7" y="1765" width="12.7" height="15.0" fill="rgb(254,34,42)" rx="2" ry="2" />
<text  x="170.68" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (1 samples, 0.02%)</title><rect x="133.6" y="1605" width="0.2" height="15.0" fill="rgb(237,51,3)" rx="2" ry="2" />
<text  x="136.57" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="405" width="0.1" height="15.0" fill="rgb(227,1,1)" rx="2" ry="2" />
<text  x="1169.96" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1461" width="0.2" height="15.0" fill="rgb(254,25,53)" rx="2" ry="2" />
<text  x="168.54" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="111.1" y="1685" width="6.4" height="15.0" fill="rgb(205,207,25)" rx="2" ry="2" />
<text  x="114.07" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1557" width="0.2" height="15.0" fill="rgb(208,184,14)" rx="2" ry="2" />
<text  x="203.18" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="549" width="0.3" height="15.0" fill="rgb(224,163,36)" rx="2" ry="2" />
<text  x="88.18" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="200.4" y="1701" width="0.3" height="15.0" fill="rgb(223,34,37)" rx="2" ry="2" />
<text  x="203.36" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="2021" width="0.4" height="15.0" fill="rgb(218,182,41)" rx="2" ry="2" />
<text  x="1170.50" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1477" width="0.2" height="15.0" fill="rgb(245,29,9)" rx="2" ry="2" />
<text  x="203.54" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (1 samples, 0.02%)</title><rect x="132.5" y="1781" width="0.2" height="15.0" fill="rgb(218,110,48)" rx="2" ry="2" />
<text  x="135.50" y="1791.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.03%)</title><rect x="595.7" y="1925" width="0.4" height="15.0" fill="rgb(223,52,53)" rx="2" ry="2" />
<text  x="598.71" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="597" width="0.4" height="15.0" fill="rgb(225,220,25)" rx="2" ry="2" />
<text  x="1170.50" y="607.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.02%)</title><rect x="452.0" y="1797" width="0.1" height="15.0" fill="rgb(238,224,33)" rx="2" ry="2" />
<text  x="454.96" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1909" width="0.2" height="15.0" fill="rgb(226,180,14)" rx="2" ry="2" />
<text  x="1170.14" y="1919.5" ></text>
</g>
<g >
<title>page_fault (35 samples, 0.53%)</title><rect x="422.9" y="1941" width="6.2" height="15.0" fill="rgb(229,74,39)" rx="2" ry="2" />
<text  x="425.86" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (3 samples, 0.05%)</title><rect x="596.4" y="1973" width="0.6" height="15.0" fill="rgb(226,126,17)" rx="2" ry="2" />
<text  x="599.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1413" width="0.2" height="15.0" fill="rgb(205,121,49)" rx="2" ry="2" />
<text  x="1170.32" y="1423.5" ></text>
</g>
<g >
<title>ext4_da_write_end (1 samples, 0.02%)</title><rect x="876.1" y="1861" width="0.1" height="15.0" fill="rgb(245,124,20)" rx="2" ry="2" />
<text  x="879.07" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1061" width="0.2" height="15.0" fill="rgb(250,175,34)" rx="2" ry="2" />
<text  x="136.04" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="37" width="0.2" height="15.0" fill="rgb(245,35,44)" rx="2" ry="2" />
<text  x="1170.32" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="901" width="0.2" height="15.0" fill="rgb(234,188,41)" rx="2" ry="2" />
<text  x="203.54" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="597.3" y="1845" width="0.2" height="15.0" fill="rgb(226,207,36)" rx="2" ry="2" />
<text  x="600.32" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1397" width="0.5" height="15.0" fill="rgb(222,13,9)" rx="2" ry="2" />
<text  x="88.00" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="309" width="0.1" height="15.0" fill="rgb(238,89,27)" rx="2" ry="2" />
<text  x="1169.96" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="117" width="0.3" height="15.0" fill="rgb(221,102,20)" rx="2" ry="2" />
<text  x="88.18" y="127.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.02%)</title><rect x="594.1" y="1829" width="0.2" height="15.0" fill="rgb(239,26,51)" rx="2" ry="2" />
<text  x="597.11" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (42 samples, 0.64%)</title><rect x="157.1" y="1733" width="7.5" height="15.0" fill="rgb(211,17,47)" rx="2" ry="2" />
<text  x="160.14" y="1743.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.03%)</title><rect x="745.0" y="1813" width="0.4" height="15.0" fill="rgb(244,79,25)" rx="2" ry="2" />
<text  x="748.00" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1365" width="0.2" height="15.0" fill="rgb(242,40,17)" rx="2" ry="2" />
<text  x="203.54" y="1375.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.02%)</title><rect x="852.7" y="1941" width="0.2" height="15.0" fill="rgb(214,103,29)" rx="2" ry="2" />
<text  x="855.68" y="1951.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (47 samples, 0.71%)</title><rect x="1179.5" y="2037" width="8.4" height="15.0" fill="rgb(210,194,20)" rx="2" ry="2" />
<text  x="1182.46" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (1 samples, 0.02%)</title><rect x="91.6" y="1941" width="0.2" height="15.0" fill="rgb(215,93,54)" rx="2" ry="2" />
<text  x="94.61" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="709" width="0.4" height="15.0" fill="rgb(243,74,4)" rx="2" ry="2" />
<text  x="1170.50" y="719.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (4 samples, 0.06%)</title><rect x="875.4" y="2037" width="0.7" height="15.0" fill="rgb(249,87,46)" rx="2" ry="2" />
<text  x="878.36" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1621" width="0.2" height="15.0" fill="rgb(229,43,30)" rx="2" ry="2" />
<text  x="136.04" y="1631.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.03%)</title><rect x="344.3" y="1925" width="0.3" height="15.0" fill="rgb(244,96,40)" rx="2" ry="2" />
<text  x="347.29" y="1935.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7 samples, 0.11%)</title><rect x="38.9" y="1973" width="1.3" height="15.0" fill="rgb(251,156,36)" rx="2" ry="2" />
<text  x="41.93" y="1983.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.02%)</title><rect x="595.7" y="1829" width="0.2" height="15.0" fill="rgb(241,16,33)" rx="2" ry="2" />
<text  x="598.71" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="53" width="0.1" height="15.0" fill="rgb(224,184,3)" rx="2" ry="2" />
<text  x="1169.96" y="63.5" ></text>
</g>
<g >
<title>__wake_up (1 samples, 0.02%)</title><rect x="876.1" y="1813" width="0.1" height="15.0" fill="rgb(222,181,20)" rx="2" ry="2" />
<text  x="879.07" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1653" width="0.4" height="15.0" fill="rgb(251,170,5)" rx="2" ry="2" />
<text  x="1170.50" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (2 samples, 0.03%)</title><rect x="180.4" y="1653" width="0.3" height="15.0" fill="rgb(246,65,22)" rx="2" ry="2" />
<text  x="183.36" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (180 samples, 2.72%)</title><rect x="167.3" y="1957" width="32.2" height="15.0" fill="rgb(248,211,0)" rx="2" ry="2" />
<text  x="170.32" y="1967.5" >st..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1621" width="0.5" height="15.0" fill="rgb(224,18,19)" rx="2" ry="2" />
<text  x="88.00" y="1631.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="126.6" y="1653" width="0.2" height="15.0" fill="rgb(247,128,5)" rx="2" ry="2" />
<text  x="129.61" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="245" width="0.4" height="15.0" fill="rgb(251,106,9)" rx="2" ry="2" />
<text  x="1170.50" y="255.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.02%)</title><rect x="452.0" y="1893" width="0.1" height="15.0" fill="rgb(246,177,0)" rx="2" ry="2" />
<text  x="454.96" y="1903.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.02%)</title><rect x="344.5" y="1893" width="0.1" height="15.0" fill="rgb(237,0,52)" rx="2" ry="2" />
<text  x="347.46" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="197" width="0.1" height="15.0" fill="rgb(238,190,14)" rx="2" ry="2" />
<text  x="1169.96" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (35 samples, 0.53%)</title><rect x="185.9" y="1765" width="6.2" height="15.0" fill="rgb(208,202,16)" rx="2" ry="2" />
<text  x="188.89" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (26 samples, 0.39%)</title><rect x="180.7" y="1653" width="4.7" height="15.0" fill="rgb(208,168,21)" rx="2" ry="2" />
<text  x="183.71" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="245" width="0.2" height="15.0" fill="rgb(205,180,6)" rx="2" ry="2" />
<text  x="1170.14" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1077" width="0.2" height="15.0" fill="rgb(224,21,45)" rx="2" ry="2" />
<text  x="168.54" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (23 samples, 0.35%)</title><rect x="123.0" y="1733" width="4.1" height="15.0" fill="rgb(254,3,31)" rx="2" ry="2" />
<text  x="126.04" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="533" width="0.4" height="15.0" fill="rgb(250,144,26)" rx="2" ry="2" />
<text  x="1170.50" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.03%)</title><rect x="648.9" y="1861" width="0.4" height="15.0" fill="rgb(218,74,42)" rx="2" ry="2" />
<text  x="651.93" y="1871.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.08%)</title><rect x="39.1" y="1957" width="0.9" height="15.0" fill="rgb(205,169,27)" rx="2" ry="2" />
<text  x="42.11" y="1967.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="876.1" y="2021" width="0.1" height="15.0" fill="rgb(215,179,25)" rx="2" ry="2" />
<text  x="879.07" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="200.4" y="1765" width="0.3" height="15.0" fill="rgb(211,124,35)" rx="2" ry="2" />
<text  x="203.36" y="1775.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1 samples, 0.02%)</title><rect x="876.1" y="1797" width="0.1" height="15.0" fill="rgb(248,67,2)" rx="2" ry="2" />
<text  x="879.07" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1557" width="0.2" height="15.0" fill="rgb(236,188,44)" rx="2" ry="2" />
<text  x="203.54" y="1567.5" ></text>
</g>
<g >
<title>@plt (5 samples, 0.08%)</title><rect x="1154.6" y="2037" width="0.9" height="15.0" fill="rgb(214,106,8)" rx="2" ry="2" />
<text  x="1157.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1285" width="0.2" height="15.0" fill="rgb(211,25,32)" rx="2" ry="2" />
<text  x="168.54" y="1295.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.02%)</title><rect x="344.5" y="1909" width="0.1" height="15.0" fill="rgb(235,0,6)" rx="2" ry="2" />
<text  x="347.46" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="581" width="0.2" height="15.0" fill="rgb(223,201,5)" rx="2" ry="2" />
<text  x="1170.14" y="591.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.02%)</title><rect x="592.0" y="1973" width="0.1" height="15.0" fill="rgb(241,201,18)" rx="2" ry="2" />
<text  x="594.96" y="1983.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (2 samples, 0.03%)</title><rect x="603.4" y="1909" width="0.4" height="15.0" fill="rgb(218,227,41)" rx="2" ry="2" />
<text  x="606.39" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (176 samples, 2.66%)</title><rect x="133.2" y="1813" width="31.4" height="15.0" fill="rgb(223,54,38)" rx="2" ry="2" />
<text  x="136.21" y="1823.5" >st..</text>
</g>
<g >
<title>operator delete[] (1 samples, 0.02%)</title><rect x="1118.4" y="2053" width="0.2" height="15.0" fill="rgb(231,113,22)" rx="2" ry="2" />
<text  x="1121.39" y="2063.5" ></text>
</g>
<g >
<title>std::__merge_without_buffer&lt;__gnu_cxx::__normal_iterator&lt;TWeightedDoc*, std::vector&lt;TWeightedDoc, std::allocator&lt;TWeightedDoc&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TNewsCluster::SortByWeights (119 samples, 1.80%)</title><rect x="1167.9" y="2053" width="21.2" height="15.0" fill="rgb(216,195,8)" rx="2" ry="2" />
<text  x="1170.86" y="2063.5" >s..</text>
</g>
<g >
<title>do_futex (1 samples, 0.02%)</title><rect x="598.6" y="1973" width="0.2" height="15.0" fill="rgb(239,175,27)" rx="2" ry="2" />
<text  x="601.57" y="1983.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="713.4" y="1829" width="0.4" height="15.0" fill="rgb(210,55,46)" rx="2" ry="2" />
<text  x="716.39" y="1839.5" ></text>
</g>
<g >
<title>TDocument::TDocument (2 samples, 0.03%)</title><rect x="344.3" y="2005" width="0.3" height="15.0" fill="rgb(248,173,3)" rx="2" ry="2" />
<text  x="347.29" y="2015.5" ></text>
</g>
<g >
<title>GetHost (157 samples, 2.38%)</title><rect x="105.2" y="1973" width="28.0" height="15.0" fill="rgb(233,83,31)" rx="2" ry="2" />
<text  x="108.18" y="1983.5" >G..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1429" width="0.2" height="15.0" fill="rgb(223,48,25)" rx="2" ry="2" />
<text  x="203.18" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1397" width="0.2" height="15.0" fill="rgb(218,169,10)" rx="2" ry="2" />
<text  x="1170.14" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="200.4" y="1717" width="0.3" height="15.0" fill="rgb(247,109,29)" rx="2" ry="2" />
<text  x="203.36" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="885" width="0.2" height="15.0" fill="rgb(215,81,12)" rx="2" ry="2" />
<text  x="203.54" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1493" width="0.2" height="15.0" fill="rgb(230,98,28)" rx="2" ry="2" />
<text  x="1170.14" y="1503.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.02%)</title><rect x="436.1" y="1845" width="0.1" height="15.0" fill="rgb(252,157,9)" rx="2" ry="2" />
<text  x="439.07" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="613" width="0.2" height="15.0" fill="rgb(215,125,25)" rx="2" ry="2" />
<text  x="1170.32" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="885" width="0.2" height="15.0" fill="rgb(247,170,8)" rx="2" ry="2" />
<text  x="1170.14" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1301" width="0.1" height="15.0" fill="rgb(223,167,18)" rx="2" ry="2" />
<text  x="1169.96" y="1311.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="596.1" y="2005" width="0.1" height="15.0" fill="rgb(247,55,8)" rx="2" ry="2" />
<text  x="599.07" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1589" width="0.4" height="15.0" fill="rgb(252,77,23)" rx="2" ry="2" />
<text  x="1170.50" y="1599.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char@plt (1 samples, 0.02%)</title><rect x="606.1" y="1893" width="0.1" height="15.0" fill="rgb(217,80,48)" rx="2" ry="2" />
<text  x="609.07" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1237" width="0.1" height="15.0" fill="rgb(210,132,38)" rx="2" ry="2" />
<text  x="1169.96" y="1247.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="172.1" y="1573" width="0.2" height="15.0" fill="rgb(214,54,11)" rx="2" ry="2" />
<text  x="175.14" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="821" width="0.2" height="15.0" fill="rgb(253,129,35)" rx="2" ry="2" />
<text  x="1170.14" y="831.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="191.4" y="1669" width="0.4" height="15.0" fill="rgb(244,215,7)" rx="2" ry="2" />
<text  x="194.43" y="1679.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.02%)</title><rect x="591.6" y="1973" width="0.2" height="15.0" fill="rgb(205,52,4)" rx="2" ry="2" />
<text  x="594.61" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (29 samples, 0.44%)</title><rect x="152.0" y="1685" width="5.1" height="15.0" fill="rgb(211,83,29)" rx="2" ry="2" />
<text  x="154.96" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1525" width="0.2" height="15.0" fill="rgb(239,181,18)" rx="2" ry="2" />
<text  x="1170.14" y="1535.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="211.4" y="1973" width="0.2" height="15.0" fill="rgb(240,4,36)" rx="2" ry="2" />
<text  x="214.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1253" width="0.2" height="15.0" fill="rgb(240,9,9)" rx="2" ry="2" />
<text  x="203.18" y="1263.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="158.2" y="1685" width="0.2" height="15.0" fill="rgb(234,105,53)" rx="2" ry="2" />
<text  x="161.21" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="741" width="0.1" height="15.0" fill="rgb(249,1,48)" rx="2" ry="2" />
<text  x="1169.96" y="751.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.05%)</title><rect x="180.7" y="1637" width="0.5" height="15.0" fill="rgb(226,12,26)" rx="2" ry="2" />
<text  x="183.71" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1141" width="0.2" height="15.0" fill="rgb(216,208,49)" rx="2" ry="2" />
<text  x="1170.14" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="389" width="0.1" height="15.0" fill="rgb(245,12,23)" rx="2" ry="2" />
<text  x="1169.96" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1861" width="0.2" height="15.0" fill="rgb(251,53,18)" rx="2" ry="2" />
<text  x="1170.14" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="661" width="0.1" height="15.0" fill="rgb(218,67,4)" rx="2" ry="2" />
<text  x="1169.96" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.09%)</title><rect x="199.6" y="1941" width="1.1" height="15.0" fill="rgb(207,211,48)" rx="2" ry="2" />
<text  x="202.64" y="1951.5" ></text>
</g>
<g >
<title>TNewsCluster::GetFreshestTimestamp (1 samples, 0.02%)</title><rect x="344.6" y="2005" width="0.2" height="15.0" fill="rgb(214,101,8)" rx="2" ry="2" />
<text  x="347.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="421" width="0.2" height="15.0" fill="rgb(224,91,8)" rx="2" ry="2" />
<text  x="1170.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1637" width="0.2" height="15.0" fill="rgb(251,122,9)" rx="2" ry="2" />
<text  x="136.04" y="1647.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (17 samples, 0.26%)</title><rect x="572.3" y="1973" width="3.1" height="15.0" fill="rgb(245,133,29)" rx="2" ry="2" />
<text  x="575.32" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (33 samples, 0.50%)</title><rect x="167.7" y="1733" width="5.9" height="15.0" fill="rgb(243,50,37)" rx="2" ry="2" />
<text  x="170.68" y="1743.5" ></text>
</g>
<g >
<title>scsi_io_completion (1 samples, 0.02%)</title><rect x="713.2" y="1749" width="0.2" height="15.0" fill="rgb(243,129,44)" rx="2" ry="2" />
<text  x="716.21" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (29 samples, 0.44%)</title><rect x="168.2" y="1637" width="5.2" height="15.0" fill="rgb(218,132,5)" rx="2" ry="2" />
<text  x="171.21" y="1647.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (1 samples, 0.02%)</title><rect x="625.7" y="1893" width="0.2" height="15.0" fill="rgb(249,62,21)" rx="2" ry="2" />
<text  x="628.71" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="805" width="0.1" height="15.0" fill="rgb(219,108,12)" rx="2" ry="2" />
<text  x="1169.96" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1829" width="0.1" height="15.0" fill="rgb(231,50,29)" rx="2" ry="2" />
<text  x="1169.96" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1557" width="0.2" height="15.0" fill="rgb(213,62,40)" rx="2" ry="2" />
<text  x="136.04" y="1567.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="38.9" y="1957" width="0.2" height="15.0" fill="rgb(217,60,52)" rx="2" ry="2" />
<text  x="41.93" y="1967.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (4 samples, 0.06%)</title><rect x="130.9" y="1685" width="0.7" height="15.0" fill="rgb(214,103,17)" rx="2" ry="2" />
<text  x="133.89" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="485" width="0.4" height="15.0" fill="rgb(231,173,20)" rx="2" ry="2" />
<text  x="1170.50" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="595.7" y="1989" width="0.4" height="15.0" fill="rgb(242,202,0)" rx="2" ry="2" />
<text  x="598.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1237" width="0.2" height="15.0" fill="rgb(231,165,8)" rx="2" ry="2" />
<text  x="1170.14" y="1247.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.05%)</title><rect x="852.5" y="1973" width="0.5" height="15.0" fill="rgb(238,152,42)" rx="2" ry="2" />
<text  x="855.50" y="1983.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="131.6" y="1701" width="0.2" height="15.0" fill="rgb(209,61,29)" rx="2" ry="2" />
<text  x="134.61" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1749" width="0.4" height="15.0" fill="rgb(207,136,5)" rx="2" ry="2" />
<text  x="1170.50" y="1759.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="926.4" y="2037" width="0.2" height="15.0" fill="rgb(244,175,9)" rx="2" ry="2" />
<text  x="929.43" y="2047.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="1042.7" y="2021" width="0.2" height="15.0" fill="rgb(212,150,23)" rx="2" ry="2" />
<text  x="1045.68" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1445" width="0.4" height="15.0" fill="rgb(213,61,43)" rx="2" ry="2" />
<text  x="1170.50" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1733" width="0.5" height="15.0" fill="rgb(227,60,1)" rx="2" ry="2" />
<text  x="88.00" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="165" width="0.4" height="15.0" fill="rgb(250,109,38)" rx="2" ry="2" />
<text  x="1170.50" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (35 samples, 0.53%)</title><rect x="185.9" y="1781" width="6.2" height="15.0" fill="rgb(245,82,42)" rx="2" ry="2" />
<text  x="188.89" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="981" width="0.5" height="15.0" fill="rgb(232,49,48)" rx="2" ry="2" />
<text  x="88.00" y="991.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDocument*, __gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_0&gt; &gt; (1 samples, 0.02%)</title><rect x="598.0" y="1973" width="0.2" height="15.0" fill="rgb(232,20,16)" rx="2" ry="2" />
<text  x="601.04" y="1983.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="150.4" y="1605" width="0.1" height="15.0" fill="rgb(252,200,51)" rx="2" ry="2" />
<text  x="153.36" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (1 samples, 0.02%)</title><rect x="185.5" y="1653" width="0.2" height="15.0" fill="rgb(243,34,2)" rx="2" ry="2" />
<text  x="188.54" y="1663.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="713.2" y="1813" width="0.2" height="15.0" fill="rgb(209,10,9)" rx="2" ry="2" />
<text  x="716.21" y="1823.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.02%)</title><rect x="852.9" y="1909" width="0.1" height="15.0" fill="rgb(220,102,10)" rx="2" ry="2" />
<text  x="855.86" y="1919.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (1 samples, 0.02%)</title><rect x="116.6" y="1605" width="0.2" height="15.0" fill="rgb(251,45,41)" rx="2" ry="2" />
<text  x="119.61" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1413" width="0.2" height="15.0" fill="rgb(222,41,2)" rx="2" ry="2" />
<text  x="1170.14" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="101" width="0.2" height="15.0" fill="rgb(232,215,45)" rx="2" ry="2" />
<text  x="1170.32" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="853" width="0.2" height="15.0" fill="rgb(245,103,50)" rx="2" ry="2" />
<text  x="1170.32" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="165.4" y="1509" width="0.3" height="15.0" fill="rgb(241,197,3)" rx="2" ry="2" />
<text  x="168.36" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (29 samples, 0.44%)</title><rect x="127.3" y="1813" width="5.2" height="15.0" fill="rgb(214,225,38)" rx="2" ry="2" />
<text  x="130.32" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (2 samples, 0.03%)</title><rect x="89.5" y="2021" width="0.3" height="15.0" fill="rgb(254,52,28)" rx="2" ry="2" />
<text  x="92.46" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1141" width="0.1" height="15.0" fill="rgb(231,77,27)" rx="2" ry="2" />
<text  x="1169.96" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1365" width="0.2" height="15.0" fill="rgb(228,199,21)" rx="2" ry="2" />
<text  x="1170.32" y="1375.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1 samples, 0.02%)</title><rect x="595.9" y="1845" width="0.2" height="15.0" fill="rgb(254,89,38)" rx="2" ry="2" />
<text  x="598.89" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="277" width="0.2" height="15.0" fill="rgb(231,216,33)" rx="2" ry="2" />
<text  x="136.04" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (2 samples, 0.03%)</title><rect x="1145.4" y="2053" width="0.3" height="15.0" fill="rgb(210,115,44)" rx="2" ry="2" />
<text  x="1148.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1285" width="0.2" height="15.0" fill="rgb(208,144,1)" rx="2" ry="2" />
<text  x="1170.14" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (36 samples, 0.54%)</title><rect x="133.8" y="1605" width="6.4" height="15.0" fill="rgb(230,41,20)" rx="2" ry="2" />
<text  x="136.75" y="1615.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (1 samples, 0.02%)</title><rect x="139.1" y="1573" width="0.2" height="15.0" fill="rgb(217,132,14)" rx="2" ry="2" />
<text  x="142.11" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (122 samples, 1.85%)</title><rect x="105.4" y="1797" width="21.7" height="15.0" fill="rgb(207,219,22)" rx="2" ry="2" />
<text  x="108.36" y="1807.5" >s..</text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (1 samples, 0.02%)</title><rect x="139.3" y="1573" width="0.2" height="15.0" fill="rgb(246,81,16)" rx="2" ry="2" />
<text  x="142.29" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="117" width="0.2" height="15.0" fill="rgb(205,98,34)" rx="2" ry="2" />
<text  x="1170.14" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="277" width="0.1" height="15.0" fill="rgb(248,61,34)" rx="2" ry="2" />
<text  x="1169.96" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="373" width="0.4" height="15.0" fill="rgb(212,225,17)" rx="2" ry="2" />
<text  x="1170.50" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1653" width="0.2" height="15.0" fill="rgb(250,84,22)" rx="2" ry="2" />
<text  x="203.18" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1589" width="0.2" height="15.0" fill="rgb(219,46,23)" rx="2" ry="2" />
<text  x="203.54" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="101" width="0.2" height="15.0" fill="rgb(230,180,43)" rx="2" ry="2" />
<text  x="1170.14" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="2005" width="0.2" height="15.0" fill="rgb(214,150,0)" rx="2" ry="2" />
<text  x="1170.32" y="2015.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.26%)</title><rect x="43.8" y="2005" width="3.0" height="15.0" fill="rgb(238,85,47)" rx="2" ry="2" />
<text  x="46.75" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="917" width="0.2" height="15.0" fill="rgb(207,142,8)" rx="2" ry="2" />
<text  x="1170.14" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (32 samples, 0.48%)</title><rect x="105.4" y="1669" width="5.7" height="15.0" fill="rgb(241,11,16)" rx="2" ry="2" />
<text  x="108.36" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="645" width="0.2" height="15.0" fill="rgb(250,166,42)" rx="2" ry="2" />
<text  x="136.04" y="655.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="805" width="0.3" height="15.0" fill="rgb(225,137,4)" rx="2" ry="2" />
<text  x="88.18" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="1429" width="0.1" height="15.0" fill="rgb(250,185,20)" rx="2" ry="2" />
<text  x="1169.96" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1237" width="0.2" height="15.0" fill="rgb(212,132,53)" rx="2" ry="2" />
<text  x="203.18" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="565" width="0.2" height="15.0" fill="rgb(232,32,28)" rx="2" ry="2" />
<text  x="203.18" y="575.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (4 samples, 0.06%)</title><rect x="155.9" y="1637" width="0.7" height="15.0" fill="rgb(217,132,36)" rx="2" ry="2" />
<text  x="158.89" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="837" width="0.1" height="15.0" fill="rgb(249,60,53)" rx="2" ry="2" />
<text  x="1169.96" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (36 samples, 0.54%)</title><rect x="173.6" y="1669" width="6.4" height="15.0" fill="rgb(233,178,2)" rx="2" ry="2" />
<text  x="176.57" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1269" width="0.2" height="15.0" fill="rgb(245,201,34)" rx="2" ry="2" />
<text  x="136.04" y="1279.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.03%)</title><rect x="171.8" y="1573" width="0.3" height="15.0" fill="rgb(247,106,2)" rx="2" ry="2" />
<text  x="174.79" y="1583.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.02%)</title><rect x="344.5" y="1877" width="0.1" height="15.0" fill="rgb(226,88,50)" rx="2" ry="2" />
<text  x="347.46" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="165.5" y="1413" width="0.2" height="15.0" fill="rgb(228,172,22)" rx="2" ry="2" />
<text  x="168.54" y="1423.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (3 samples, 0.05%)</title><rect x="95.7" y="1925" width="0.5" height="15.0" fill="rgb(210,186,30)" rx="2" ry="2" />
<text  x="98.71" y="1935.5" ></text>
</g>
<g >
<title>new_sync_read (4 samples, 0.06%)</title><rect x="89.8" y="1925" width="0.7" height="15.0" fill="rgb(229,1,29)" rx="2" ry="2" />
<text  x="92.82" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (1 samples, 0.02%)</title><rect x="875.7" y="2005" width="0.2" height="15.0" fill="rgb(212,172,40)" rx="2" ry="2" />
<text  x="878.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="165.4" y="1909" width="0.3" height="15.0" fill="rgb(213,14,6)" rx="2" ry="2" />
<text  x="168.36" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (1 samples, 0.02%)</title><rect x="132.3" y="1797" width="0.2" height="15.0" fill="rgb(216,92,41)" rx="2" ry="2" />
<text  x="135.32" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="677" width="0.2" height="15.0" fill="rgb(238,145,8)" rx="2" ry="2" />
<text  x="1170.14" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1445" width="0.1" height="15.0" fill="rgb(211,213,54)" rx="2" ry="2" />
<text  x="1169.96" y="1455.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="181.2" y="1637" width="0.2" height="15.0" fill="rgb(210,5,1)" rx="2" ry="2" />
<text  x="184.25" y="1647.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1 samples, 0.02%)</title><rect x="926.4" y="1893" width="0.2" height="15.0" fill="rgb(233,40,21)" rx="2" ry="2" />
<text  x="929.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1573" width="0.2" height="15.0" fill="rgb(244,110,11)" rx="2" ry="2" />
<text  x="1170.32" y="1583.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (10 samples, 0.15%)</title><rect x="851.2" y="2037" width="1.8" height="15.0" fill="rgb(220,165,3)" rx="2" ry="2" />
<text  x="854.25" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="661" width="0.2" height="15.0" fill="rgb(236,142,49)" rx="2" ry="2" />
<text  x="203.54" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="725" width="0.2" height="15.0" fill="rgb(254,3,42)" rx="2" ry="2" />
<text  x="136.04" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="2005" width="0.1" height="15.0" fill="rgb(206,128,16)" rx="2" ry="2" />
<text  x="1169.96" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (36 samples, 0.54%)</title><rect x="192.3" y="1797" width="6.5" height="15.0" fill="rgb(211,187,47)" rx="2" ry="2" />
<text  x="195.32" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="549" width="0.1" height="15.0" fill="rgb(230,110,32)" rx="2" ry="2" />
<text  x="1169.96" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1541" width="0.4" height="15.0" fill="rgb(243,218,33)" rx="2" ry="2" />
<text  x="1170.50" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="117" width="0.2" height="15.0" fill="rgb(210,127,29)" rx="2" ry="2" />
<text  x="1170.32" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="725" width="0.2" height="15.0" fill="rgb(246,194,26)" rx="2" ry="2" />
<text  x="203.18" y="735.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5 samples, 0.08%)</title><rect x="83.9" y="1957" width="0.9" height="15.0" fill="rgb(224,169,28)" rx="2" ry="2" />
<text  x="86.93" y="1967.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.02%)</title><rect x="598.6" y="1957" width="0.2" height="15.0" fill="rgb(248,196,13)" rx="2" ry="2" />
<text  x="601.57" y="1967.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.06%)</title><rect x="168.8" y="1589" width="0.7" height="15.0" fill="rgb(214,166,34)" rx="2" ry="2" />
<text  x="171.75" y="1599.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="621.2" y="1861" width="0.4" height="15.0" fill="rgb(237,224,5)" rx="2" ry="2" />
<text  x="624.25" y="1871.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="198.8" y="1877" width="0.1" height="15.0" fill="rgb(212,73,0)" rx="2" ry="2" />
<text  x="201.75" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1013" width="0.5" height="15.0" fill="rgb(210,50,29)" rx="2" ry="2" />
<text  x="88.00" y="1023.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.02%)</title><rect x="595.7" y="1861" width="0.2" height="15.0" fill="rgb(235,93,17)" rx="2" ry="2" />
<text  x="598.71" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1189" width="0.2" height="15.0" fill="rgb(245,109,52)" rx="2" ry="2" />
<text  x="203.18" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="437" width="0.4" height="15.0" fill="rgb(222,85,1)" rx="2" ry="2" />
<text  x="1170.50" y="447.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="53" width="0.3" height="15.0" fill="rgb(249,184,18)" rx="2" ry="2" />
<text  x="88.18" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.5" y="1125" width="0.2" height="15.0" fill="rgb(253,100,40)" rx="2" ry="2" />
<text  x="203.54" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="2053" width="0.4" height="15.0" fill="rgb(208,7,42)" rx="2" ry="2" />
<text  x="1170.50" y="2063.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.03%)</title><rect x="713.4" y="1813" width="0.4" height="15.0" fill="rgb(232,94,15)" rx="2" ry="2" />
<text  x="716.39" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (3 samples, 0.05%)</title><rect x="1135.0" y="2053" width="0.5" height="15.0" fill="rgb(208,152,11)" rx="2" ry="2" />
<text  x="1138.00" y="2063.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="144.1" y="1605" width="0.2" height="15.0" fill="rgb(253,115,46)" rx="2" ry="2" />
<text  x="147.11" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1093" width="0.2" height="15.0" fill="rgb(205,21,14)" rx="2" ry="2" />
<text  x="203.18" y="1103.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="132.7" y="1797" width="0.2" height="15.0" fill="rgb(213,152,34)" rx="2" ry="2" />
<text  x="135.68" y="1807.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (82 samples, 1.24%)</title><rect x="927.3" y="2053" width="14.7" height="15.0" fill="rgb(206,63,29)" rx="2" ry="2" />
<text  x="930.32" y="2063.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.02%)</title><rect x="595.9" y="1829" width="0.2" height="15.0" fill="rgb(215,226,7)" rx="2" ry="2" />
<text  x="598.89" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="837" width="0.3" height="15.0" fill="rgb(214,172,30)" rx="2" ry="2" />
<text  x="88.18" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="597.3" y="1909" width="0.2" height="15.0" fill="rgb(213,205,20)" rx="2" ry="2" />
<text  x="600.32" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1813" width="0.4" height="15.0" fill="rgb(227,72,51)" rx="2" ry="2" />
<text  x="1170.50" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="200.4" y="1733" width="0.3" height="15.0" fill="rgb(242,22,33)" rx="2" ry="2" />
<text  x="203.36" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1269" width="0.2" height="15.0" fill="rgb(210,75,24)" rx="2" ry="2" />
<text  x="203.18" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1877" width="0.2" height="15.0" fill="rgb(222,52,41)" rx="2" ry="2" />
<text  x="1170.14" y="1887.5" ></text>
</g>
<g >
<title>all (6,608 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(239,119,33)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="901" width="0.3" height="15.0" fill="rgb(209,77,18)" rx="2" ry="2" />
<text  x="88.18" y="911.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::PlainObjectBase&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, 0&gt; &gt; (1 samples, 0.02%)</title><rect x="167.0" y="1989" width="0.1" height="15.0" fill="rgb(228,69,21)" rx="2" ry="2" />
<text  x="169.96" y="1999.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.03%)</title><rect x="138.2" y="1557" width="0.4" height="15.0" fill="rgb(234,218,29)" rx="2" ry="2" />
<text  x="141.21" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1717" width="0.2" height="15.0" fill="rgb(241,135,26)" rx="2" ry="2" />
<text  x="136.04" y="1727.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.03%)</title><rect x="114.3" y="1605" width="0.3" height="15.0" fill="rgb(212,108,34)" rx="2" ry="2" />
<text  x="117.29" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.2" y="1029" width="0.2" height="15.0" fill="rgb(238,53,42)" rx="2" ry="2" />
<text  x="203.18" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1237" width="0.2" height="15.0" fill="rgb(206,78,48)" rx="2" ry="2" />
<text  x="1170.32" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.1" y="1269" width="0.2" height="15.0" fill="rgb(217,18,35)" rx="2" ry="2" />
<text  x="1170.14" y="1279.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (1 samples, 0.02%)</title><rect x="130.7" y="1685" width="0.2" height="15.0" fill="rgb(253,62,20)" rx="2" ry="2" />
<text  x="133.71" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (35 samples, 0.53%)</title><rect x="185.9" y="1733" width="6.2" height="15.0" fill="rgb(218,163,16)" rx="2" ry="2" />
<text  x="188.89" y="1743.5" ></text>
</g>
<g >
<title>scsi_softirq_done (1 samples, 0.02%)</title><rect x="713.2" y="1781" width="0.2" height="15.0" fill="rgb(235,97,24)" rx="2" ry="2" />
<text  x="716.21" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (103 samples, 1.56%)</title><rect x="167.5" y="1781" width="18.4" height="15.0" fill="rgb(208,101,27)" rx="2" ry="2" />
<text  x="170.50" y="1791.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="852.5" y="1941" width="0.2" height="15.0" fill="rgb(242,124,49)" rx="2" ry="2" />
<text  x="855.50" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1141" width="0.5" height="15.0" fill="rgb(230,115,16)" rx="2" ry="2" />
<text  x="88.00" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="1541" width="0.2" height="15.0" fill="rgb(229,139,49)" rx="2" ry="2" />
<text  x="136.04" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="885" width="0.2" height="15.0" fill="rgb(212,10,13)" rx="2" ry="2" />
<text  x="203.18" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (1 samples, 0.02%)</title><rect x="185.7" y="1701" width="0.2" height="15.0" fill="rgb(209,155,37)" rx="2" ry="2" />
<text  x="188.71" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (1 samples, 0.02%)</title><rect x="140.0" y="1573" width="0.2" height="15.0" fill="rgb(250,57,40)" rx="2" ry="2" />
<text  x="143.00" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="1653" width="0.2" height="15.0" fill="rgb(231,215,17)" rx="2" ry="2" />
<text  x="203.54" y="1663.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;@plt (4 samples, 0.06%)</title><rect x="343.2" y="1989" width="0.7" height="15.0" fill="rgb(233,144,23)" rx="2" ry="2" />
<text  x="346.21" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1925" width="0.4" height="15.0" fill="rgb(232,163,46)" rx="2" ry="2" />
<text  x="1170.50" y="1935.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.12%)</title><rect x="144.5" y="1621" width="1.4" height="15.0" fill="rgb(225,97,34)" rx="2" ry="2" />
<text  x="147.46" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1509" width="0.5" height="15.0" fill="rgb(208,69,7)" rx="2" ry="2" />
<text  x="88.00" y="1519.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.06%)</title><rect x="162.9" y="1669" width="0.7" height="15.0" fill="rgb(250,206,52)" rx="2" ry="2" />
<text  x="165.86" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1925" width="0.2" height="15.0" fill="rgb(207,174,45)" rx="2" ry="2" />
<text  x="1170.14" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1301" width="0.2" height="15.0" fill="rgb(214,151,2)" rx="2" ry="2" />
<text  x="168.54" y="1311.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (1 samples, 0.02%)</title><rect x="91.1" y="1989" width="0.1" height="15.0" fill="rgb(239,99,1)" rx="2" ry="2" />
<text  x="94.07" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="661" width="0.2" height="15.0" fill="rgb(207,150,3)" rx="2" ry="2" />
<text  x="1170.32" y="671.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1429" width="0.5" height="15.0" fill="rgb(248,4,1)" rx="2" ry="2" />
<text  x="88.00" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1909" width="0.4" height="15.0" fill="rgb(239,133,19)" rx="2" ry="2" />
<text  x="1170.50" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (104 samples, 1.57%)</title><rect x="133.2" y="1765" width="18.6" height="15.0" fill="rgb(243,47,48)" rx="2" ry="2" />
<text  x="136.21" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (31 samples, 0.47%)</title><rect x="862.3" y="2037" width="5.6" height="15.0" fill="rgb(207,119,40)" rx="2" ry="2" />
<text  x="865.32" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="997" width="0.4" height="15.0" fill="rgb(212,86,27)" rx="2" ry="2" />
<text  x="1170.50" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="149" width="0.4" height="15.0" fill="rgb(246,133,25)" rx="2" ry="2" />
<text  x="1170.50" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="200.4" y="1749" width="0.3" height="15.0" fill="rgb(235,43,27)" rx="2" ry="2" />
<text  x="203.36" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1525" width="0.4" height="15.0" fill="rgb(243,203,37)" rx="2" ry="2" />
<text  x="1170.50" y="1535.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (19 samples, 0.29%)</title><rect x="43.4" y="2037" width="3.4" height="15.0" fill="rgb(238,71,28)" rx="2" ry="2" />
<text  x="46.39" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (167 samples, 2.53%)</title><rect x="715.0" y="1877" width="29.8" height="15.0" fill="rgb(221,126,1)" rx="2" ry="2" />
<text  x="718.00" y="1887.5" >on..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="357" width="0.2" height="15.0" fill="rgb(240,228,52)" rx="2" ry="2" />
<text  x="1170.32" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1989" width="0.4" height="15.0" fill="rgb(234,187,49)" rx="2" ry="2" />
<text  x="1170.50" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.1" y="1253" width="0.2" height="15.0" fill="rgb(232,5,1)" rx="2" ry="2" />
<text  x="1170.14" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (29 samples, 0.44%)</title><rect x="168.2" y="1621" width="5.2" height="15.0" fill="rgb(237,197,25)" rx="2" ry="2" />
<text  x="171.21" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (24 samples, 0.36%)</title><rect x="140.2" y="1685" width="4.3" height="15.0" fill="rgb(247,99,12)" rx="2" ry="2" />
<text  x="143.18" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1301" width="0.2" height="15.0" fill="rgb(246,153,41)" rx="2" ry="2" />
<text  x="203.18" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (42 samples, 0.64%)</title><rect x="157.1" y="1717" width="7.5" height="15.0" fill="rgb(226,172,12)" rx="2" ry="2" />
<text  x="160.14" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.03%)</title><rect x="1167.5" y="1349" width="0.4" height="15.0" fill="rgb(253,65,18)" rx="2" ry="2" />
<text  x="1170.50" y="1359.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (3 samples, 0.05%)</title><rect x="991.2" y="2053" width="0.6" height="15.0" fill="rgb(219,4,51)" rx="2" ry="2" />
<text  x="994.25" y="2063.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="151.6" y="1621" width="0.2" height="15.0" fill="rgb(211,162,51)" rx="2" ry="2" />
<text  x="154.61" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.02%)</title><rect x="161.2" y="1669" width="0.2" height="15.0" fill="rgb(245,212,11)" rx="2" ry="2" />
<text  x="164.25" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1013" width="0.2" height="15.0" fill="rgb(234,44,51)" rx="2" ry="2" />
<text  x="136.04" y="1023.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="159.5" y="1653" width="0.1" height="15.0" fill="rgb(239,181,49)" rx="2" ry="2" />
<text  x="162.46" y="1663.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (16 samples, 0.24%)</title><rect x="876.2" y="2053" width="2.9" height="15.0" fill="rgb(210,167,28)" rx="2" ry="2" />
<text  x="879.25" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.3" y="1989" width="0.2" height="15.0" fill="rgb(206,42,7)" rx="2" ry="2" />
<text  x="1170.32" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (30 samples, 0.45%)</title><rect x="168.0" y="1653" width="5.4" height="15.0" fill="rgb(209,72,16)" rx="2" ry="2" />
<text  x="171.04" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="501" width="0.1" height="15.0" fill="rgb(210,123,20)" rx="2" ry="2" />
<text  x="1169.96" y="511.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (1 samples, 0.02%)</title><rect x="848.2" y="1957" width="0.2" height="15.0" fill="rgb(252,218,13)" rx="2" ry="2" />
<text  x="851.21" y="1967.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (3 samples, 0.05%)</title><rect x="753.4" y="1893" width="0.5" height="15.0" fill="rgb(252,112,34)" rx="2" ry="2" />
<text  x="756.39" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.3" y="1589" width="0.2" height="15.0" fill="rgb(214,225,17)" rx="2" ry="2" />
<text  x="1170.32" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="661" width="0.2" height="15.0" fill="rgb(212,197,43)" rx="2" ry="2" />
<text  x="203.18" y="671.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="869" width="0.3" height="15.0" fill="rgb(239,72,11)" rx="2" ry="2" />
<text  x="88.18" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="581" width="0.2" height="15.0" fill="rgb(237,179,20)" rx="2" ry="2" />
<text  x="136.04" y="591.5" ></text>
</g>
<g >
<title>try_to_wake_up (13 samples, 0.20%)</title><rect x="44.1" y="1909" width="2.3" height="15.0" fill="rgb(228,115,39)" rx="2" ry="2" />
<text  x="47.11" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="133.0" y="1589" width="0.2" height="15.0" fill="rgb(207,202,14)" rx="2" ry="2" />
<text  x="136.04" y="1599.5" ></text>
</g>
<g >
<title>__libc_read (4 samples, 0.06%)</title><rect x="89.8" y="2037" width="0.7" height="15.0" fill="rgb(212,58,20)" rx="2" ry="2" />
<text  x="92.82" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1349" width="0.1" height="15.0" fill="rgb(229,156,4)" rx="2" ry="2" />
<text  x="1169.96" y="1359.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform@plt (1 samples, 0.02%)</title><rect x="1146.8" y="2053" width="0.2" height="15.0" fill="rgb(237,31,5)" rx="2" ry="2" />
<text  x="1149.79" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="1167.0" y="1637" width="0.1" height="15.0" fill="rgb(244,25,31)" rx="2" ry="2" />
<text  x="1169.96" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="133.0" y="293" width="0.2" height="15.0" fill="rgb(244,138,23)" rx="2" ry="2" />
<text  x="136.04" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="1167.0" y="757" width="0.1" height="15.0" fill="rgb(251,16,11)" rx="2" ry="2" />
<text  x="1169.96" y="767.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.03%)</title><rect x="172.9" y="1589" width="0.3" height="15.0" fill="rgb(220,152,5)" rx="2" ry="2" />
<text  x="175.86" y="1599.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.02%)</title><rect x="89.6" y="1989" width="0.2" height="15.0" fill="rgb(235,128,0)" rx="2" ry="2" />
<text  x="92.64" y="1999.5" ></text>
</g>
<g >
<title>Rank (343 samples, 5.19%)</title><rect x="105.2" y="2005" width="61.2" height="15.0" fill="rgb(254,97,20)" rx="2" ry="2" />
<text  x="108.18" y="2015.5" >Rank</text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="261" width="0.3" height="15.0" fill="rgb(208,47,25)" rx="2" ry="2" />
<text  x="88.18" y="271.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.02%)</title><rect x="602.9" y="1909" width="0.1" height="15.0" fill="rgb(211,109,47)" rx="2" ry="2" />
<text  x="605.86" y="1919.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt;@plt (1 samples, 0.02%)</title><rect x="163.9" y="1669" width="0.2" height="15.0" fill="rgb(206,113,51)" rx="2" ry="2" />
<text  x="166.93" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="165.5" y="1365" width="0.2" height="15.0" fill="rgb(224,163,53)" rx="2" ry="2" />
<text  x="168.54" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.05%)</title><rect x="85.0" y="1541" width="0.5" height="15.0" fill="rgb(232,215,19)" rx="2" ry="2" />
<text  x="88.00" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (1 samples, 0.02%)</title><rect x="200.5" y="757" width="0.2" height="15.0" fill="rgb(243,65,33)" rx="2" ry="2" />
<text  x="203.54" y="767.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="389" width="0.3" height="15.0" fill="rgb(206,105,43)" rx="2" ry="2" />
<text  x="88.18" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (36 samples, 0.54%)</title><rect x="173.6" y="1685" width="6.4" height="15.0" fill="rgb(218,12,6)" rx="2" ry="2" />
<text  x="176.57" y="1695.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.02%)</title><rect x="595.9" y="1877" width="0.2" height="15.0" fill="rgb(205,229,52)" rx="2" ry="2" />
<text  x="598.89" y="1887.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="844.5" y="1909" width="0.3" height="15.0" fill="rgb(243,20,53)" rx="2" ry="2" />
<text  x="847.46" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (152 samples, 2.30%)</title><rect x="105.4" y="1877" width="27.1" height="15.0" fill="rgb(207,183,39)" rx="2" ry="2" />
<text  x="108.36" y="1887.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.02%)</title><rect x="200.2" y="1365" width="0.2" height="15.0" fill="rgb(247,122,1)" rx="2" ry="2" />
<text  x="203.18" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="85.2" y="133" width="0.3" height="15.0" fill="rgb(233,2,37)" rx="2" ry="2" />
<text  x="88.18" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.03%)</title><rect x="1167.5" y="1205" width="0.4" height="15.0" fill="rgb(208,60,1)" rx="2" ry="2" />
<text  x="1170.50" y="1215.5" ></text>
</g>
</g>
</svg>
