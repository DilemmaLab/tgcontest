<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1829" width="0.1" height="15.0" fill="rgb(237,1,50)" rx="2" ry="2" />
<text  x="161.98" y="1839.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="170.9" y="1589" width="0.1" height="15.0" fill="rgb(245,174,11)" rx="2" ry="2" />
<text  x="173.89" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1381" width="0.3" height="15.0" fill="rgb(227,206,37)" rx="2" ry="2" />
<text  x="219.46" y="1391.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="82.3" y="1333" width="0.1" height="15.0" fill="rgb(228,229,26)" rx="2" ry="2" />
<text  x="85.28" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1109" width="0.1" height="15.0" fill="rgb(238,150,39)" rx="2" ry="2" />
<text  x="57.98" y="1119.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="570.6" y="1829" width="0.1" height="15.0" fill="rgb(237,221,3)" rx="2" ry="2" />
<text  x="573.61" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="757" width="0.2" height="15.0" fill="rgb(206,72,21)" rx="2" ry="2" />
<text  x="1190.29" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (79 samples, 0.39%)</title><rect x="152.8" y="1701" width="4.6" height="15.0" fill="rgb(217,139,21)" rx="2" ry="2" />
<text  x="155.79" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1429" width="0.2" height="15.0" fill="rgb(229,22,33)" rx="2" ry="2" />
<text  x="1190.29" y="1439.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,209 samples, 6.04%)</title><rect x="877.9" y="2053" width="71.3" height="15.0" fill="rgb(217,214,24)" rx="2" ry="2" />
<text  x="880.95" y="2063.5" >__asan::..</text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.01%)</title><rect x="196.2" y="1589" width="0.2" height="15.0" fill="rgb(205,48,5)" rx="2" ry="2" />
<text  x="199.24" y="1599.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="875.3" y="2021" width="0.1" height="15.0" fill="rgb(232,80,42)" rx="2" ry="2" />
<text  x="878.29" y="2031.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="137.6" y="1605" width="0.1" height="15.0" fill="rgb(215,164,49)" rx="2" ry="2" />
<text  x="140.58" y="1615.5" ></text>
</g>
<g >
<title>__x64_sys_futex (16 samples, 0.08%)</title><rect x="29.6" y="1957" width="1.0" height="15.0" fill="rgb(245,92,5)" rx="2" ry="2" />
<text  x="32.63" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="1893" width="0.5" height="15.0" fill="rgb(245,190,7)" rx="2" ry="2" />
<text  x="1189.29" y="1903.5" ></text>
</g>
<g >
<title>std::istream::read (2 samples, 0.01%)</title><rect x="1187.7" y="2053" width="0.1" height="15.0" fill="rgb(245,64,34)" rx="2" ry="2" />
<text  x="1190.70" y="2063.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Bind&lt;Annotate (3,905 samples, 19.51%)</title><rect x="524.7" y="1989" width="230.2" height="15.0" fill="rgb(227,81,9)" rx="2" ry="2" />
<text  x="527.68" y="1999.5" >std::__invoke&lt;std::_Bind&lt;Annot..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (7 samples, 0.03%)</title><rect x="753.3" y="1909" width="0.4" height="15.0" fill="rgb(215,186,24)" rx="2" ry="2" />
<text  x="756.31" y="1919.5" ></text>
</g>
<g >
<title>smp_call_function_single (21 samples, 0.10%)</title><rect x="947.6" y="1829" width="1.3" height="15.0" fill="rgb(227,102,1)" rx="2" ry="2" />
<text  x="950.63" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="165" width="0.2" height="15.0" fill="rgb(239,163,16)" rx="2" ry="2" />
<text  x="1190.35" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (91 samples, 0.45%)</title><rect x="152.4" y="1749" width="5.3" height="15.0" fill="rgb(219,10,48)" rx="2" ry="2" />
<text  x="155.38" y="1759.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (561 samples, 2.80%)</title><rect x="769.2" y="2037" width="33.1" height="15.0" fill="rgb(227,169,4)" rx="2" ry="2" />
<text  x="772.23" y="2047.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1445" width="0.3" height="15.0" fill="rgb(225,112,24)" rx="2" ry="2" />
<text  x="219.82" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="821" width="0.3" height="15.0" fill="rgb(219,122,25)" rx="2" ry="2" />
<text  x="1189.52" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1141" width="0.2" height="15.0" fill="rgb(248,10,17)" rx="2" ry="2" />
<text  x="1190.29" y="1151.5" ></text>
</g>
<g >
<title>memcpy (4 samples, 0.02%)</title><rect x="598.2" y="1877" width="0.2" height="15.0" fill="rgb(245,135,29)" rx="2" ry="2" />
<text  x="601.20" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.02%)</title><rect x="186.1" y="1797" width="0.3" height="15.0" fill="rgb(237,0,46)" rx="2" ry="2" />
<text  x="189.10" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (59 samples, 0.29%)</title><rect x="742.9" y="1877" width="3.5" height="15.0" fill="rgb(254,174,39)" rx="2" ry="2" />
<text  x="745.88" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1925" width="0.2" height="15.0" fill="rgb(237,142,16)" rx="2" ry="2" />
<text  x="57.98" y="1935.5" ></text>
</g>
<g >
<title>handle_mm_fault (90 samples, 0.45%)</title><rect x="943.7" y="1989" width="5.3" height="15.0" fill="rgb(230,151,39)" rx="2" ry="2" />
<text  x="946.74" y="1999.5" ></text>
</g>
<g >
<title>get_page_from_freelist (4 samples, 0.02%)</title><rect x="945.6" y="1893" width="0.3" height="15.0" fill="rgb(234,24,44)" rx="2" ry="2" />
<text  x="948.63" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (4 samples, 0.02%)</title><rect x="871.8" y="2037" width="0.3" height="15.0" fill="rgb(211,10,9)" rx="2" ry="2" />
<text  x="874.82" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (16 samples, 0.08%)</title><rect x="321.9" y="1941" width="0.9" height="15.0" fill="rgb(231,207,50)" rx="2" ry="2" />
<text  x="324.88" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1493" width="0.3" height="15.0" fill="rgb(231,138,31)" rx="2" ry="2" />
<text  x="1189.52" y="1503.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (61 samples, 0.30%)</title><rect x="807.0" y="2037" width="3.6" height="15.0" fill="rgb(209,166,22)" rx="2" ry="2" />
<text  x="810.02" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="549" width="0.3" height="15.0" fill="rgb(232,87,27)" rx="2" ry="2" />
<text  x="1189.52" y="559.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (2,028 samples, 10.13%)</title><rect x="376.6" y="1973" width="119.5" height="15.0" fill="rgb(248,54,16)" rx="2" ry="2" />
<text  x="379.59" y="1983.5" >TFastTextEmbed..</text>
</g>
<g >
<title>__sanitizer::internal_memmove (8 samples, 0.04%)</title><rect x="1189.1" y="2037" width="0.4" height="15.0" fill="rgb(206,187,6)" rx="2" ry="2" />
<text  x="1192.06" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1269" width="0.3" height="15.0" fill="rgb(223,9,19)" rx="2" ry="2" />
<text  x="190.04" y="1279.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (7 samples, 0.03%)</title><rect x="1102.9" y="2037" width="0.4" height="15.0" fill="rgb(219,214,11)" rx="2" ry="2" />
<text  x="1105.92" y="2047.5" ></text>
</g>
<g >
<title>__handle_mm_fault (16 samples, 0.08%)</title><rect x="678.2" y="1781" width="0.9" height="15.0" fill="rgb(232,29,15)" rx="2" ry="2" />
<text  x="681.20" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1333" width="0.2" height="15.0" fill="rgb(218,190,34)" rx="2" ry="2" />
<text  x="1190.29" y="1343.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (12 samples, 0.06%)</title><rect x="598.4" y="1877" width="0.7" height="15.0" fill="rgb(233,52,1)" rx="2" ry="2" />
<text  x="601.44" y="1887.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (2 samples, 0.01%)</title><rect x="84.1" y="1429" width="0.1" height="15.0" fill="rgb(207,226,19)" rx="2" ry="2" />
<text  x="87.11" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1349" width="0.3" height="15.0" fill="rgb(211,175,37)" rx="2" ry="2" />
<text  x="190.04" y="1359.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.01%)</title><rect x="85.0" y="1493" width="0.1" height="15.0" fill="rgb(215,142,25)" rx="2" ry="2" />
<text  x="87.99" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="405" width="19.7" height="15.0" fill="rgb(242,192,41)" rx="2" ry="2" />
<text  x="58.22" y="415.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="208.2" y="1637" width="0.2" height="15.0" fill="rgb(224,223,44)" rx="2" ry="2" />
<text  x="211.15" y="1647.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.04%)</title><rect x="514.6" y="1989" width="0.5" height="15.0" fill="rgb(248,89,3)" rx="2" ry="2" />
<text  x="517.60" y="1999.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="79.3" y="1237" width="0.1" height="15.0" fill="rgb(227,47,28)" rx="2" ry="2" />
<text  x="82.33" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="245" width="0.3" height="15.0" fill="rgb(239,68,10)" rx="2" ry="2" />
<text  x="1189.52" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (3 samples, 0.01%)</title><rect x="165.0" y="1589" width="0.2" height="15.0" fill="rgb(249,27,4)" rx="2" ry="2" />
<text  x="167.99" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1221" width="0.2" height="15.0" fill="rgb(247,209,13)" rx="2" ry="2" />
<text  x="219.64" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (345 samples, 1.72%)</title><rect x="55.2" y="789" width="20.4" height="15.0" fill="rgb(235,206,27)" rx="2" ry="2" />
<text  x="58.22" y="799.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,298 samples, 6.49%)</title><rect x="401.8" y="1957" width="76.5" height="15.0" fill="rgb(249,165,43)" rx="2" ry="2" />
<text  x="404.82" y="1967.5" >fasttext..</text>
</g>
<g >
<title>[unknown] (331 samples, 1.65%)</title><rect x="55.2" y="229" width="19.5" height="15.0" fill="rgb(225,222,26)" rx="2" ry="2" />
<text  x="58.22" y="239.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="1121.0" y="2037" width="0.1" height="15.0" fill="rgb(227,73,27)" rx="2" ry="2" />
<text  x="1123.96" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (4 samples, 0.02%)</title><rect x="755.6" y="2037" width="0.2" height="15.0" fill="rgb(212,101,54)" rx="2" ry="2" />
<text  x="758.55" y="2047.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (2 samples, 0.01%)</title><rect x="84.1" y="1317" width="0.1" height="15.0" fill="rgb(253,100,36)" rx="2" ry="2" />
<text  x="87.11" y="1327.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (10 samples, 0.05%)</title><rect x="519.9" y="2037" width="0.6" height="15.0" fill="rgb(217,198,50)" rx="2" ry="2" />
<text  x="522.91" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1957" width="0.2" height="15.0" fill="rgb(232,33,38)" rx="2" ry="2" />
<text  x="520.20" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="767.2" y="2021" width="0.4" height="15.0" fill="rgb(209,213,4)" rx="2" ry="2" />
<text  x="770.17" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.02%)</title><rect x="84.7" y="1621" width="0.3" height="15.0" fill="rgb(215,156,0)" rx="2" ry="2" />
<text  x="87.70" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="213" width="0.3" height="15.0" fill="rgb(252,44,11)" rx="2" ry="2" />
<text  x="1189.52" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (6 samples, 0.03%)</title><rect x="209.4" y="1781" width="0.4" height="15.0" fill="rgb(205,13,24)" rx="2" ry="2" />
<text  x="212.45" y="1791.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="571.4" y="1909" width="0.2" height="15.0" fill="rgb(254,32,23)" rx="2" ry="2" />
<text  x="574.44" y="1919.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.01%)</title><rect x="314.3" y="1957" width="0.1" height="15.0" fill="rgb(238,71,25)" rx="2" ry="2" />
<text  x="317.27" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.01%)</title><rect x="129.7" y="1909" width="0.1" height="15.0" fill="rgb(226,157,6)" rx="2" ry="2" />
<text  x="132.68" y="1919.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.01%)</title><rect x="593.5" y="1877" width="0.2" height="15.0" fill="rgb(254,111,11)" rx="2" ry="2" />
<text  x="596.49" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1413" width="0.3" height="15.0" fill="rgb(208,98,42)" rx="2" ry="2" />
<text  x="219.46" y="1423.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (3 samples, 0.01%)</title><rect x="196.5" y="1589" width="0.2" height="15.0" fill="rgb(222,184,39)" rx="2" ry="2" />
<text  x="199.54" y="1599.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="570.6" y="1861" width="0.1" height="15.0" fill="rgb(232,106,26)" rx="2" ry="2" />
<text  x="573.61" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1749" width="0.2" height="15.0" fill="rgb(215,58,31)" rx="2" ry="2" />
<text  x="57.98" y="1759.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (5 samples, 0.02%)</title><rect x="1103.5" y="2053" width="0.3" height="15.0" fill="rgb(234,190,2)" rx="2" ry="2" />
<text  x="1106.51" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.01%)</title><rect x="158.0" y="1765" width="0.2" height="15.0" fill="rgb(237,109,7)" rx="2" ry="2" />
<text  x="160.98" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (560 samples, 2.80%)</title><rect x="55.2" y="1845" width="33.0" height="15.0" fill="rgb(242,80,52)" rx="2" ry="2" />
<text  x="58.16" y="1855.5" >[u..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1813" width="0.2" height="15.0" fill="rgb(217,47,30)" rx="2" ry="2" />
<text  x="520.20" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 1.64%)</title><rect x="55.2" y="165" width="19.4" height="15.0" fill="rgb(236,149,11)" rx="2" ry="2" />
<text  x="58.22" y="175.5" ></text>
</g>
<g >
<title>std::future&lt;boost::optional&lt;TDocument&gt; &gt;::get (10 samples, 0.05%)</title><rect x="130.1" y="1989" width="0.6" height="15.0" fill="rgb(209,113,46)" rx="2" ry="2" />
<text  x="133.09" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (15 samples, 0.07%)</title><rect x="516.2" y="2005" width="0.9" height="15.0" fill="rgb(215,26,47)" rx="2" ry="2" />
<text  x="519.19" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (41 samples, 0.20%)</title><rect x="1119.7" y="2053" width="2.4" height="15.0" fill="rgb(221,49,9)" rx="2" ry="2" />
<text  x="1122.67" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.03%)</title><rect x="689.5" y="1845" width="0.4" height="15.0" fill="rgb(231,146,36)" rx="2" ry="2" />
<text  x="692.47" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (2 samples, 0.01%)</title><rect x="209.7" y="1701" width="0.1" height="15.0" fill="rgb(206,55,25)" rx="2" ry="2" />
<text  x="212.68" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (13 samples, 0.06%)</title><rect x="597.0" y="1877" width="0.8" height="15.0" fill="rgb(239,113,52)" rx="2" ry="2" />
<text  x="600.02" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.03%)</title><rect x="202.8" y="1605" width="0.3" height="15.0" fill="rgb(211,206,31)" rx="2" ry="2" />
<text  x="205.79" y="1615.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (3 samples, 0.01%)</title><rect x="131.6" y="1637" width="0.1" height="15.0" fill="rgb(231,224,19)" rx="2" ry="2" />
<text  x="134.57" y="1647.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (2 samples, 0.01%)</title><rect x="84.1" y="1397" width="0.1" height="15.0" fill="rgb(217,35,52)" rx="2" ry="2" />
<text  x="87.11" y="1407.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.01%)</title><rect x="90.3" y="1973" width="0.2" height="15.0" fill="rgb(247,78,46)" rx="2" ry="2" />
<text  x="93.30" y="1983.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="85.0" y="1557" width="0.1" height="15.0" fill="rgb(212,89,15)" rx="2" ry="2" />
<text  x="87.99" y="1567.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (7 samples, 0.03%)</title><rect x="751.7" y="1893" width="0.4" height="15.0" fill="rgb(253,118,15)" rx="2" ry="2" />
<text  x="754.72" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="186.7" y="1877" width="0.6" height="15.0" fill="rgb(217,58,1)" rx="2" ry="2" />
<text  x="189.69" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="606.5" y="1861" width="0.1" height="15.0" fill="rgb(225,228,47)" rx="2" ry="2" />
<text  x="609.51" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="757" width="0.3" height="15.0" fill="rgb(217,225,4)" rx="2" ry="2" />
<text  x="1189.52" y="767.5" ></text>
</g>
<g >
<title>strcmp@plt (4 samples, 0.02%)</title><rect x="43.0" y="2037" width="0.2" height="15.0" fill="rgb(236,70,28)" rx="2" ry="2" />
<text  x="45.96" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1557" width="0.2" height="15.0" fill="rgb(228,190,15)" rx="2" ry="2" />
<text  x="1190.29" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1669" width="0.4" height="15.0" fill="rgb(233,195,34)" rx="2" ry="2" />
<text  x="1189.40" y="1679.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.01%)</title><rect x="79.3" y="1189" width="0.1" height="15.0" fill="rgb(243,228,18)" rx="2" ry="2" />
<text  x="82.33" y="1199.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (16 samples, 0.08%)</title><rect x="1174.1" y="2037" width="0.9" height="15.0" fill="rgb(207,14,10)" rx="2" ry="2" />
<text  x="1177.08" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.01%)</title><rect x="326.9" y="1925" width="0.2" height="15.0" fill="rgb(239,139,5)" rx="2" ry="2" />
<text  x="329.95" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="277" width="0.3" height="15.0" fill="rgb(207,0,31)" rx="2" ry="2" />
<text  x="1189.52" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1187.0" y="53" width="0.3" height="15.0" fill="rgb(231,201,13)" rx="2" ry="2" />
<text  x="1189.99" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="187.2" y="1109" width="0.1" height="15.0" fill="rgb(240,181,49)" rx="2" ry="2" />
<text  x="190.16" y="1119.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.01%)</title><rect x="337.1" y="1989" width="0.2" height="15.0" fill="rgb(210,26,33)" rx="2" ry="2" />
<text  x="340.09" y="1999.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (4 samples, 0.02%)</title><rect x="617.9" y="1845" width="0.2" height="15.0" fill="rgb(231,147,10)" rx="2" ry="2" />
<text  x="620.89" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="80.3" y="1381" width="0.2" height="15.0" fill="rgb(247,119,45)" rx="2" ry="2" />
<text  x="83.33" y="1391.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.01%)</title><rect x="495.7" y="1941" width="0.2" height="15.0" fill="rgb(215,101,14)" rx="2" ry="2" />
<text  x="498.74" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1717" width="0.4" height="15.0" fill="rgb(250,40,22)" rx="2" ry="2" />
<text  x="1189.88" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (100 samples, 0.50%)</title><rect x="165.2" y="1717" width="5.9" height="15.0" fill="rgb(236,162,8)" rx="2" ry="2" />
<text  x="168.23" y="1727.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="85.0" y="1589" width="0.1" height="15.0" fill="rgb(232,192,21)" rx="2" ry="2" />
<text  x="87.99" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_Scanner (4 samples, 0.02%)</title><rect x="215.9" y="1925" width="0.3" height="15.0" fill="rgb(236,150,54)" rx="2" ry="2" />
<text  x="218.93" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="215.1" y="1845" width="0.2" height="15.0" fill="rgb(217,136,28)" rx="2" ry="2" />
<text  x="218.11" y="1855.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (4 samples, 0.02%)</title><rect x="520.7" y="2037" width="0.3" height="15.0" fill="rgb(231,206,53)" rx="2" ry="2" />
<text  x="523.73" y="2047.5" ></text>
</g>
<g >
<title>do_syscall_64 (9 samples, 0.04%)</title><rect x="521.1" y="2005" width="0.6" height="15.0" fill="rgb(212,222,53)" rx="2" ry="2" />
<text  x="524.15" y="2015.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="212.6" y="1669" width="0.1" height="15.0" fill="rgb(216,61,48)" rx="2" ry="2" />
<text  x="215.57" y="1679.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (3 samples, 0.01%)</title><rect x="130.5" y="1877" width="0.2" height="15.0" fill="rgb(241,189,52)" rx="2" ry="2" />
<text  x="133.51" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (67 samples, 0.33%)</title><rect x="131.8" y="1605" width="4.0" height="15.0" fill="rgb(237,76,4)" rx="2" ry="2" />
<text  x="134.80" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (476 samples, 2.38%)</title><rect x="55.2" y="1525" width="28.0" height="15.0" fill="rgb(249,43,31)" rx="2" ry="2" />
<text  x="58.16" y="1535.5" >[..</text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (326 samples, 1.63%)</title><rect x="382.5" y="1957" width="19.3" height="15.0" fill="rgb(213,65,0)" rx="2" ry="2" />
<text  x="385.54" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.01%)</title><rect x="207.7" y="1637" width="0.2" height="15.0" fill="rgb(217,167,45)" rx="2" ry="2" />
<text  x="210.68" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1077" width="0.4" height="15.0" fill="rgb(218,118,52)" rx="2" ry="2" />
<text  x="1189.88" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="965" width="20.4" height="15.0" fill="rgb(241,220,18)" rx="2" ry="2" />
<text  x="58.22" y="975.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="543.7" y="1909" width="0.1" height="15.0" fill="rgb(217,194,48)" rx="2" ry="2" />
<text  x="546.67" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1461" width="0.2" height="15.0" fill="rgb(207,15,11)" rx="2" ry="2" />
<text  x="1190.29" y="1471.5" ></text>
</g>
<g >
<title>__pthread_once_slow (3,910 samples, 19.54%)</title><rect x="524.4" y="2037" width="230.5" height="15.0" fill="rgb(211,175,42)" rx="2" ry="2" />
<text  x="527.39" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (86 samples, 0.43%)</title><rect x="136.1" y="1717" width="5.1" height="15.0" fill="rgb(217,207,19)" rx="2" ry="2" />
<text  x="139.11" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="187.1" y="1205" width="0.2" height="15.0" fill="rgb(207,29,50)" rx="2" ry="2" />
<text  x="190.10" y="1215.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="85.0" y="1621" width="0.1" height="15.0" fill="rgb(236,9,37)" rx="2" ry="2" />
<text  x="87.99" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (390 samples, 1.95%)</title><rect x="55.2" y="1269" width="23.0" height="15.0" fill="rgb(207,150,1)" rx="2" ry="2" />
<text  x="58.22" y="1279.5" >[..</text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, 0, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, false, 0&gt;::run (3 samples, 0.01%)</title><rect x="188.5" y="1973" width="0.2" height="15.0" fill="rgb(239,119,32)" rx="2" ry="2" />
<text  x="191.52" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1685" width="0.3" height="15.0" fill="rgb(231,189,50)" rx="2" ry="2" />
<text  x="219.46" y="1695.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="156.9" y="1669" width="0.1" height="15.0" fill="rgb(248,161,28)" rx="2" ry="2" />
<text  x="159.92" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (79 samples, 0.39%)</title><rect x="194.3" y="1653" width="4.7" height="15.0" fill="rgb(247,56,54)" rx="2" ry="2" />
<text  x="197.30" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1093" width="0.2" height="15.0" fill="rgb(215,131,42)" rx="2" ry="2" />
<text  x="1190.29" y="1103.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="571.0" y="1893" width="0.2" height="15.0" fill="rgb(220,119,39)" rx="2" ry="2" />
<text  x="573.96" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="214.6" y="1829" width="0.2" height="15.0" fill="rgb(242,23,31)" rx="2" ry="2" />
<text  x="217.64" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1973" width="0.4" height="15.0" fill="rgb(228,219,52)" rx="2" ry="2" />
<text  x="1189.88" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (120 samples, 0.60%)</title><rect x="122.4" y="1941" width="7.1" height="15.0" fill="rgb(228,213,48)" rx="2" ry="2" />
<text  x="125.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="261" width="0.2" height="15.0" fill="rgb(210,212,23)" rx="2" ry="2" />
<text  x="1190.35" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="43.5" y="2021" width="0.2" height="15.0" fill="rgb(214,152,25)" rx="2" ry="2" />
<text  x="46.55" y="2031.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (61 samples, 0.30%)</title><rect x="999.7" y="2053" width="3.6" height="15.0" fill="rgb(216,81,52)" rx="2" ry="2" />
<text  x="1002.69" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (447 samples, 2.23%)</title><rect x="55.2" y="1429" width="26.4" height="15.0" fill="rgb(242,121,14)" rx="2" ry="2" />
<text  x="58.22" y="1439.5" >[..</text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="480.1" y="1941" width="0.2" height="15.0" fill="rgb(242,42,14)" rx="2" ry="2" />
<text  x="483.05" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.3" y="1701" width="0.1" height="15.0" fill="rgb(248,121,52)" rx="2" ry="2" />
<text  x="89.29" y="1711.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.01%)</title><rect x="1099.0" y="1909" width="0.1" height="15.0" fill="rgb(205,128,2)" rx="2" ry="2" />
<text  x="1101.97" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="533" width="0.4" height="15.0" fill="rgb(237,50,34)" rx="2" ry="2" />
<text  x="1189.88" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="186.8" y="1701" width="0.2" height="15.0" fill="rgb(217,90,0)" rx="2" ry="2" />
<text  x="189.81" y="1711.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (5 samples, 0.02%)</title><rect x="54.6" y="1781" width="0.3" height="15.0" fill="rgb(236,69,17)" rx="2" ry="2" />
<text  x="57.63" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (13 samples, 0.06%)</title><rect x="634.7" y="1877" width="0.8" height="15.0" fill="rgb(245,209,30)" rx="2" ry="2" />
<text  x="637.70" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (91 samples, 0.45%)</title><rect x="146.6" y="1765" width="5.4" height="15.0" fill="rgb(222,91,21)" rx="2" ry="2" />
<text  x="149.60" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.47%)</title><rect x="152.3" y="1813" width="5.6" height="15.0" fill="rgb(227,218,2)" rx="2" ry="2" />
<text  x="155.32" y="1823.5" ></text>
</g>
<g >
<title>do_page_fault (5 samples, 0.02%)</title><rect x="730.1" y="1861" width="0.3" height="15.0" fill="rgb(247,221,31)" rx="2" ry="2" />
<text  x="733.09" y="1871.5" ></text>
</g>
<g >
<title>std::locale::~locale (5 samples, 0.02%)</title><rect x="336.5" y="1989" width="0.3" height="15.0" fill="rgb(247,25,5)" rx="2" ry="2" />
<text  x="339.50" y="1999.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (5 samples, 0.02%)</title><rect x="500.2" y="1829" width="0.3" height="15.0" fill="rgb(244,226,37)" rx="2" ry="2" />
<text  x="503.22" y="1839.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (5 samples, 0.02%)</title><rect x="54.6" y="1845" width="0.3" height="15.0" fill="rgb(243,116,12)" rx="2" ry="2" />
<text  x="57.63" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1701" width="0.2" height="15.0" fill="rgb(209,10,20)" rx="2" ry="2" />
<text  x="57.98" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1013" width="0.3" height="15.0" fill="rgb(219,50,23)" rx="2" ry="2" />
<text  x="1189.52" y="1023.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="173.1" y="1589" width="0.1" height="15.0" fill="rgb(242,106,37)" rx="2" ry="2" />
<text  x="176.13" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (81 samples, 0.40%)</title><rect x="141.6" y="1685" width="4.8" height="15.0" fill="rgb(245,198,40)" rx="2" ry="2" />
<text  x="144.65" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="767.1" y="2005" width="0.1" height="15.0" fill="rgb(240,143,53)" rx="2" ry="2" />
<text  x="770.05" y="2015.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.01%)</title><rect x="1189.4" y="1973" width="0.1" height="15.0" fill="rgb(222,218,17)" rx="2" ry="2" />
<text  x="1192.41" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="216.9" y="1125" width="0.2" height="15.0" fill="rgb(243,133,49)" rx="2" ry="2" />
<text  x="219.93" y="1135.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (9 samples, 0.04%)</title><rect x="1161.9" y="2037" width="0.6" height="15.0" fill="rgb(218,153,5)" rx="2" ry="2" />
<text  x="1164.94" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (76 samples, 0.38%)</title><rect x="189.6" y="1605" width="4.5" height="15.0" fill="rgb(212,17,30)" rx="2" ry="2" />
<text  x="192.58" y="1615.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (25 samples, 0.12%)</title><rect x="25.1" y="1941" width="1.5" height="15.0" fill="rgb(247,9,32)" rx="2" ry="2" />
<text  x="28.09" y="1951.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (5 samples, 0.02%)</title><rect x="1100.7" y="1861" width="0.3" height="15.0" fill="rgb(250,66,40)" rx="2" ry="2" />
<text  x="1103.68" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="158.9" y="1909" width="0.2" height="15.0" fill="rgb(223,7,20)" rx="2" ry="2" />
<text  x="161.92" y="1919.5" ></text>
</g>
<g >
<title>do_page_fault (34 samples, 0.17%)</title><rect x="692.4" y="1829" width="2.0" height="15.0" fill="rgb(226,131,15)" rx="2" ry="2" />
<text  x="695.41" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (87 samples, 0.43%)</title><rect x="171.3" y="1669" width="5.1" height="15.0" fill="rgb(247,124,34)" rx="2" ry="2" />
<text  x="174.30" y="1679.5" ></text>
</g>
<g >
<title>__do_page_fault (33 samples, 0.16%)</title><rect x="692.4" y="1813" width="2.0" height="15.0" fill="rgb(212,127,4)" rx="2" ry="2" />
<text  x="695.41" y="1823.5" ></text>
</g>
<g >
<title>__x64_sys_read (2 samples, 0.01%)</title><rect x="119.8" y="1989" width="0.1" height="15.0" fill="rgb(218,112,44)" rx="2" ry="2" />
<text  x="122.78" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform@plt (4 samples, 0.02%)</title><rect x="1146.5" y="2053" width="0.3" height="15.0" fill="rgb(236,131,31)" rx="2" ry="2" />
<text  x="1149.55" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (20 samples, 0.10%)</title><rect x="614.6" y="1845" width="1.2" height="15.0" fill="rgb(222,11,50)" rx="2" ry="2" />
<text  x="617.59" y="1855.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (461 samples, 2.30%)</title><rect x="544.0" y="1909" width="27.2" height="15.0" fill="rgb(208,119,47)" rx="2" ry="2" />
<text  x="547.02" y="1919.5" >f..</text>
</g>
<g >
<title>native_write_msr (13 samples, 0.06%)</title><rect x="948.1" y="1765" width="0.8" height="15.0" fill="rgb(245,78,30)" rx="2" ry="2" />
<text  x="951.10" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1189" width="0.2" height="15.0" fill="rgb(254,123,51)" rx="2" ry="2" />
<text  x="219.64" y="1199.5" ></text>
</g>
<g >
<title>release_pages (4 samples, 0.02%)</title><rect x="1102.2" y="1861" width="0.3" height="15.0" fill="rgb(246,225,4)" rx="2" ry="2" />
<text  x="1105.21" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (13 samples, 0.06%)</title><rect x="1026.2" y="2053" width="0.8" height="15.0" fill="rgb(212,206,32)" rx="2" ry="2" />
<text  x="1029.22" y="2063.5" ></text>
</g>
<g >
<title>futex_wait (3 samples, 0.01%)</title><rect x="130.5" y="1893" width="0.2" height="15.0" fill="rgb(245,161,5)" rx="2" ry="2" />
<text  x="133.51" y="1903.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (287 samples, 1.43%)</title><rect x="225.0" y="1941" width="16.9" height="15.0" fill="rgb(230,124,9)" rx="2" ry="2" />
<text  x="228.01" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="139.4" y="1589" width="0.1" height="15.0" fill="rgb(249,84,18)" rx="2" ry="2" />
<text  x="142.41" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (451 samples, 2.25%)</title><rect x="159.5" y="1861" width="26.5" height="15.0" fill="rgb(232,43,11)" rx="2" ry="2" />
<text  x="162.45" y="1871.5" >s..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="767.1" y="2021" width="0.1" height="15.0" fill="rgb(220,96,30)" rx="2" ry="2" />
<text  x="770.05" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.02%)</title><rect x="583.5" y="1877" width="0.3" height="15.0" fill="rgb(225,152,46)" rx="2" ry="2" />
<text  x="586.46" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.4" y="1717" width="0.1" height="15.0" fill="rgb(221,157,22)" rx="2" ry="2" />
<text  x="89.41" y="1727.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.01%)</title><rect x="331.5" y="1957" width="0.2" height="15.0" fill="rgb(229,188,5)" rx="2" ry="2" />
<text  x="334.54" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="965" width="0.4" height="15.0" fill="rgb(205,173,42)" rx="2" ry="2" />
<text  x="1189.88" y="975.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (6 samples, 0.03%)</title><rect x="752.4" y="1893" width="0.3" height="15.0" fill="rgb(250,35,5)" rx="2" ry="2" />
<text  x="755.37" y="1903.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (7 samples, 0.03%)</title><rect x="131.3" y="1653" width="0.4" height="15.0" fill="rgb(215,171,23)" rx="2" ry="2" />
<text  x="134.33" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="229" width="0.2" height="15.0" fill="rgb(225,226,38)" rx="2" ry="2" />
<text  x="1190.35" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1301" width="0.3" height="15.0" fill="rgb(243,74,42)" rx="2" ry="2" />
<text  x="190.04" y="1311.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (7 samples, 0.03%)</title><rect x="159.5" y="1653" width="0.4" height="15.0" fill="rgb(243,225,11)" rx="2" ry="2" />
<text  x="162.45" y="1663.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (5 samples, 0.02%)</title><rect x="656.7" y="1877" width="0.3" height="15.0" fill="rgb(208,31,44)" rx="2" ry="2" />
<text  x="659.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1813" width="0.2" height="15.0" fill="rgb(249,25,37)" rx="2" ry="2" />
<text  x="1190.29" y="1823.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (486 samples, 2.43%)</title><rect x="188.7" y="1989" width="28.6" height="15.0" fill="rgb(235,114,20)" rx="2" ry="2" />
<text  x="191.69" y="1999.5" >TA..</text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="161.8" y="1541" width="0.1" height="15.0" fill="rgb(211,219,22)" rx="2" ry="2" />
<text  x="164.81" y="1551.5" ></text>
</g>
<g >
<title>__interceptor_strlen (2 samples, 0.01%)</title><rect x="599.0" y="1861" width="0.1" height="15.0" fill="rgb(213,107,19)" rx="2" ry="2" />
<text  x="602.03" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="773" width="0.2" height="15.0" fill="rgb(221,140,1)" rx="2" ry="2" />
<text  x="1190.29" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (21 samples, 0.10%)</title><rect x="736.3" y="1893" width="1.2" height="15.0" fill="rgb(213,189,49)" rx="2" ry="2" />
<text  x="739.28" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (23 samples, 0.11%)</title><rect x="512.4" y="1973" width="1.4" height="15.0" fill="rgb(227,23,20)" rx="2" ry="2" />
<text  x="515.42" y="1983.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.02%)</title><rect x="104.7" y="2005" width="0.3" height="15.0" fill="rgb(237,81,6)" rx="2" ry="2" />
<text  x="107.74" y="2015.5" ></text>
</g>
<g >
<title>handle_mm_fault (69 samples, 0.34%)</title><rect x="24.4" y="1989" width="4.1" height="15.0" fill="rgb(249,134,8)" rx="2" ry="2" />
<text  x="27.44" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="180.7" y="1669" width="0.2" height="15.0" fill="rgb(227,175,6)" rx="2" ry="2" />
<text  x="183.74" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.5" y="1285" width="0.3" height="15.0" fill="rgb(242,1,48)" rx="2" ry="2" />
<text  x="219.52" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.5" y="1301" width="0.3" height="15.0" fill="rgb(220,168,24)" rx="2" ry="2" />
<text  x="219.52" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (77 samples, 0.38%)</title><rect x="181.3" y="1717" width="4.6" height="15.0" fill="rgb(236,226,40)" rx="2" ry="2" />
<text  x="184.33" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="741" width="0.3" height="15.0" fill="rgb(236,99,41)" rx="2" ry="2" />
<text  x="1189.52" y="751.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1765" width="0.2" height="15.0" fill="rgb(209,198,45)" rx="2" ry="2" />
<text  x="57.98" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="79.2" y="1317" width="0.1" height="15.0" fill="rgb(210,45,41)" rx="2" ry="2" />
<text  x="82.21" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="581" width="0.2" height="15.0" fill="rgb(219,204,30)" rx="2" ry="2" />
<text  x="1190.29" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (71 samples, 0.35%)</title><rect x="160.5" y="1573" width="4.2" height="15.0" fill="rgb(220,39,17)" rx="2" ry="2" />
<text  x="163.51" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1333" width="0.4" height="15.0" fill="rgb(234,156,25)" rx="2" ry="2" />
<text  x="1189.88" y="1343.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (131 samples, 0.65%)</title><rect x="976.9" y="2053" width="7.7" height="15.0" fill="rgb(210,107,30)" rx="2" ry="2" />
<text  x="979.87" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (593 samples, 2.96%)</title><rect x="55.2" y="1957" width="34.9" height="15.0" fill="rgb(212,27,43)" rx="2" ry="2" />
<text  x="58.16" y="1967.5" >[u..</text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="293" width="19.6" height="15.0" fill="rgb(227,195,27)" rx="2" ry="2" />
<text  x="58.22" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="134.3" y="1557" width="0.1" height="15.0" fill="rgb(241,68,38)" rx="2" ry="2" />
<text  x="137.28" y="1567.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (267 samples, 1.33%)</title><rect x="55.2" y="37" width="15.8" height="15.0" fill="rgb(213,46,39)" rx="2" ry="2" />
<text  x="58.22" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (100 samples, 0.50%)</title><rect x="203.6" y="1781" width="5.8" height="15.0" fill="rgb(240,214,13)" rx="2" ry="2" />
<text  x="206.55" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="82.3" y="1461" width="0.1" height="15.0" fill="rgb(211,40,20)" rx="2" ry="2" />
<text  x="85.28" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="2037" width="0.2" height="15.0" fill="rgb(239,27,42)" rx="2" ry="2" />
<text  x="1190.29" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.01%)</title><rect x="193.5" y="1573" width="0.1" height="15.0" fill="rgb(216,208,23)" rx="2" ry="2" />
<text  x="196.47" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="677" width="0.2" height="15.0" fill="rgb(215,137,2)" rx="2" ry="2" />
<text  x="1190.29" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="187.1" y="1125" width="0.2" height="15.0" fill="rgb(208,24,53)" rx="2" ry="2" />
<text  x="190.10" y="1135.5" ></text>
</g>
<g >
<title>free_unref_page_list (2 samples, 0.01%)</title><rect x="1102.3" y="1845" width="0.2" height="15.0" fill="rgb(240,119,30)" rx="2" ry="2" />
<text  x="1105.33" y="1855.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="736.0" y="1893" width="0.3" height="15.0" fill="rgb(221,163,5)" rx="2" ry="2" />
<text  x="739.04" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.01%)</title><rect x="184.3" y="1653" width="0.2" height="15.0" fill="rgb(243,75,22)" rx="2" ry="2" />
<text  x="187.33" y="1663.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (21 samples, 0.10%)</title><rect x="1100.5" y="1989" width="1.2" height="15.0" fill="rgb(239,33,20)" rx="2" ry="2" />
<text  x="1103.51" y="1999.5" ></text>
</g>
<g >
<title>TDocument::TDocument (20 samples, 0.10%)</title><rect x="120.1" y="1989" width="1.2" height="15.0" fill="rgb(241,51,38)" rx="2" ry="2" />
<text  x="123.13" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="997" width="0.3" height="15.0" fill="rgb(241,33,38)" rx="2" ry="2" />
<text  x="1189.52" y="1007.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="43.9" y="2005" width="0.1" height="15.0" fill="rgb(246,45,40)" rx="2" ry="2" />
<text  x="46.90" y="2015.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.01%)</title><rect x="510.5" y="1877" width="0.2" height="15.0" fill="rgb(208,66,41)" rx="2" ry="2" />
<text  x="513.53" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (267 samples, 1.33%)</title><rect x="694.7" y="1877" width="15.8" height="15.0" fill="rgb(213,155,51)" rx="2" ry="2" />
<text  x="697.71" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (461 samples, 2.30%)</title><rect x="189.0" y="1957" width="27.2" height="15.0" fill="rgb(236,68,16)" rx="2" ry="2" />
<text  x="191.99" y="1967.5" >s..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="78.2" y="1269" width="0.2" height="15.0" fill="rgb(246,149,54)" rx="2" ry="2" />
<text  x="81.21" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="117" width="0.2" height="15.0" fill="rgb(209,3,51)" rx="2" ry="2" />
<text  x="1190.35" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.5" y="1573" width="0.3" height="15.0" fill="rgb(205,36,24)" rx="2" ry="2" />
<text  x="1189.46" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1525" width="0.4" height="15.0" fill="rgb(252,208,47)" rx="2" ry="2" />
<text  x="1189.88" y="1535.5" ></text>
</g>
<g >
<title>page_fault (123 samples, 0.61%)</title><rect x="941.9" y="2037" width="7.3" height="15.0" fill="rgb(246,97,38)" rx="2" ry="2" />
<text  x="944.91" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="1099.0" y="2005" width="0.1" height="15.0" fill="rgb(235,121,14)" rx="2" ry="2" />
<text  x="1101.97" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1381" width="0.1" height="15.0" fill="rgb(242,66,26)" rx="2" ry="2" />
<text  x="57.98" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1093" width="0.4" height="15.0" fill="rgb(246,72,31)" rx="2" ry="2" />
<text  x="1189.88" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1653" width="0.3" height="15.0" fill="rgb(232,221,30)" rx="2" ry="2" />
<text  x="219.76" y="1663.5" ></text>
</g>
<g >
<title>[tgnews] (3 samples, 0.01%)</title><rect x="55.0" y="2037" width="0.2" height="15.0" fill="rgb(232,16,43)" rx="2" ry="2" />
<text  x="57.98" y="2047.5" ></text>
</g>
<g >
<title>do_futex (16 samples, 0.08%)</title><rect x="29.6" y="1941" width="1.0" height="15.0" fill="rgb(211,38,36)" rx="2" ry="2" />
<text  x="32.63" y="1951.5" ></text>
</g>
<g >
<title>do_wp_page (2 samples, 0.01%)</title><rect x="1099.0" y="1957" width="0.1" height="15.0" fill="rgb(220,91,15)" rx="2" ry="2" />
<text  x="1101.97" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="629" width="0.2" height="15.0" fill="rgb(213,27,45)" rx="2" ry="2" />
<text  x="1190.29" y="639.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (27 samples, 0.13%)</title><rect x="510.8" y="1973" width="1.6" height="15.0" fill="rgb(223,172,29)" rx="2" ry="2" />
<text  x="513.77" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="949" width="0.3" height="15.0" fill="rgb(221,163,53)" rx="2" ry="2" />
<text  x="1189.52" y="959.5" ></text>
</g>
<g >
<title>find_vma (4 samples, 0.02%)</title><rect x="943.5" y="1989" width="0.2" height="15.0" fill="rgb(213,69,51)" rx="2" ry="2" />
<text  x="946.51" y="1999.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="606.4" y="1861" width="0.1" height="15.0" fill="rgb(254,187,6)" rx="2" ry="2" />
<text  x="609.40" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1829" width="0.8" height="15.0" fill="rgb(209,84,32)" rx="2" ry="2" />
<text  x="219.35" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="877.5" y="2037" width="0.2" height="15.0" fill="rgb(206,127,36)" rx="2" ry="2" />
<text  x="880.53" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="773" width="0.3" height="15.0" fill="rgb(237,180,53)" rx="2" ry="2" />
<text  x="1189.52" y="783.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.02%)</title><rect x="207.0" y="1637" width="0.3" height="15.0" fill="rgb(221,194,11)" rx="2" ry="2" />
<text  x="209.97" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.02%)</title><rect x="810.6" y="2005" width="0.3" height="15.0" fill="rgb(242,155,27)" rx="2" ry="2" />
<text  x="813.62" y="2015.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (2 samples, 0.01%)</title><rect x="1101.2" y="1845" width="0.1" height="15.0" fill="rgb(220,161,44)" rx="2" ry="2" />
<text  x="1104.15" y="1855.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.05%)</title><rect x="521.1" y="2021" width="0.6" height="15.0" fill="rgb(234,103,31)" rx="2" ry="2" />
<text  x="524.09" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.23%)</title><rect x="154.3" y="1685" width="2.7" height="15.0" fill="rgb(247,15,41)" rx="2" ry="2" />
<text  x="157.26" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="79.3" y="1317" width="0.1" height="15.0" fill="rgb(248,119,29)" rx="2" ry="2" />
<text  x="82.33" y="1327.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (25 samples, 0.12%)</title><rect x="653.2" y="1877" width="1.5" height="15.0" fill="rgb(222,99,26)" rx="2" ry="2" />
<text  x="656.21" y="1887.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (21 samples, 0.10%)</title><rect x="1100.5" y="2005" width="1.2" height="15.0" fill="rgb(209,38,18)" rx="2" ry="2" />
<text  x="1103.51" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="341" width="0.3" height="15.0" fill="rgb(205,99,48)" rx="2" ry="2" />
<text  x="1189.52" y="351.5" ></text>
</g>
<g >
<title>TDocument::TDocument (7 samples, 0.03%)</title><rect x="754.1" y="1973" width="0.4" height="15.0" fill="rgb(234,136,45)" rx="2" ry="2" />
<text  x="757.08" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="598.7" y="1861" width="0.1" height="15.0" fill="rgb(234,72,5)" rx="2" ry="2" />
<text  x="601.67" y="1871.5" ></text>
</g>
<g >
<title>mmput (8 samples, 0.04%)</title><rect x="1102.0" y="1973" width="0.5" height="15.0" fill="rgb(236,221,50)" rx="2" ry="2" />
<text  x="1104.98" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.8" y="1733" width="0.3" height="15.0" fill="rgb(207,18,14)" rx="2" ry="2" />
<text  x="219.76" y="1743.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (4 samples, 0.02%)</title><rect x="1110.9" y="1909" width="0.3" height="15.0" fill="rgb(251,141,44)" rx="2" ry="2" />
<text  x="1113.94" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.03%)</title><rect x="213.6" y="1669" width="0.4" height="15.0" fill="rgb(222,199,37)" rx="2" ry="2" />
<text  x="216.63" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="981" width="20.4" height="15.0" fill="rgb(210,65,44)" rx="2" ry="2" />
<text  x="58.22" y="991.5" ></text>
</g>
<g >
<title>[unknown] (351 samples, 1.75%)</title><rect x="55.2" y="1061" width="20.7" height="15.0" fill="rgb(227,73,13)" rx="2" ry="2" />
<text  x="58.22" y="1071.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (11 samples, 0.05%)</title><rect x="1118.1" y="2037" width="0.7" height="15.0" fill="rgb(229,112,50)" rx="2" ry="2" />
<text  x="1121.13" y="2047.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.01%)</title><rect x="79.3" y="1173" width="0.1" height="15.0" fill="rgb(253,133,47)" rx="2" ry="2" />
<text  x="82.33" y="1183.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.01%)</title><rect x="1189.4" y="2005" width="0.1" height="15.0" fill="rgb(248,76,21)" rx="2" ry="2" />
<text  x="1192.35" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (454 samples, 2.27%)</title><rect x="55.2" y="1445" width="26.7" height="15.0" fill="rgb(216,82,21)" rx="2" ry="2" />
<text  x="58.16" y="1455.5" >[..</text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="85.0" y="1525" width="0.1" height="15.0" fill="rgb(248,140,1)" rx="2" ry="2" />
<text  x="87.99" y="1535.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (57 samples, 0.28%)</title><rect x="148.1" y="1653" width="3.4" height="15.0" fill="rgb(216,144,50)" rx="2" ry="2" />
<text  x="151.13" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1269" width="0.3" height="15.0" fill="rgb(252,48,31)" rx="2" ry="2" />
<text  x="219.82" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1669" width="0.2" height="15.0" fill="rgb(219,42,23)" rx="2" ry="2" />
<text  x="57.98" y="1679.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (3,001 samples, 14.99%)</title><rect x="337.7" y="1989" width="176.9" height="15.0" fill="rgb(254,111,40)" rx="2" ry="2" />
<text  x="340.68" y="1999.5" >TSlinkClustering::Clus..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (88 samples, 0.44%)</title><rect x="171.2" y="1701" width="5.2" height="15.0" fill="rgb(232,134,22)" rx="2" ry="2" />
<text  x="174.24" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="1145.8" y="2037" width="0.2" height="15.0" fill="rgb(246,187,41)" rx="2" ry="2" />
<text  x="1148.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="517" width="0.3" height="15.0" fill="rgb(206,96,20)" rx="2" ry="2" />
<text  x="1189.52" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (16 samples, 0.08%)</title><rect x="944.9" y="1909" width="1.0" height="15.0" fill="rgb(212,134,30)" rx="2" ry="2" />
<text  x="947.92" y="1919.5" ></text>
</g>
<g >
<title>__handle_mm_fault (18 samples, 0.09%)</title><rect x="693.2" y="1781" width="1.1" height="15.0" fill="rgb(234,195,54)" rx="2" ry="2" />
<text  x="696.24" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (72 samples, 0.36%)</title><rect x="176.5" y="1669" width="4.2" height="15.0" fill="rgb(251,65,15)" rx="2" ry="2" />
<text  x="179.49" y="1679.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="766.3" y="1845" width="0.2" height="15.0" fill="rgb(216,66,33)" rx="2" ry="2" />
<text  x="769.34" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (8 samples, 0.04%)</title><rect x="158.4" y="1893" width="0.5" height="15.0" fill="rgb(217,158,41)" rx="2" ry="2" />
<text  x="161.39" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1541" width="0.1" height="15.0" fill="rgb(208,173,12)" rx="2" ry="2" />
<text  x="57.98" y="1551.5" ></text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 0.01%)</title><rect x="119.8" y="1877" width="0.1" height="15.0" fill="rgb(239,54,38)" rx="2" ry="2" />
<text  x="122.78" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1253" width="0.3" height="15.0" fill="rgb(215,133,41)" rx="2" ry="2" />
<text  x="190.04" y="1263.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_number (2 samples, 0.01%)</title><rect x="122.3" y="1941" width="0.1" height="15.0" fill="rgb(207,26,9)" rx="2" ry="2" />
<text  x="125.31" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="613" width="0.2" height="15.0" fill="rgb(222,91,41)" rx="2" ry="2" />
<text  x="1190.29" y="623.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1413" width="0.1" height="15.0" fill="rgb(247,89,11)" rx="2" ry="2" />
<text  x="57.98" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="645" width="0.3" height="15.0" fill="rgb(227,4,54)" rx="2" ry="2" />
<text  x="1189.52" y="655.5" ></text>
</g>
<g >
<title>alloc_pages_vma (9 samples, 0.04%)</title><rect x="693.3" y="1765" width="0.5" height="15.0" fill="rgb(207,33,50)" rx="2" ry="2" />
<text  x="696.30" y="1775.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.01%)</title><rect x="178.8" y="1621" width="0.2" height="15.0" fill="rgb(242,51,15)" rx="2" ry="2" />
<text  x="181.85" y="1631.5" ></text>
</g>
<g >
<title>zap_page_range (9 samples, 0.04%)</title><rect x="521.1" y="1973" width="0.6" height="15.0" fill="rgb(230,82,37)" rx="2" ry="2" />
<text  x="524.15" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (100 samples, 0.50%)</title><rect x="165.2" y="1701" width="5.9" height="15.0" fill="rgb(221,111,43)" rx="2" ry="2" />
<text  x="168.23" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (9 samples, 0.04%)</title><rect x="186.1" y="1845" width="0.5" height="15.0" fill="rgb(238,61,32)" rx="2" ry="2" />
<text  x="189.10" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (38 samples, 0.19%)</title><rect x="676.9" y="1861" width="2.2" height="15.0" fill="rgb(222,152,26)" rx="2" ry="2" />
<text  x="679.91" y="1871.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (5 samples, 0.02%)</title><rect x="1006.2" y="2053" width="0.3" height="15.0" fill="rgb(250,32,21)" rx="2" ry="2" />
<text  x="1009.23" y="2063.5" ></text>
</g>
<g >
<title>__vfs_read (4 samples, 0.02%)</title><rect x="1110.9" y="1941" width="0.3" height="15.0" fill="rgb(241,146,53)" rx="2" ry="2" />
<text  x="1113.94" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1893" width="0.4" height="15.0" fill="rgb(217,208,47)" rx="2" ry="2" />
<text  x="1189.88" y="1903.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="1023.4" y="1925" width="0.2" height="15.0" fill="rgb(213,71,26)" rx="2" ry="2" />
<text  x="1026.45" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="187.1" y="1173" width="0.2" height="15.0" fill="rgb(226,89,33)" rx="2" ry="2" />
<text  x="190.10" y="1183.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="85.2" y="1637" width="0.1" height="15.0" fill="rgb(225,150,3)" rx="2" ry="2" />
<text  x="88.17" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1605" width="0.3" height="15.0" fill="rgb(206,164,29)" rx="2" ry="2" />
<text  x="219.82" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1733" width="0.4" height="15.0" fill="rgb(232,10,19)" rx="2" ry="2" />
<text  x="1189.88" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (433 samples, 2.16%)</title><rect x="189.2" y="1877" width="25.6" height="15.0" fill="rgb(210,74,1)" rx="2" ry="2" />
<text  x="192.23" y="1887.5" >s..</text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="495.4" y="1941" width="0.1" height="15.0" fill="rgb(251,167,7)" rx="2" ry="2" />
<text  x="498.38" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1621" width="0.2" height="15.0" fill="rgb(238,12,1)" rx="2" ry="2" />
<text  x="57.98" y="1631.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::at (3 samples, 0.01%)</title><rect x="120.5" y="1941" width="0.2" height="15.0" fill="rgb(206,31,25)" rx="2" ry="2" />
<text  x="123.54" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (76 samples, 0.38%)</title><rect x="189.6" y="1637" width="4.5" height="15.0" fill="rgb(225,23,39)" rx="2" ry="2" />
<text  x="192.58" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (551 samples, 2.75%)</title><rect x="55.2" y="1797" width="32.4" height="15.0" fill="rgb(250,175,2)" rx="2" ry="2" />
<text  x="58.16" y="1807.5" >[u..</text>
</g>
<g >
<title>native_send_call_func_single_ipi (2 samples, 0.01%)</title><rect x="84.1" y="1333" width="0.1" height="15.0" fill="rgb(214,206,31)" rx="2" ry="2" />
<text  x="87.11" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1301" width="0.2" height="15.0" fill="rgb(250,54,35)" rx="2" ry="2" />
<text  x="1190.29" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (87 samples, 0.43%)</title><rect x="171.3" y="1653" width="5.1" height="15.0" fill="rgb(234,213,33)" rx="2" ry="2" />
<text  x="174.30" y="1663.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_memcmp (9 samples, 0.04%)</title><rect x="1144.7" y="2037" width="0.5" height="15.0" fill="rgb(238,170,54)" rx="2" ry="2" />
<text  x="1147.66" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (336 samples, 1.68%)</title><rect x="55.2" y="501" width="19.8" height="15.0" fill="rgb(243,220,36)" rx="2" ry="2" />
<text  x="58.22" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1829" width="0.2" height="15.0" fill="rgb(205,111,4)" rx="2" ry="2" />
<text  x="1190.29" y="1839.5" ></text>
</g>
<g >
<title>syscall (5 samples, 0.02%)</title><rect x="130.4" y="1973" width="0.3" height="15.0" fill="rgb(245,22,51)" rx="2" ry="2" />
<text  x="133.39" y="1983.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (5 samples, 0.02%)</title><rect x="54.6" y="1877" width="0.3" height="15.0" fill="rgb(231,69,47)" rx="2" ry="2" />
<text  x="57.63" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="216.9" y="1173" width="0.2" height="15.0" fill="rgb(219,98,12)" rx="2" ry="2" />
<text  x="219.93" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1365" width="0.1" height="15.0" fill="rgb(248,194,46)" rx="2" ry="2" />
<text  x="57.98" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="773" width="0.4" height="15.0" fill="rgb(249,128,39)" rx="2" ry="2" />
<text  x="1189.88" y="783.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="200.4" y="1621" width="0.1" height="15.0" fill="rgb(215,221,5)" rx="2" ry="2" />
<text  x="203.37" y="1631.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.02%)</title><rect x="134.0" y="1557" width="0.3" height="15.0" fill="rgb(214,28,38)" rx="2" ry="2" />
<text  x="136.98" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1525" width="0.3" height="15.0" fill="rgb(214,224,28)" rx="2" ry="2" />
<text  x="219.46" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1525" width="0.1" height="15.0" fill="rgb(232,47,18)" rx="2" ry="2" />
<text  x="161.98" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1589" width="0.1" height="15.0" fill="rgb(248,49,50)" rx="2" ry="2" />
<text  x="57.98" y="1599.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (23 samples, 0.11%)</title><rect x="947.6" y="1877" width="1.3" height="15.0" fill="rgb(225,116,18)" rx="2" ry="2" />
<text  x="950.57" y="1887.5" ></text>
</g>
<g >
<title>__do_page_fault (123 samples, 0.61%)</title><rect x="941.9" y="2005" width="7.3" height="15.0" fill="rgb(205,169,42)" rx="2" ry="2" />
<text  x="944.91" y="2015.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (6 samples, 0.03%)</title><rect x="224.3" y="1957" width="0.4" height="15.0" fill="rgb(230,204,29)" rx="2" ry="2" />
<text  x="227.30" y="1967.5" ></text>
</g>
<g >
<title>fasttext::FastText::predictLine (255 samples, 1.27%)</title><rect x="525.2" y="1941" width="15.0" height="15.0" fill="rgb(208,136,1)" rx="2" ry="2" />
<text  x="528.16" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (4 samples, 0.02%)</title><rect x="199.1" y="1749" width="0.3" height="15.0" fill="rgb(207,122,15)" rx="2" ry="2" />
<text  x="202.13" y="1759.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.01%)</title><rect x="185.5" y="1685" width="0.2" height="15.0" fill="rgb(251,140,19)" rx="2" ry="2" />
<text  x="188.51" y="1695.5" ></text>
</g>
<g >
<title>TDocument::FromJson (4 samples, 0.02%)</title><rect x="120.5" y="1973" width="0.3" height="15.0" fill="rgb(249,207,27)" rx="2" ry="2" />
<text  x="123.54" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (320 samples, 1.60%)</title><rect x="551.9" y="1877" width="18.9" height="15.0" fill="rgb(230,82,44)" rx="2" ry="2" />
<text  x="554.92" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (85 samples, 0.42%)</title><rect x="141.6" y="1749" width="5.0" height="15.0" fill="rgb(246,99,44)" rx="2" ry="2" />
<text  x="144.59" y="1759.5" ></text>
</g>
<g >
<title>unmap_page_range (8 samples, 0.04%)</title><rect x="1102.0" y="1909" width="0.5" height="15.0" fill="rgb(224,181,49)" rx="2" ry="2" />
<text  x="1104.98" y="1919.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="682.7" y="1829" width="0.1" height="15.0" fill="rgb(229,150,33)" rx="2" ry="2" />
<text  x="685.69" y="1839.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 0.02%)</title><rect x="130.4" y="1909" width="0.3" height="15.0" fill="rgb(205,21,16)" rx="2" ry="2" />
<text  x="133.45" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1269" width="0.4" height="15.0" fill="rgb(243,168,16)" rx="2" ry="2" />
<text  x="1189.88" y="1279.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.01%)</title><rect x="596.8" y="1877" width="0.2" height="15.0" fill="rgb(248,152,31)" rx="2" ry="2" />
<text  x="599.85" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1189" width="0.1" height="15.0" fill="rgb(243,153,22)" rx="2" ry="2" />
<text  x="57.98" y="1199.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.01%)</title><rect x="766.3" y="2021" width="0.2" height="15.0" fill="rgb(242,27,4)" rx="2" ry="2" />
<text  x="769.28" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (4 samples, 0.02%)</title><rect x="181.0" y="1733" width="0.2" height="15.0" fill="rgb(229,85,14)" rx="2" ry="2" />
<text  x="183.97" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="805" width="0.3" height="15.0" fill="rgb(211,129,46)" rx="2" ry="2" />
<text  x="1189.52" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="997" width="0.2" height="15.0" fill="rgb(207,130,34)" rx="2" ry="2" />
<text  x="1190.29" y="1007.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.08%)</title><rect x="29.6" y="1973" width="1.0" height="15.0" fill="rgb(254,112,8)" rx="2" ry="2" />
<text  x="32.63" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (58 samples, 0.29%)</title><rect x="205.6" y="1653" width="3.4" height="15.0" fill="rgb(227,150,51)" rx="2" ry="2" />
<text  x="208.56" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1621" width="0.1" height="15.0" fill="rgb(223,184,25)" rx="2" ry="2" />
<text  x="161.98" y="1631.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (3 samples, 0.01%)</title><rect x="571.6" y="1909" width="0.1" height="15.0" fill="rgb(239,193,26)" rx="2" ry="2" />
<text  x="574.55" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (482 samples, 2.41%)</title><rect x="55.2" y="1557" width="28.4" height="15.0" fill="rgb(208,37,12)" rx="2" ry="2" />
<text  x="58.16" y="1567.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1589" width="0.3" height="15.0" fill="rgb(213,169,27)" rx="2" ry="2" />
<text  x="219.82" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1397" width="0.3" height="15.0" fill="rgb(253,159,16)" rx="2" ry="2" />
<text  x="219.46" y="1407.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1797" width="0.2" height="15.0" fill="rgb(219,182,53)" rx="2" ry="2" />
<text  x="520.20" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (5 samples, 0.02%)</title><rect x="189.3" y="1685" width="0.3" height="15.0" fill="rgb(228,115,38)" rx="2" ry="2" />
<text  x="192.28" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (5 samples, 0.02%)</title><rect x="180.9" y="1765" width="0.3" height="15.0" fill="rgb(216,126,11)" rx="2" ry="2" />
<text  x="183.91" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="89.9" y="1941" width="0.1" height="15.0" fill="rgb(239,47,27)" rx="2" ry="2" />
<text  x="92.89" y="1951.5" ></text>
</g>
<g >
<title>do_page_fault (9 samples, 0.04%)</title><rect x="762.1" y="2005" width="0.5" height="15.0" fill="rgb(214,55,48)" rx="2" ry="2" />
<text  x="765.10" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1109" width="0.2" height="15.0" fill="rgb(251,44,34)" rx="2" ry="2" />
<text  x="219.93" y="1119.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (8 samples, 0.04%)</title><rect x="767.2" y="2037" width="0.4" height="15.0" fill="rgb(213,205,28)" rx="2" ry="2" />
<text  x="770.17" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1301" width="0.4" height="15.0" fill="rgb(236,93,46)" rx="2" ry="2" />
<text  x="1189.88" y="1311.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="80.7" y="1381" width="0.1" height="15.0" fill="rgb(233,85,14)" rx="2" ry="2" />
<text  x="83.69" y="1391.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="90.8" y="1957" width="0.1" height="15.0" fill="rgb(247,57,36)" rx="2" ry="2" />
<text  x="93.83" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.01%)</title><rect x="82.1" y="1461" width="0.2" height="15.0" fill="rgb(216,135,49)" rx="2" ry="2" />
<text  x="85.10" y="1471.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.02%)</title><rect x="184.0" y="1653" width="0.3" height="15.0" fill="rgb(217,59,4)" rx="2" ry="2" />
<text  x="186.98" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (6 samples, 0.03%)</title><rect x="141.2" y="1749" width="0.3" height="15.0" fill="rgb(241,30,17)" rx="2" ry="2" />
<text  x="144.18" y="1759.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="204.0" y="1669" width="0.3" height="15.0" fill="rgb(244,173,47)" rx="2" ry="2" />
<text  x="207.02" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (4 samples, 0.02%)</title><rect x="753.8" y="1941" width="0.2" height="15.0" fill="rgb(235,107,24)" rx="2" ry="2" />
<text  x="756.79" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="949" width="20.4" height="15.0" fill="rgb(236,220,31)" rx="2" ry="2" />
<text  x="58.22" y="959.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (114 samples, 0.57%)</title><rect x="984.6" y="2053" width="6.7" height="15.0" fill="rgb(230,191,2)" rx="2" ry="2" />
<text  x="987.60" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1541" width="0.3" height="15.0" fill="rgb(226,175,53)" rx="2" ry="2" />
<text  x="1189.52" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1381" width="0.2" height="15.0" fill="rgb(234,0,19)" rx="2" ry="2" />
<text  x="1190.29" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1653" width="0.3" height="15.0" fill="rgb(210,61,11)" rx="2" ry="2" />
<text  x="190.04" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1557" width="0.1" height="15.0" fill="rgb(239,124,20)" rx="2" ry="2" />
<text  x="57.98" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="152.1" y="1797" width="0.1" height="15.0" fill="rgb(227,80,9)" rx="2" ry="2" />
<text  x="155.08" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1861" width="0.8" height="15.0" fill="rgb(229,173,34)" rx="2" ry="2" />
<text  x="219.35" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1493" width="0.3" height="15.0" fill="rgb(234,63,28)" rx="2" ry="2" />
<text  x="190.04" y="1503.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="510.6" y="1845" width="0.1" height="15.0" fill="rgb(218,148,10)" rx="2" ry="2" />
<text  x="513.59" y="1855.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (4 samples, 0.02%)</title><rect x="694.1" y="1749" width="0.2" height="15.0" fill="rgb(215,17,45)" rx="2" ry="2" />
<text  x="697.06" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (42 samples, 0.21%)</title><rect x="211.7" y="1685" width="2.5" height="15.0" fill="rgb(221,36,30)" rx="2" ry="2" />
<text  x="214.69" y="1695.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="154.6" y="1669" width="0.1" height="15.0" fill="rgb(215,74,48)" rx="2" ry="2" />
<text  x="157.62" y="1679.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.01%)</title><rect x="765.8" y="1845" width="0.1" height="15.0" fill="rgb(235,204,29)" rx="2" ry="2" />
<text  x="768.75" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="853" width="20.4" height="15.0" fill="rgb(230,187,30)" rx="2" ry="2" />
<text  x="58.22" y="863.5" ></text>
</g>
<g >
<title>unmap_page_range (5 samples, 0.02%)</title><rect x="1101.0" y="1861" width="0.3" height="15.0" fill="rgb(227,169,32)" rx="2" ry="2" />
<text  x="1103.98" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (91 samples, 0.45%)</title><rect x="146.6" y="1701" width="5.4" height="15.0" fill="rgb(220,81,36)" rx="2" ry="2" />
<text  x="149.60" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (15 samples, 0.07%)</title><rect x="1145.2" y="2053" width="0.9" height="15.0" fill="rgb(209,207,9)" rx="2" ry="2" />
<text  x="1148.19" y="2063.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="82.3" y="1365" width="0.1" height="15.0" fill="rgb(253,108,2)" rx="2" ry="2" />
<text  x="85.28" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1093" width="0.1" height="15.0" fill="rgb(251,104,39)" rx="2" ry="2" />
<text  x="57.98" y="1103.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.02%)</title><rect x="1102.6" y="2037" width="0.3" height="15.0" fill="rgb(227,74,34)" rx="2" ry="2" />
<text  x="1105.63" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (10 samples, 0.05%)</title><rect x="186.1" y="1877" width="0.6" height="15.0" fill="rgb(215,13,47)" rx="2" ry="2" />
<text  x="189.10" y="1887.5" ></text>
</g>
<g >
<title>do_page_fault (19 samples, 0.09%)</title><rect x="678.0" y="1829" width="1.1" height="15.0" fill="rgb(211,132,26)" rx="2" ry="2" />
<text  x="681.03" y="1839.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="176.7" y="1653" width="0.1" height="15.0" fill="rgb(212,124,43)" rx="2" ry="2" />
<text  x="179.73" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1621" width="0.3" height="15.0" fill="rgb(253,115,53)" rx="2" ry="2" />
<text  x="219.46" y="1631.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (7 samples, 0.03%)</title><rect x="592.1" y="1877" width="0.4" height="15.0" fill="rgb(219,93,1)" rx="2" ry="2" />
<text  x="595.13" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="213" width="0.2" height="15.0" fill="rgb(240,85,42)" rx="2" ry="2" />
<text  x="1190.35" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (3 samples, 0.01%)</title><rect x="189.4" y="1621" width="0.2" height="15.0" fill="rgb(233,128,26)" rx="2" ry="2" />
<text  x="192.40" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1509" width="0.4" height="15.0" fill="rgb(240,167,17)" rx="2" ry="2" />
<text  x="1189.88" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1381" width="0.4" height="15.0" fill="rgb(210,147,31)" rx="2" ry="2" />
<text  x="1189.88" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1493" width="0.2" height="15.0" fill="rgb(225,104,50)" rx="2" ry="2" />
<text  x="1190.29" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (82 samples, 0.41%)</title><rect x="136.2" y="1669" width="4.9" height="15.0" fill="rgb(231,73,44)" rx="2" ry="2" />
<text  x="139.22" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="181" width="0.2" height="15.0" fill="rgb(207,136,11)" rx="2" ry="2" />
<text  x="1190.35" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (82 samples, 0.41%)</title><rect x="136.2" y="1685" width="4.9" height="15.0" fill="rgb(218,227,23)" rx="2" ry="2" />
<text  x="139.22" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1285" width="0.3" height="15.0" fill="rgb(214,170,2)" rx="2" ry="2" />
<text  x="219.82" y="1295.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="656.5" y="1781" width="0.1" height="15.0" fill="rgb(254,67,26)" rx="2" ry="2" />
<text  x="659.45" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (21 samples, 0.10%)</title><rect x="1099.1" y="2053" width="1.2" height="15.0" fill="rgb(212,95,25)" rx="2" ry="2" />
<text  x="1102.09" y="2063.5" ></text>
</g>
<g >
<title>__interceptor_strlen (2 samples, 0.01%)</title><rect x="596.2" y="1877" width="0.1" height="15.0" fill="rgb(209,222,46)" rx="2" ry="2" />
<text  x="599.20" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="215.2" y="1749" width="0.1" height="15.0" fill="rgb(230,187,28)" rx="2" ry="2" />
<text  x="218.17" y="1759.5" ></text>
</g>
<g >
<title>clear_page_erms (12 samples, 0.06%)</title><rect x="944.9" y="1893" width="0.7" height="15.0" fill="rgb(245,27,28)" rx="2" ry="2" />
<text  x="947.92" y="1903.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (225 samples, 1.12%)</title><rect x="314.5" y="1973" width="13.3" height="15.0" fill="rgb(237,27,32)" rx="2" ry="2" />
<text  x="317.51" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (349 samples, 1.74%)</title><rect x="189.2" y="1813" width="20.6" height="15.0" fill="rgb(228,86,21)" rx="2" ry="2" />
<text  x="192.23" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1525" width="0.3" height="15.0" fill="rgb(232,40,54)" rx="2" ry="2" />
<text  x="190.04" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="101" width="0.3" height="15.0" fill="rgb(226,35,15)" rx="2" ry="2" />
<text  x="1189.52" y="111.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="2021" width="0.2" height="15.0" fill="rgb(205,151,3)" rx="2" ry="2" />
<text  x="57.98" y="2031.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (22 samples, 0.11%)</title><rect x="27.1" y="1957" width="1.3" height="15.0" fill="rgb(247,178,27)" rx="2" ry="2" />
<text  x="30.10" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1861" width="0.1" height="15.0" fill="rgb(216,94,16)" rx="2" ry="2" />
<text  x="161.98" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1893" width="0.2" height="15.0" fill="rgb(228,140,4)" rx="2" ry="2" />
<text  x="57.98" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1317" width="0.3" height="15.0" fill="rgb(252,155,43)" rx="2" ry="2" />
<text  x="1189.52" y="1327.5" ></text>
</g>
<g >
<title>__interceptor_memchr (2 samples, 0.01%)</title><rect x="1006.5" y="2053" width="0.1" height="15.0" fill="rgb(241,14,11)" rx="2" ry="2" />
<text  x="1009.53" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (8 samples, 0.04%)</title><rect x="874.7" y="2005" width="0.5" height="15.0" fill="rgb(232,131,21)" rx="2" ry="2" />
<text  x="877.70" y="2015.5" ></text>
</g>
<g >
<title>alloc_pages_vma (27 samples, 0.13%)</title><rect x="25.1" y="1957" width="1.6" height="15.0" fill="rgb(210,136,16)" rx="2" ry="2" />
<text  x="28.09" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (556 samples, 2.78%)</title><rect x="55.2" y="1829" width="32.7" height="15.0" fill="rgb(226,173,45)" rx="2" ry="2" />
<text  x="58.16" y="1839.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="325" width="0.2" height="15.0" fill="rgb(233,4,39)" rx="2" ry="2" />
<text  x="1190.35" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1157" width="0.4" height="15.0" fill="rgb(207,189,29)" rx="2" ry="2" />
<text  x="1189.88" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1541" width="0.3" height="15.0" fill="rgb(206,78,1)" rx="2" ry="2" />
<text  x="190.04" y="1551.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (120 samples, 0.60%)</title><rect x="1016.2" y="2053" width="7.1" height="15.0" fill="rgb(230,50,51)" rx="2" ry="2" />
<text  x="1019.20" y="2063.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.01%)</title><rect x="183.2" y="1653" width="0.2" height="15.0" fill="rgb(216,228,0)" rx="2" ry="2" />
<text  x="186.21" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1557" width="0.4" height="15.0" fill="rgb(207,29,23)" rx="2" ry="2" />
<text  x="1189.88" y="1567.5" ></text>
</g>
<g >
<title>fasttext::Vector::Vector (2 samples, 0.01%)</title><rect x="802.5" y="2037" width="0.2" height="15.0" fill="rgb(224,210,2)" rx="2" ry="2" />
<text  x="805.54" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="193.4" y="1557" width="0.1" height="15.0" fill="rgb(208,131,15)" rx="2" ry="2" />
<text  x="196.35" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="213.0" y="1669" width="0.2" height="15.0" fill="rgb(220,44,2)" rx="2" ry="2" />
<text  x="216.04" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (360 samples, 1.80%)</title><rect x="1124.0" y="2053" width="21.2" height="15.0" fill="rgb(232,50,23)" rx="2" ry="2" />
<text  x="1126.97" y="2063.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (24 samples, 0.12%)</title><rect x="764.9" y="1989" width="1.4" height="15.0" fill="rgb(225,139,41)" rx="2" ry="2" />
<text  x="767.87" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform (7 samples, 0.03%)</title><rect x="1146.1" y="2053" width="0.4" height="15.0" fill="rgb(228,39,29)" rx="2" ry="2" />
<text  x="1149.14" y="2063.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (7 samples, 0.03%)</title><rect x="521.1" y="1925" width="0.5" height="15.0" fill="rgb(236,162,17)" rx="2" ry="2" />
<text  x="524.15" y="1935.5" ></text>
</g>
<g >
<title>__interceptor_strlen (7 samples, 0.03%)</title><rect x="1008.8" y="2053" width="0.4" height="15.0" fill="rgb(224,141,51)" rx="2" ry="2" />
<text  x="1011.77" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_subexpr_end (2 samples, 0.01%)</title><rect x="194.1" y="1685" width="0.1" height="15.0" fill="rgb(208,10,47)" rx="2" ry="2" />
<text  x="197.12" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="216.9" y="1237" width="0.2" height="15.0" fill="rgb(219,171,17)" rx="2" ry="2" />
<text  x="219.88" y="1247.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (48 samples, 0.24%)</title><rect x="972.0" y="2053" width="2.8" height="15.0" fill="rgb(244,200,21)" rx="2" ry="2" />
<text  x="974.98" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (3 samples, 0.01%)</title><rect x="199.0" y="1685" width="0.1" height="15.0" fill="rgb(252,96,47)" rx="2" ry="2" />
<text  x="201.95" y="1695.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (15 samples, 0.07%)</title><rect x="128.6" y="1909" width="0.9" height="15.0" fill="rgb(223,16,1)" rx="2" ry="2" />
<text  x="131.62" y="1919.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (3,061 samples, 15.29%)</title><rect x="573.3" y="1941" width="180.4" height="15.0" fill="rgb(219,7,54)" rx="2" ry="2" />
<text  x="576.26" y="1951.5" >onmt::ITokenizer::token..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1477" width="0.3" height="15.0" fill="rgb(223,96,45)" rx="2" ry="2" />
<text  x="219.82" y="1487.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.02%)</title><rect x="138.6" y="1589" width="0.3" height="15.0" fill="rgb(240,222,19)" rx="2" ry="2" />
<text  x="141.64" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.5" y="1349" width="0.3" height="15.0" fill="rgb(217,83,18)" rx="2" ry="2" />
<text  x="219.52" y="1359.5" ></text>
</g>
<g >
<title>GetHost (481 samples, 2.40%)</title><rect x="188.8" y="1973" width="28.3" height="15.0" fill="rgb(214,193,29)" rx="2" ry="2" />
<text  x="191.75" y="1983.5" >Ge..</text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (134 samples, 0.67%)</title><rect x="500.7" y="1941" width="7.9" height="15.0" fill="rgb(241,179,33)" rx="2" ry="2" />
<text  x="503.69" y="1951.5" ></text>
</g>
<g >
<title>Rank (973 samples, 4.86%)</title><rect x="130.7" y="2005" width="57.3" height="15.0" fill="rgb(206,79,34)" rx="2" ry="2" />
<text  x="133.68" y="2015.5" >Rank</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (61 samples, 0.30%)</title><rect x="807.0" y="2005" width="3.6" height="15.0" fill="rgb(253,211,35)" rx="2" ry="2" />
<text  x="810.02" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1445" width="0.3" height="15.0" fill="rgb(244,213,47)" rx="2" ry="2" />
<text  x="190.04" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1861" width="0.2" height="15.0" fill="rgb(221,79,24)" rx="2" ry="2" />
<text  x="57.98" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="75.9" y="1061" width="0.1" height="15.0" fill="rgb(229,17,38)" rx="2" ry="2" />
<text  x="78.91" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1957" width="0.2" height="15.0" fill="rgb(210,56,35)" rx="2" ry="2" />
<text  x="57.98" y="1967.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (133 samples, 0.66%)</title><rect x="1162.5" y="2037" width="7.8" height="15.0" fill="rgb(210,42,18)" rx="2" ry="2" />
<text  x="1165.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (65 samples, 0.32%)</title><rect x="176.8" y="1653" width="3.9" height="15.0" fill="rgb(219,149,16)" rx="2" ry="2" />
<text  x="179.84" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1845" width="0.4" height="15.0" fill="rgb(215,135,54)" rx="2" ry="2" />
<text  x="1189.88" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1187.0" y="37" width="0.3" height="15.0" fill="rgb(210,104,53)" rx="2" ry="2" />
<text  x="1189.99" y="47.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="516.4" y="1989" width="0.1" height="15.0" fill="rgb(217,219,38)" rx="2" ry="2" />
<text  x="519.37" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1349" width="0.1" height="15.0" fill="rgb(229,190,32)" rx="2" ry="2" />
<text  x="57.98" y="1359.5" ></text>
</g>
<g >
<title>should_fail_alloc_page (2 samples, 0.01%)</title><rect x="26.6" y="1941" width="0.1" height="15.0" fill="rgb(208,17,28)" rx="2" ry="2" />
<text  x="29.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="805" width="0.2" height="15.0" fill="rgb(208,64,8)" rx="2" ry="2" />
<text  x="1190.29" y="815.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (2 samples, 0.01%)</title><rect x="652.9" y="1781" width="0.1" height="15.0" fill="rgb(242,171,45)" rx="2" ry="2" />
<text  x="655.85" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="149" width="0.2" height="15.0" fill="rgb(207,116,52)" rx="2" ry="2" />
<text  x="1190.35" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1461" width="0.4" height="15.0" fill="rgb(250,115,26)" rx="2" ry="2" />
<text  x="1189.88" y="1471.5" ></text>
</g>
<g >
<title>unmap_single_vma (5 samples, 0.02%)</title><rect x="1101.0" y="1877" width="0.3" height="15.0" fill="rgb(246,221,49)" rx="2" ry="2" />
<text  x="1103.98" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (435 samples, 2.17%)</title><rect x="55.2" y="1397" width="25.7" height="15.0" fill="rgb(221,220,49)" rx="2" ry="2" />
<text  x="58.22" y="1407.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (471 samples, 2.35%)</title><rect x="131.1" y="1925" width="27.8" height="15.0" fill="rgb(214,111,12)" rx="2" ry="2" />
<text  x="134.10" y="1935.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="245" width="0.2" height="15.0" fill="rgb(239,174,32)" rx="2" ry="2" />
<text  x="1190.35" y="255.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (23 samples, 0.11%)</title><rect x="485.2" y="1925" width="1.4" height="15.0" fill="rgb(250,142,38)" rx="2" ry="2" />
<text  x="488.24" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.01%)</title><rect x="215.3" y="1845" width="0.2" height="15.0" fill="rgb(211,146,27)" rx="2" ry="2" />
<text  x="218.34" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (464 samples, 2.32%)</title><rect x="159.3" y="1925" width="27.4" height="15.0" fill="rgb(211,137,17)" rx="2" ry="2" />
<text  x="162.33" y="1935.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="134.5" y="1557" width="0.1" height="15.0" fill="rgb(238,64,25)" rx="2" ry="2" />
<text  x="137.51" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1077" width="0.2" height="15.0" fill="rgb(238,215,13)" rx="2" ry="2" />
<text  x="1190.29" y="1087.5" ></text>
</g>
<g >
<title>page_fault (29 samples, 0.14%)</title><rect x="53.3" y="2021" width="1.7" height="15.0" fill="rgb(244,170,32)" rx="2" ry="2" />
<text  x="56.27" y="2031.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.23%)</title><rect x="606.7" y="1861" width="2.8" height="15.0" fill="rgb(242,116,5)" rx="2" ry="2" />
<text  x="609.69" y="1871.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.15%)</title><rect x="632.6" y="1877" width="1.7" height="15.0" fill="rgb(226,133,14)" rx="2" ry="2" />
<text  x="635.57" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1829" width="0.5" height="15.0" fill="rgb(233,113,11)" rx="2" ry="2" />
<text  x="189.81" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (359 samples, 1.79%)</title><rect x="55.2" y="1109" width="21.2" height="15.0" fill="rgb(226,84,26)" rx="2" ry="2" />
<text  x="58.22" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (71 samples, 0.35%)</title><rect x="199.4" y="1749" width="4.2" height="15.0" fill="rgb(217,52,35)" rx="2" ry="2" />
<text  x="202.37" y="1759.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="198.8" y="1621" width="0.2" height="15.0" fill="rgb(224,108,23)" rx="2" ry="2" />
<text  x="201.84" y="1631.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="197.5" y="1589" width="0.1" height="15.0" fill="rgb(227,209,22)" rx="2" ry="2" />
<text  x="200.48" y="1599.5" ></text>
</g>
<g >
<title>alloc_pages_vma (25 samples, 0.12%)</title><rect x="509.0" y="1877" width="1.5" height="15.0" fill="rgb(253,86,12)" rx="2" ry="2" />
<text  x="512.00" y="1887.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (22 samples, 0.11%)</title><rect x="29.3" y="2037" width="1.3" height="15.0" fill="rgb(231,131,23)" rx="2" ry="2" />
<text  x="32.34" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_subexpr_begin (2 samples, 0.01%)</title><rect x="152.0" y="1765" width="0.1" height="15.0" fill="rgb(205,106,6)" rx="2" ry="2" />
<text  x="154.97" y="1775.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="514.5" y="1973" width="0.1" height="15.0" fill="rgb(245,127,31)" rx="2" ry="2" />
<text  x="517.48" y="1983.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="1027.3" y="2005" width="0.1" height="15.0" fill="rgb(227,76,18)" rx="2" ry="2" />
<text  x="1030.28" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="91.2" y="2005" width="0.2" height="15.0" fill="rgb(215,24,14)" rx="2" ry="2" />
<text  x="94.24" y="2015.5" ></text>
</g>
<g >
<title>handle_mm_fault (21 samples, 0.10%)</title><rect x="499.5" y="1877" width="1.2" height="15.0" fill="rgb(232,1,37)" rx="2" ry="2" />
<text  x="502.45" y="1887.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.01%)</title><rect x="134.7" y="1557" width="0.2" height="15.0" fill="rgb(223,129,6)" rx="2" ry="2" />
<text  x="137.69" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::MergeBatches (7 samples, 0.03%)</title><rect x="762.6" y="2037" width="0.4" height="15.0" fill="rgb(222,127,4)" rx="2" ry="2" />
<text  x="765.63" y="2047.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="150.2" y="1637" width="0.2" height="15.0" fill="rgb(246,104,31)" rx="2" ry="2" />
<text  x="153.20" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (22 samples, 0.11%)</title><rect x="1024.7" y="2053" width="1.3" height="15.0" fill="rgb(246,215,24)" rx="2" ry="2" />
<text  x="1027.69" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1381" width="0.3" height="15.0" fill="rgb(219,120,42)" rx="2" ry="2" />
<text  x="190.04" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="768.3" y="2021" width="0.2" height="15.0" fill="rgb(245,70,21)" rx="2" ry="2" />
<text  x="771.35" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (112 samples, 0.56%)</title><rect x="756.0" y="2037" width="6.6" height="15.0" fill="rgb(232,113,49)" rx="2" ry="2" />
<text  x="759.03" y="2047.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="491.5" y="1941" width="0.3" height="15.0" fill="rgb(227,56,27)" rx="2" ry="2" />
<text  x="494.49" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1109" width="0.4" height="15.0" fill="rgb(223,17,49)" rx="2" ry="2" />
<text  x="1189.88" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="117" width="19.3" height="15.0" fill="rgb(206,162,5)" rx="2" ry="2" />
<text  x="58.22" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="885" width="0.4" height="15.0" fill="rgb(227,86,28)" rx="2" ry="2" />
<text  x="1189.88" y="895.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (2 samples, 0.01%)</title><rect x="1100.7" y="1829" width="0.2" height="15.0" fill="rgb(241,62,54)" rx="2" ry="2" />
<text  x="1103.74" y="1839.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (2 samples, 0.01%)</title><rect x="693.8" y="1765" width="0.1" height="15.0" fill="rgb(212,108,54)" rx="2" ry="2" />
<text  x="696.83" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="165" width="0.3" height="15.0" fill="rgb(223,10,0)" rx="2" ry="2" />
<text  x="1189.52" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="2005" width="0.5" height="15.0" fill="rgb(209,106,49)" rx="2" ry="2" />
<text  x="1189.29" y="2015.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="202.5" y="1605" width="0.3" height="15.0" fill="rgb(229,108,18)" rx="2" ry="2" />
<text  x="205.55" y="1615.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.01%)</title><rect x="1189.4" y="1989" width="0.1" height="15.0" fill="rgb(218,99,8)" rx="2" ry="2" />
<text  x="1192.35" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (7 samples, 0.03%)</title><rect x="578.3" y="1877" width="0.4" height="15.0" fill="rgb(226,138,43)" rx="2" ry="2" />
<text  x="581.33" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="549" width="0.4" height="15.0" fill="rgb(229,132,45)" rx="2" ry="2" />
<text  x="1189.88" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="164.1" y="1541" width="0.5" height="15.0" fill="rgb(208,22,35)" rx="2" ry="2" />
<text  x="167.11" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1493" width="0.1" height="15.0" fill="rgb(238,204,28)" rx="2" ry="2" />
<text  x="189.87" y="1503.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, nlohmann::detail::json_ref&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, nlohmann::detail::json_ref&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*&gt; (2 samples, 0.01%)</title><rect x="515.1" y="1989" width="0.2" height="15.0" fill="rgb(210,100,13)" rx="2" ry="2" />
<text  x="518.13" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (612 samples, 3.06%)</title><rect x="55.2" y="2005" width="36.0" height="15.0" fill="rgb(217,224,50)" rx="2" ry="2" />
<text  x="58.16" y="2015.5" >[un..</text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="79.3" y="1269" width="0.1" height="15.0" fill="rgb(225,73,12)" rx="2" ry="2" />
<text  x="82.33" y="1279.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (221 samples, 1.10%)</title><rect x="697.4" y="1861" width="13.1" height="15.0" fill="rgb(212,160,2)" rx="2" ry="2" />
<text  x="700.42" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (94 samples, 0.47%)</title><rect x="152.3" y="1797" width="5.6" height="15.0" fill="rgb(216,219,43)" rx="2" ry="2" />
<text  x="155.32" y="1807.5" ></text>
</g>
<g >
<title>__interceptor_strlen (91 samples, 0.45%)</title><rect x="746.4" y="1877" width="5.3" height="15.0" fill="rgb(225,10,2)" rx="2" ry="2" />
<text  x="749.36" y="1887.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (42 samples, 0.21%)</title><rect x="1103.8" y="2053" width="2.5" height="15.0" fill="rgb(228,107,2)" rx="2" ry="2" />
<text  x="1106.81" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1253" width="0.3" height="15.0" fill="rgb(232,220,43)" rx="2" ry="2" />
<text  x="219.82" y="1263.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="144.1" y="1605" width="0.2" height="15.0" fill="rgb(216,174,25)" rx="2" ry="2" />
<text  x="147.07" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 1.65%)</title><rect x="55.2" y="261" width="19.5" height="15.0" fill="rgb(246,37,46)" rx="2" ry="2" />
<text  x="58.22" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1909" width="0.2" height="15.0" fill="rgb(212,191,27)" rx="2" ry="2" />
<text  x="57.98" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (98 samples, 0.49%)</title><rect x="165.3" y="1653" width="5.8" height="15.0" fill="rgb(225,88,8)" rx="2" ry="2" />
<text  x="168.35" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="136.1" y="1685" width="0.1" height="15.0" fill="rgb(228,130,37)" rx="2" ry="2" />
<text  x="139.11" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1189" width="0.4" height="15.0" fill="rgb(209,158,38)" rx="2" ry="2" />
<text  x="1189.88" y="1199.5" ></text>
</g>
<g >
<title>__asan_memmove (2 samples, 0.01%)</title><rect x="537.8" y="1909" width="0.1" height="15.0" fill="rgb(251,154,39)" rx="2" ry="2" />
<text  x="540.83" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="197" width="0.3" height="15.0" fill="rgb(244,76,16)" rx="2" ry="2" />
<text  x="1189.52" y="207.5" ></text>
</g>
<g >
<title>[unknown] (548 samples, 2.74%)</title><rect x="55.2" y="1781" width="32.3" height="15.0" fill="rgb(243,229,29)" rx="2" ry="2" />
<text  x="58.16" y="1791.5" >[u..</text>
</g>
<g >
<title>__sanitizer::MonotonicNanoTime (4 samples, 0.02%)</title><rect x="1023.6" y="2053" width="0.3" height="15.0" fill="rgb(223,76,0)" rx="2" ry="2" />
<text  x="1026.63" y="2063.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="484.9" y="1925" width="0.1" height="15.0" fill="rgb(222,89,31)" rx="2" ry="2" />
<text  x="487.89" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (138 samples, 0.69%)</title><rect x="121.7" y="1973" width="8.2" height="15.0" fill="rgb(221,91,17)" rx="2" ry="2" />
<text  x="124.72" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (450 samples, 2.25%)</title><rect x="159.5" y="1829" width="26.5" height="15.0" fill="rgb(238,39,5)" rx="2" ry="2" />
<text  x="162.45" y="1839.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1653" width="0.3" height="15.0" fill="rgb(238,41,30)" rx="2" ry="2" />
<text  x="219.46" y="1663.5" ></text>
</g>
<g >
<title>__do_munmap (15 samples, 0.07%)</title><rect x="765.0" y="1909" width="0.9" height="15.0" fill="rgb(206,8,53)" rx="2" ry="2" />
<text  x="767.99" y="1919.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="1023.4" y="1957" width="0.2" height="15.0" fill="rgb(236,41,10)" rx="2" ry="2" />
<text  x="1026.45" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="1957" width="0.1" height="15.0" fill="rgb(216,34,14)" rx="2" ry="2" />
<text  x="1189.17" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1541" width="0.1" height="15.0" fill="rgb(217,130,30)" rx="2" ry="2" />
<text  x="189.87" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1509" width="0.1" height="15.0" fill="rgb(243,97,17)" rx="2" ry="2" />
<text  x="57.98" y="1519.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (312 samples, 1.56%)</title><rect x="223.8" y="1973" width="18.4" height="15.0" fill="rgb(227,83,35)" rx="2" ry="2" />
<text  x="226.77" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (4 samples, 0.02%)</title><rect x="208.7" y="1637" width="0.3" height="15.0" fill="rgb(209,20,10)" rx="2" ry="2" />
<text  x="211.74" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1605" width="0.3" height="15.0" fill="rgb(245,194,25)" rx="2" ry="2" />
<text  x="190.04" y="1615.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="130.2" y="1957" width="0.1" height="15.0" fill="rgb(221,140,35)" rx="2" ry="2" />
<text  x="133.15" y="1967.5" ></text>
</g>
<g >
<title>smp_call_function_many (21 samples, 0.10%)</title><rect x="947.6" y="1845" width="1.3" height="15.0" fill="rgb(244,80,52)" rx="2" ry="2" />
<text  x="950.63" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (3 samples, 0.01%)</title><rect x="189.4" y="1637" width="0.2" height="15.0" fill="rgb(231,181,17)" rx="2" ry="2" />
<text  x="192.40" y="1647.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.01%)</title><rect x="766.3" y="2005" width="0.2" height="15.0" fill="rgb(211,121,18)" rx="2" ry="2" />
<text  x="769.28" y="2015.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (17 samples, 0.08%)</title><rect x="99.7" y="2037" width="1.0" height="15.0" fill="rgb(252,188,12)" rx="2" ry="2" />
<text  x="102.67" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1957" width="0.4" height="15.0" fill="rgb(230,182,14)" rx="2" ry="2" />
<text  x="1189.88" y="1967.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="90.8" y="1973" width="0.1" height="15.0" fill="rgb(250,116,6)" rx="2" ry="2" />
<text  x="93.83" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="81.7" y="1429" width="0.2" height="15.0" fill="rgb(246,140,32)" rx="2" ry="2" />
<text  x="84.75" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="1989" width="0.5" height="15.0" fill="rgb(245,16,49)" rx="2" ry="2" />
<text  x="1189.29" y="1999.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (35 samples, 0.17%)</title><rect x="974.8" y="2053" width="2.1" height="15.0" fill="rgb(229,39,25)" rx="2" ry="2" />
<text  x="977.81" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="871.8" y="2021" width="0.3" height="15.0" fill="rgb(235,37,7)" rx="2" ry="2" />
<text  x="874.82" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="581" width="0.4" height="15.0" fill="rgb(247,56,22)" rx="2" ry="2" />
<text  x="1189.88" y="591.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.02%)</title><rect x="515.3" y="1989" width="0.2" height="15.0" fill="rgb(227,214,35)" rx="2" ry="2" />
<text  x="518.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1637" width="0.2" height="15.0" fill="rgb(228,210,40)" rx="2" ry="2" />
<text  x="1190.29" y="1647.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (3 samples, 0.01%)</title><rect x="43.5" y="2037" width="0.2" height="15.0" fill="rgb(243,209,28)" rx="2" ry="2" />
<text  x="46.55" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1349" width="0.2" height="15.0" fill="rgb(235,176,3)" rx="2" ry="2" />
<text  x="1190.29" y="1359.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.02%)</title><rect x="184.9" y="1653" width="0.3" height="15.0" fill="rgb(224,91,39)" rx="2" ry="2" />
<text  x="187.92" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1285" width="0.3" height="15.0" fill="rgb(246,154,11)" rx="2" ry="2" />
<text  x="1189.52" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="661" width="0.3" height="15.0" fill="rgb(252,57,28)" rx="2" ry="2" />
<text  x="1189.52" y="671.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (4 samples, 0.02%)</title><rect x="518.8" y="2037" width="0.2" height="15.0" fill="rgb(217,3,37)" rx="2" ry="2" />
<text  x="521.79" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="1941" width="0.5" height="15.0" fill="rgb(224,148,37)" rx="2" ry="2" />
<text  x="1189.29" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1861" width="0.5" height="15.0" fill="rgb(235,211,32)" rx="2" ry="2" />
<text  x="1189.34" y="1871.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="191.9" y="1557" width="0.1" height="15.0" fill="rgb(244,213,39)" rx="2" ry="2" />
<text  x="194.88" y="1567.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="167.2" y="1573" width="0.2" height="15.0" fill="rgb(213,169,30)" rx="2" ry="2" />
<text  x="170.24" y="1583.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="174.1" y="1589" width="0.3" height="15.0" fill="rgb(245,113,29)" rx="2" ry="2" />
<text  x="177.13" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1061" width="0.2" height="15.0" fill="rgb(252,178,26)" rx="2" ry="2" />
<text  x="1190.29" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.05%)</title><rect x="818.6" y="2005" width="0.6" height="15.0" fill="rgb(222,46,44)" rx="2" ry="2" />
<text  x="821.58" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="146.4" y="1685" width="0.1" height="15.0" fill="rgb(220,89,34)" rx="2" ry="2" />
<text  x="149.42" y="1695.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.02%)</title><rect x="157.0" y="1685" width="0.3" height="15.0" fill="rgb(249,94,33)" rx="2" ry="2" />
<text  x="160.04" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1781" width="0.4" height="15.0" fill="rgb(248,192,39)" rx="2" ry="2" />
<text  x="1189.88" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="485" width="19.7" height="15.0" fill="rgb(249,123,39)" rx="2" ry="2" />
<text  x="58.22" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (240 samples, 1.20%)</title><rect x="737.6" y="1893" width="14.1" height="15.0" fill="rgb(210,86,51)" rx="2" ry="2" />
<text  x="740.57" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="205.3" y="1653" width="0.2" height="15.0" fill="rgb(247,182,54)" rx="2" ry="2" />
<text  x="208.26" y="1663.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (9 samples, 0.04%)</title><rect x="814.0" y="2005" width="0.6" height="15.0" fill="rgb(213,151,32)" rx="2" ry="2" />
<text  x="817.04" y="2015.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.01%)</title><rect x="1023.4" y="1973" width="0.2" height="15.0" fill="rgb(208,161,42)" rx="2" ry="2" />
<text  x="1026.45" y="1983.5" ></text>
</g>
<g >
<title>do_page_fault (95 samples, 0.47%)</title><rect x="23.1" y="2021" width="5.6" height="15.0" fill="rgb(218,71,48)" rx="2" ry="2" />
<text  x="26.09" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.02%)</title><rect x="189.3" y="1701" width="0.3" height="15.0" fill="rgb(238,224,4)" rx="2" ry="2" />
<text  x="192.28" y="1711.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.01%)</title><rect x="1102.7" y="1989" width="0.2" height="15.0" fill="rgb(206,128,4)" rx="2" ry="2" />
<text  x="1105.75" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1989" width="0.4" height="15.0" fill="rgb(206,22,19)" rx="2" ry="2" />
<text  x="1189.88" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (2 samples, 0.01%)</title><rect x="873.5" y="1941" width="0.1" height="15.0" fill="rgb(242,129,4)" rx="2" ry="2" />
<text  x="876.53" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (11 samples, 0.05%)</title><rect x="131.1" y="1701" width="0.6" height="15.0" fill="rgb(238,208,29)" rx="2" ry="2" />
<text  x="134.10" y="1711.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (2 samples, 0.01%)</title><rect x="516.1" y="1909" width="0.1" height="15.0" fill="rgb(209,57,50)" rx="2" ry="2" />
<text  x="519.08" y="1919.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (6 samples, 0.03%)</title><rect x="521.1" y="1909" width="0.4" height="15.0" fill="rgb(210,164,50)" rx="2" ry="2" />
<text  x="524.15" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1237" width="0.2" height="15.0" fill="rgb(205,224,19)" rx="2" ry="2" />
<text  x="219.64" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1605" width="0.1" height="15.0" fill="rgb(249,147,34)" rx="2" ry="2" />
<text  x="57.98" y="1615.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.02%)</title><rect x="120.8" y="1973" width="0.3" height="15.0" fill="rgb(208,219,46)" rx="2" ry="2" />
<text  x="123.78" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="146.4" y="1701" width="0.1" height="15.0" fill="rgb(247,117,10)" rx="2" ry="2" />
<text  x="149.42" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (80 samples, 0.40%)</title><rect x="209.9" y="1733" width="4.7" height="15.0" fill="rgb(249,159,26)" rx="2" ry="2" />
<text  x="212.86" y="1743.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (7 samples, 0.03%)</title><rect x="121.3" y="1989" width="0.4" height="15.0" fill="rgb(246,123,26)" rx="2" ry="2" />
<text  x="124.31" y="1999.5" ></text>
</g>
<g >
<title>__interceptor_strlen (4 samples, 0.02%)</title><rect x="573.0" y="1925" width="0.3" height="15.0" fill="rgb(206,167,41)" rx="2" ry="2" />
<text  x="576.03" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="149.9" y="1637" width="0.1" height="15.0" fill="rgb(236,11,15)" rx="2" ry="2" />
<text  x="152.90" y="1647.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (5 samples, 0.02%)</title><rect x="315.9" y="1957" width="0.3" height="15.0" fill="rgb(233,174,36)" rx="2" ry="2" />
<text  x="318.86" y="1967.5" ></text>
</g>
<g >
<title>__asan_memset (12 samples, 0.06%)</title><rect x="655.2" y="1877" width="0.7" height="15.0" fill="rgb(223,0,22)" rx="2" ry="2" />
<text  x="658.21" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1717" width="0.2" height="15.0" fill="rgb(249,140,24)" rx="2" ry="2" />
<text  x="1190.29" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (72 samples, 0.36%)</title><rect x="131.7" y="1685" width="4.3" height="15.0" fill="rgb(216,21,9)" rx="2" ry="2" />
<text  x="134.74" y="1695.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="131.8" y="1589" width="0.1" height="15.0" fill="rgb(210,191,22)" rx="2" ry="2" />
<text  x="134.80" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (93 samples, 0.46%)</title><rect x="203.8" y="1685" width="5.5" height="15.0" fill="rgb(218,127,26)" rx="2" ry="2" />
<text  x="206.79" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (462 samples, 2.31%)</title><rect x="159.5" y="1909" width="27.2" height="15.0" fill="rgb(207,206,48)" rx="2" ry="2" />
<text  x="162.45" y="1919.5" >s..</text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="213.2" y="1669" width="0.3" height="15.0" fill="rgb(222,45,43)" rx="2" ry="2" />
<text  x="216.22" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (451 samples, 2.25%)</title><rect x="189.2" y="1925" width="26.6" height="15.0" fill="rgb(229,161,17)" rx="2" ry="2" />
<text  x="192.23" y="1935.5" >s..</text>
</g>
<g >
<title>[unknown] (631 samples, 3.15%)</title><rect x="55.2" y="2021" width="37.2" height="15.0" fill="rgb(205,151,4)" rx="2" ry="2" />
<text  x="58.16" y="2031.5" >[un..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (76 samples, 0.38%)</title><rect x="147.2" y="1669" width="4.5" height="15.0" fill="rgb(240,102,54)" rx="2" ry="2" />
<text  x="150.19" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (30 samples, 0.15%)</title><rect x="875.8" y="2005" width="1.7" height="15.0" fill="rgb(247,133,51)" rx="2" ry="2" />
<text  x="878.77" y="2015.5" ></text>
</g>
<g >
<title>ksys_read (2 samples, 0.01%)</title><rect x="119.8" y="1973" width="0.1" height="15.0" fill="rgb(251,141,5)" rx="2" ry="2" />
<text  x="122.78" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (337 samples, 1.68%)</title><rect x="55.2" y="549" width="19.9" height="15.0" fill="rgb(216,134,12)" rx="2" ry="2" />
<text  x="58.22" y="559.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="874.4" y="2005" width="0.1" height="15.0" fill="rgb(254,67,45)" rx="2" ry="2" />
<text  x="877.35" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (6 samples, 0.03%)</title><rect x="209.4" y="1797" width="0.4" height="15.0" fill="rgb(221,149,12)" rx="2" ry="2" />
<text  x="212.45" y="1807.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (5 samples, 0.02%)</title><rect x="945.9" y="1925" width="0.3" height="15.0" fill="rgb(243,146,5)" rx="2" ry="2" />
<text  x="948.92" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="173.2" y="1589" width="0.4" height="15.0" fill="rgb(218,14,49)" rx="2" ry="2" />
<text  x="176.25" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1397" width="0.2" height="15.0" fill="rgb(206,3,18)" rx="2" ry="2" />
<text  x="1190.29" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="421" width="0.3" height="15.0" fill="rgb(211,219,33)" rx="2" ry="2" />
<text  x="1189.52" y="431.5" ></text>
</g>
<g >
<title>do_page_fault (25 samples, 0.12%)</title><rect x="499.2" y="1909" width="1.5" height="15.0" fill="rgb(213,207,38)" rx="2" ry="2" />
<text  x="502.22" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (82 samples, 0.41%)</title><rect x="194.3" y="1733" width="4.8" height="15.0" fill="rgb(241,135,19)" rx="2" ry="2" />
<text  x="197.30" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1845" width="0.8" height="15.0" fill="rgb(248,44,12)" rx="2" ry="2" />
<text  x="219.35" y="1855.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="79.3" y="1301" width="0.1" height="15.0" fill="rgb(241,210,30)" rx="2" ry="2" />
<text  x="82.33" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (600 samples, 3.00%)</title><rect x="55.2" y="1989" width="35.3" height="15.0" fill="rgb(224,181,46)" rx="2" ry="2" />
<text  x="58.16" y="1999.5" >[u..</text>
</g>
<g >
<title>arch_tlb_finish_mmu (5 samples, 0.02%)</title><rect x="1100.7" y="1877" width="0.3" height="15.0" fill="rgb(244,117,13)" rx="2" ry="2" />
<text  x="1103.68" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter@plt (2 samples, 0.01%)</title><rect x="723.7" y="1877" width="0.1" height="15.0" fill="rgb(245,79,18)" rx="2" ry="2" />
<text  x="726.66" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (73 samples, 0.36%)</title><rect x="171.7" y="1621" width="4.3" height="15.0" fill="rgb(215,99,33)" rx="2" ry="2" />
<text  x="174.66" y="1631.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (19 samples, 0.09%)</title><rect x="323.1" y="1941" width="1.1" height="15.0" fill="rgb(215,73,54)" rx="2" ry="2" />
<text  x="326.06" y="1951.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (2 samples, 0.01%)</title><rect x="521.3" y="1781" width="0.1" height="15.0" fill="rgb(208,191,25)" rx="2" ry="2" />
<text  x="524.32" y="1791.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (3 samples, 0.01%)</title><rect x="324.2" y="1941" width="0.2" height="15.0" fill="rgb(211,181,18)" rx="2" ry="2" />
<text  x="327.18" y="1951.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 0.01%)</title><rect x="79.3" y="1205" width="0.1" height="15.0" fill="rgb(243,54,29)" rx="2" ry="2" />
<text  x="82.33" y="1215.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (2 samples, 0.01%)</title><rect x="1119.3" y="2053" width="0.1" height="15.0" fill="rgb(240,195,45)" rx="2" ry="2" />
<text  x="1122.31" y="2063.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (5 samples, 0.02%)</title><rect x="54.6" y="1765" width="0.3" height="15.0" fill="rgb(206,101,30)" rx="2" ry="2" />
<text  x="57.63" y="1775.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.01%)</title><rect x="521.6" y="1941" width="0.1" height="15.0" fill="rgb(213,227,22)" rx="2" ry="2" />
<text  x="524.56" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="215.3" y="1829" width="0.2" height="15.0" fill="rgb(206,69,41)" rx="2" ry="2" />
<text  x="218.34" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.01%)</title><rect x="1121.7" y="2037" width="0.1" height="15.0" fill="rgb(243,44,21)" rx="2" ry="2" />
<text  x="1124.67" y="2047.5" ></text>
</g>
<g >
<title>smp_call_function_single (5 samples, 0.02%)</title><rect x="54.6" y="1813" width="0.3" height="15.0" fill="rgb(250,52,31)" rx="2" ry="2" />
<text  x="57.63" y="1823.5" ></text>
</g>
<g >
<title>__lru_cache_add (5 samples, 0.02%)</title><rect x="945.9" y="1909" width="0.3" height="15.0" fill="rgb(242,57,0)" rx="2" ry="2" />
<text  x="948.92" y="1919.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="802.5" y="2021" width="0.2" height="15.0" fill="rgb(246,186,48)" rx="2" ry="2" />
<text  x="805.54" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1669" width="0.3" height="15.0" fill="rgb(223,51,6)" rx="2" ry="2" />
<text  x="219.46" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (12 samples, 0.06%)</title><rect x="186.7" y="1941" width="0.7" height="15.0" fill="rgb(250,129,47)" rx="2" ry="2" />
<text  x="189.69" y="1951.5" ></text>
</g>
<g >
<title>ksys_read (4 samples, 0.02%)</title><rect x="1110.9" y="1973" width="0.3" height="15.0" fill="rgb(231,225,5)" rx="2" ry="2" />
<text  x="1113.94" y="1983.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (7 samples, 0.03%)</title><rect x="693.3" y="1749" width="0.4" height="15.0" fill="rgb(226,179,49)" rx="2" ry="2" />
<text  x="696.30" y="1759.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (2 samples, 0.01%)</title><rect x="94.1" y="2021" width="0.1" height="15.0" fill="rgb(234,84,41)" rx="2" ry="2" />
<text  x="97.13" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="293" width="0.4" height="15.0" fill="rgb(244,82,42)" rx="2" ry="2" />
<text  x="1189.88" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1413" width="0.1" height="15.0" fill="rgb(218,189,2)" rx="2" ry="2" />
<text  x="189.87" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1765" width="0.1" height="15.0" fill="rgb(218,16,19)" rx="2" ry="2" />
<text  x="161.98" y="1775.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (53 samples, 0.26%)</title><rect x="576.2" y="1893" width="3.1" height="15.0" fill="rgb(205,187,52)" rx="2" ry="2" />
<text  x="579.15" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (64 samples, 0.32%)</title><rect x="803.1" y="2037" width="3.8" height="15.0" fill="rgb(228,182,0)" rx="2" ry="2" />
<text  x="806.13" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="152.1" y="1781" width="0.1" height="15.0" fill="rgb(228,119,1)" rx="2" ry="2" />
<text  x="155.08" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1925" width="0.2" height="15.0" fill="rgb(251,95,18)" rx="2" ry="2" />
<text  x="520.20" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13 samples, 0.06%)</title><rect x="216.3" y="1941" width="0.8" height="15.0" fill="rgb(250,103,18)" rx="2" ry="2" />
<text  x="219.29" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1125" width="0.2" height="15.0" fill="rgb(243,108,51)" rx="2" ry="2" />
<text  x="1190.29" y="1135.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="161.7" y="1541" width="0.1" height="15.0" fill="rgb(219,147,43)" rx="2" ry="2" />
<text  x="164.69" y="1551.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (14 samples, 0.07%)</title><rect x="126.3" y="1909" width="0.8" height="15.0" fill="rgb(229,106,7)" rx="2" ry="2" />
<text  x="129.26" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="981" width="0.4" height="15.0" fill="rgb(213,9,49)" rx="2" ry="2" />
<text  x="1189.88" y="991.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="85.5" y="1653" width="0.1" height="15.0" fill="rgb(247,202,19)" rx="2" ry="2" />
<text  x="88.46" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="789" width="0.4" height="15.0" fill="rgb(251,124,6)" rx="2" ry="2" />
<text  x="1189.88" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1461" width="0.3" height="15.0" fill="rgb(231,207,16)" rx="2" ry="2" />
<text  x="1189.52" y="1471.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="144.3" y="1605" width="0.2" height="15.0" fill="rgb(237,149,22)" rx="2" ry="2" />
<text  x="147.30" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1461" width="0.3" height="15.0" fill="rgb(206,142,15)" rx="2" ry="2" />
<text  x="219.82" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1557" width="0.3" height="15.0" fill="rgb(206,121,51)" rx="2" ry="2" />
<text  x="190.04" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (171 samples, 0.85%)</title><rect x="189.3" y="1765" width="10.1" height="15.0" fill="rgb(230,152,11)" rx="2" ry="2" />
<text  x="192.28" y="1775.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (2 samples, 0.01%)</title><rect x="543.8" y="1909" width="0.2" height="15.0" fill="rgb(213,90,2)" rx="2" ry="2" />
<text  x="546.84" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="1101.8" y="2053" width="0.1" height="15.0" fill="rgb(209,103,22)" rx="2" ry="2" />
<text  x="1104.80" y="2063.5" ></text>
</g>
<g >
<title>page_fault (5 samples, 0.02%)</title><rect x="730.1" y="1877" width="0.3" height="15.0" fill="rgb(226,74,51)" rx="2" ry="2" />
<text  x="733.09" y="1887.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (9 samples, 0.04%)</title><rect x="495.4" y="1957" width="0.5" height="15.0" fill="rgb(237,130,7)" rx="2" ry="2" />
<text  x="498.38" y="1967.5" ></text>
</g>
<g >
<title>__asan_memset (31 samples, 0.15%)</title><rect x="680.9" y="1861" width="1.8" height="15.0" fill="rgb(228,18,39)" rx="2" ry="2" />
<text  x="683.86" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (30 samples, 0.15%)</title><rect x="487.7" y="1925" width="1.8" height="15.0" fill="rgb(212,93,52)" rx="2" ry="2" />
<text  x="490.72" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (70 samples, 0.35%)</title><rect x="199.4" y="1733" width="4.2" height="15.0" fill="rgb(215,204,34)" rx="2" ry="2" />
<text  x="202.42" y="1743.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="43.9" y="2037" width="0.1" height="15.0" fill="rgb(253,12,2)" rx="2" ry="2" />
<text  x="46.90" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (578 samples, 2.89%)</title><rect x="55.2" y="1909" width="34.0" height="15.0" fill="rgb(240,139,18)" rx="2" ry="2" />
<text  x="58.16" y="1919.5" >[u..</text>
</g>
<g >
<title>__interceptor_memcmp (3 samples, 0.01%)</title><rect x="538.0" y="1909" width="0.2" height="15.0" fill="rgb(209,122,48)" rx="2" ry="2" />
<text  x="541.01" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (495 samples, 2.47%)</title><rect x="55.2" y="1589" width="29.1" height="15.0" fill="rgb(242,28,35)" rx="2" ry="2" />
<text  x="58.16" y="1599.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (288 samples, 1.44%)</title><rect x="159.5" y="1765" width="16.9" height="15.0" fill="rgb(215,226,53)" rx="2" ry="2" />
<text  x="162.45" y="1775.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (6 samples, 0.03%)</title><rect x="513.9" y="1973" width="0.3" height="15.0" fill="rgb(250,188,39)" rx="2" ry="2" />
<text  x="516.90" y="1983.5" ></text>
</g>
<g >
<title>do_exit (8 samples, 0.04%)</title><rect x="1102.0" y="1989" width="0.5" height="15.0" fill="rgb(238,44,33)" rx="2" ry="2" />
<text  x="1104.98" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1653" width="0.4" height="15.0" fill="rgb(230,122,42)" rx="2" ry="2" />
<text  x="1189.88" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="853" width="0.3" height="15.0" fill="rgb(252,187,45)" rx="2" ry="2" />
<text  x="1189.52" y="863.5" ></text>
</g>
<g >
<title>__handle_mm_fault (68 samples, 0.34%)</title><rect x="24.4" y="1973" width="4.1" height="15.0" fill="rgb(232,204,39)" rx="2" ry="2" />
<text  x="27.44" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="186.3" y="1749" width="0.1" height="15.0" fill="rgb(217,224,47)" rx="2" ry="2" />
<text  x="189.28" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1141" width="0.3" height="15.0" fill="rgb(243,195,3)" rx="2" ry="2" />
<text  x="1189.52" y="1151.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.05%)</title><rect x="192.6" y="1557" width="0.6" height="15.0" fill="rgb(205,120,1)" rx="2" ry="2" />
<text  x="195.59" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1541" width="0.4" height="15.0" fill="rgb(211,71,21)" rx="2" ry="2" />
<text  x="1189.88" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1797" width="0.1" height="15.0" fill="rgb(248,80,32)" rx="2" ry="2" />
<text  x="161.98" y="1807.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="79.3" y="1253" width="0.1" height="15.0" fill="rgb(207,31,52)" rx="2" ry="2" />
<text  x="82.33" y="1263.5" ></text>
</g>
<g >
<title>clear_page_erms (17 samples, 0.08%)</title><rect x="25.2" y="1925" width="1.0" height="15.0" fill="rgb(222,148,46)" rx="2" ry="2" />
<text  x="28.15" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="901" width="20.4" height="15.0" fill="rgb(250,44,13)" rx="2" ry="2" />
<text  x="58.22" y="911.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="1941" width="0.4" height="15.0" fill="rgb(246,193,22)" rx="2" ry="2" />
<text  x="518.84" y="1951.5" ></text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream (31 samples, 0.15%)</title><rect x="872.1" y="2037" width="1.8" height="15.0" fill="rgb(253,188,36)" rx="2" ry="2" />
<text  x="875.11" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="981" width="0.3" height="15.0" fill="rgb(246,193,16)" rx="2" ry="2" />
<text  x="1189.52" y="991.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (4 samples, 0.02%)</title><rect x="735.5" y="1893" width="0.2" height="15.0" fill="rgb(248,200,35)" rx="2" ry="2" />
<text  x="738.45" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1445" width="0.3" height="15.0" fill="rgb(250,212,42)" rx="2" ry="2" />
<text  x="219.46" y="1455.5" ></text>
</g>
<g >
<title>unmap_vmas (3 samples, 0.01%)</title><rect x="766.3" y="1925" width="0.2" height="15.0" fill="rgb(239,67,13)" rx="2" ry="2" />
<text  x="769.28" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 1.64%)</title><rect x="55.2" y="181" width="19.4" height="15.0" fill="rgb(213,176,7)" rx="2" ry="2" />
<text  x="58.22" y="191.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (5 samples, 0.02%)</title><rect x="735.7" y="1893" width="0.3" height="15.0" fill="rgb(239,108,47)" rx="2" ry="2" />
<text  x="738.75" y="1903.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 0.02%)</title><rect x="130.4" y="1925" width="0.3" height="15.0" fill="rgb(234,162,41)" rx="2" ry="2" />
<text  x="133.45" y="1935.5" ></text>
</g>
<g >
<title>RunFasttextClf (520 samples, 2.60%)</title><rect x="541.1" y="1957" width="30.6" height="15.0" fill="rgb(246,213,23)" rx="2" ry="2" />
<text  x="544.07" y="1967.5" >Ru..</text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt;@plt (2 samples, 0.01%)</title><rect x="752.7" y="1893" width="0.1" height="15.0" fill="rgb(254,104,54)" rx="2" ry="2" />
<text  x="755.72" y="1903.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="138.3" y="1589" width="0.1" height="15.0" fill="rgb(242,225,3)" rx="2" ry="2" />
<text  x="141.29" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (62 samples, 0.31%)</title><rect x="210.6" y="1701" width="3.7" height="15.0" fill="rgb(208,71,10)" rx="2" ry="2" />
<text  x="213.63" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="533" width="0.2" height="15.0" fill="rgb(229,191,49)" rx="2" ry="2" />
<text  x="1190.35" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="997" width="0.4" height="15.0" fill="rgb(238,66,38)" rx="2" ry="2" />
<text  x="1189.88" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (85 samples, 0.42%)</title><rect x="141.6" y="1765" width="5.0" height="15.0" fill="rgb(237,34,14)" rx="2" ry="2" />
<text  x="144.59" y="1775.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.02%)</title><rect x="762.3" y="1957" width="0.3" height="15.0" fill="rgb(244,213,41)" rx="2" ry="2" />
<text  x="765.33" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (75 samples, 0.37%)</title><rect x="176.4" y="1733" width="4.5" height="15.0" fill="rgb(251,159,51)" rx="2" ry="2" />
<text  x="179.43" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (83 samples, 0.41%)</title><rect x="131.1" y="1717" width="4.9" height="15.0" fill="rgb(226,201,20)" rx="2" ry="2" />
<text  x="134.10" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.15%)</title><rect x="813.8" y="2021" width="1.8" height="15.0" fill="rgb(232,218,21)" rx="2" ry="2" />
<text  x="816.80" y="2031.5" ></text>
</g>
<g >
<title>__pthread_getspecific (6 samples, 0.03%)</title><rect x="169.1" y="1573" width="0.4" height="15.0" fill="rgb(246,151,50)" rx="2" ry="2" />
<text  x="172.12" y="1583.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (5 samples, 0.02%)</title><rect x="521.2" y="1877" width="0.3" height="15.0" fill="rgb(210,151,28)" rx="2" ry="2" />
<text  x="524.21" y="1887.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="682.7" y="1845" width="0.1" height="15.0" fill="rgb(240,164,48)" rx="2" ry="2" />
<text  x="685.69" y="1855.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (3 samples, 0.01%)</title><rect x="1102.5" y="2053" width="0.1" height="15.0" fill="rgb(248,137,15)" rx="2" ry="2" />
<text  x="1105.45" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1605" width="0.1" height="15.0" fill="rgb(208,37,41)" rx="2" ry="2" />
<text  x="161.98" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="821" width="20.4" height="15.0" fill="rgb(239,33,31)" rx="2" ry="2" />
<text  x="58.22" y="831.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.01%)</title><rect x="192.0" y="1557" width="0.2" height="15.0" fill="rgb(212,158,53)" rx="2" ry="2" />
<text  x="195.00" y="1567.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="149.4" y="1637" width="0.2" height="15.0" fill="rgb(230,35,31)" rx="2" ry="2" />
<text  x="152.43" y="1647.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="1099.0" y="1973" width="0.1" height="15.0" fill="rgb(225,124,15)" rx="2" ry="2" />
<text  x="1101.97" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1029" width="0.3" height="15.0" fill="rgb(223,98,33)" rx="2" ry="2" />
<text  x="1189.52" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="186.8" y="1717" width="0.2" height="15.0" fill="rgb(209,173,46)" rx="2" ry="2" />
<text  x="189.81" y="1727.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.02%)</title><rect x="208.4" y="1637" width="0.3" height="15.0" fill="rgb(206,116,32)" rx="2" ry="2" />
<text  x="211.45" y="1647.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="578.7" y="1877" width="0.3" height="15.0" fill="rgb(241,11,4)" rx="2" ry="2" />
<text  x="581.75" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.23%)</title><rect x="177.7" y="1637" width="2.7" height="15.0" fill="rgb(205,196,53)" rx="2" ry="2" />
<text  x="180.73" y="1647.5" ></text>
</g>
<g >
<title>__handle_mm_fault (31 samples, 0.15%)</title><rect x="508.9" y="1893" width="1.8" height="15.0" fill="rgb(209,76,28)" rx="2" ry="2" />
<text  x="511.88" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="140.0" y="1589" width="0.5" height="15.0" fill="rgb(227,137,23)" rx="2" ry="2" />
<text  x="143.00" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1669" width="0.2" height="15.0" fill="rgb(245,194,36)" rx="2" ry="2" />
<text  x="1190.29" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.01%)</title><rect x="768.3" y="2005" width="0.2" height="15.0" fill="rgb(221,180,44)" rx="2" ry="2" />
<text  x="771.35" y="2015.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.01%)</title><rect x="765.5" y="1845" width="0.1" height="15.0" fill="rgb(216,6,51)" rx="2" ry="2" />
<text  x="768.52" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="152.2" y="1797" width="0.1" height="15.0" fill="rgb(248,51,23)" rx="2" ry="2" />
<text  x="155.20" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1701" width="0.2" height="15.0" fill="rgb(234,127,31)" rx="2" ry="2" />
<text  x="1190.29" y="1711.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="1189.4" y="1957" width="0.1" height="15.0" fill="rgb(248,29,0)" rx="2" ry="2" />
<text  x="1192.41" y="1967.5" ></text>
</g>
<g >
<title>do_syscall_64 (22 samples, 0.11%)</title><rect x="1100.4" y="2021" width="1.3" height="15.0" fill="rgb(251,20,10)" rx="2" ry="2" />
<text  x="1103.45" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (14 samples, 0.07%)</title><rect x="216.2" y="1957" width="0.9" height="15.0" fill="rgb(220,205,52)" rx="2" ry="2" />
<text  x="219.23" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="261" width="0.3" height="15.0" fill="rgb(228,31,24)" rx="2" ry="2" />
<text  x="1189.52" y="271.5" ></text>
</g>
<g >
<title>[unknown] (501 samples, 2.50%)</title><rect x="55.2" y="1621" width="29.5" height="15.0" fill="rgb(247,102,27)" rx="2" ry="2" />
<text  x="58.16" y="1631.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="949" width="0.2" height="15.0" fill="rgb(220,208,39)" rx="2" ry="2" />
<text  x="1190.29" y="959.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (4 samples, 0.02%)</title><rect x="155.5" y="1669" width="0.2" height="15.0" fill="rgb(249,197,18)" rx="2" ry="2" />
<text  x="158.50" y="1679.5" ></text>
</g>
<g >
<title>handle_mm_fault (22 samples, 0.11%)</title><rect x="693.1" y="1797" width="1.3" height="15.0" fill="rgb(226,143,24)" rx="2" ry="2" />
<text  x="696.06" y="1807.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="119.8" y="2005" width="0.1" height="15.0" fill="rgb(224,190,13)" rx="2" ry="2" />
<text  x="122.78" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1813" width="0.5" height="15.0" fill="rgb(233,53,35)" rx="2" ry="2" />
<text  x="1189.34" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1157" width="0.3" height="15.0" fill="rgb(230,224,19)" rx="2" ry="2" />
<text  x="1189.52" y="1167.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="85.0" y="1573" width="0.1" height="15.0" fill="rgb(220,158,19)" rx="2" ry="2" />
<text  x="87.99" y="1583.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (7 samples, 0.03%)</title><rect x="518.1" y="2037" width="0.5" height="15.0" fill="rgb(252,212,13)" rx="2" ry="2" />
<text  x="521.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="389" width="0.3" height="15.0" fill="rgb(241,187,7)" rx="2" ry="2" />
<text  x="1189.52" y="399.5" ></text>
</g>
<g >
<title>unmap_vmas (3 samples, 0.01%)</title><rect x="765.7" y="1877" width="0.2" height="15.0" fill="rgb(220,217,24)" rx="2" ry="2" />
<text  x="768.70" y="1887.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="652.9" y="1733" width="0.1" height="15.0" fill="rgb(253,181,37)" rx="2" ry="2" />
<text  x="655.85" y="1743.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.01%)</title><rect x="579.1" y="1813" width="0.2" height="15.0" fill="rgb(220,53,45)" rx="2" ry="2" />
<text  x="582.10" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.5" y="1333" width="0.3" height="15.0" fill="rgb(240,208,23)" rx="2" ry="2" />
<text  x="219.52" y="1343.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="484.6" y="1925" width="0.1" height="15.0" fill="rgb(223,201,53)" rx="2" ry="2" />
<text  x="487.59" y="1935.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (2 samples, 0.01%)</title><rect x="181.1" y="1701" width="0.1" height="15.0" fill="rgb(217,220,24)" rx="2" ry="2" />
<text  x="184.09" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (384 samples, 1.92%)</title><rect x="55.2" y="1237" width="22.7" height="15.0" fill="rgb(240,82,40)" rx="2" ry="2" />
<text  x="58.22" y="1247.5" >[..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (2 samples, 0.01%)</title><rect x="1187.5" y="2053" width="0.1" height="15.0" fill="rgb(253,228,50)" rx="2" ry="2" />
<text  x="1190.52" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="821" width="0.4" height="15.0" fill="rgb(211,180,35)" rx="2" ry="2" />
<text  x="1189.88" y="831.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="201.1" y="1605" width="0.3" height="15.0" fill="rgb(224,206,20)" rx="2" ry="2" />
<text  x="204.13" y="1615.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="177.6" y="1637" width="0.1" height="15.0" fill="rgb(213,225,49)" rx="2" ry="2" />
<text  x="180.55" y="1647.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (3 samples, 0.01%)</title><rect x="1121.3" y="2037" width="0.2" height="15.0" fill="rgb(246,124,46)" rx="2" ry="2" />
<text  x="1124.32" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1381" width="0.3" height="15.0" fill="rgb(252,192,34)" rx="2" ry="2" />
<text  x="1189.52" y="1391.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="327.2" y="1941" width="0.1" height="15.0" fill="rgb(230,170,36)" rx="2" ry="2" />
<text  x="330.18" y="1951.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.01%)</title><rect x="217.1" y="1973" width="0.2" height="15.0" fill="rgb(236,156,49)" rx="2" ry="2" />
<text  x="220.11" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (2 samples, 0.01%)</title><rect x="159.7" y="1589" width="0.2" height="15.0" fill="rgb(232,190,12)" rx="2" ry="2" />
<text  x="162.75" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="874.7" y="2021" width="0.5" height="15.0" fill="rgb(252,70,50)" rx="2" ry="2" />
<text  x="877.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="1957" width="0.5" height="15.0" fill="rgb(250,156,28)" rx="2" ry="2" />
<text  x="1189.29" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.3" y="1829" width="0.5" height="15.0" fill="rgb(216,78,10)" rx="2" ry="2" />
<text  x="1189.34" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (364 samples, 1.82%)</title><rect x="159.5" y="1781" width="21.4" height="15.0" fill="rgb(230,110,17)" rx="2" ry="2" />
<text  x="162.45" y="1791.5" >s..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="83.3" y="1525" width="0.1" height="15.0" fill="rgb(215,164,52)" rx="2" ry="2" />
<text  x="86.28" y="1535.5" ></text>
</g>
<g >
<title>__asan_memset (13 samples, 0.06%)</title><rect x="595.4" y="1877" width="0.8" height="15.0" fill="rgb(205,85,18)" rx="2" ry="2" />
<text  x="598.43" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1285" width="0.4" height="15.0" fill="rgb(221,45,12)" rx="2" ry="2" />
<text  x="1189.88" y="1295.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="85.0" y="1541" width="0.1" height="15.0" fill="rgb(248,84,50)" rx="2" ry="2" />
<text  x="87.99" y="1551.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="500.4" y="1813" width="0.1" height="15.0" fill="rgb(223,57,53)" rx="2" ry="2" />
<text  x="503.39" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1205" width="0.4" height="15.0" fill="rgb(249,157,17)" rx="2" ry="2" />
<text  x="1189.88" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1493" width="0.3" height="15.0" fill="rgb(253,166,53)" rx="2" ry="2" />
<text  x="219.46" y="1503.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.02%)</title><rect x="495.5" y="1941" width="0.2" height="15.0" fill="rgb(249,95,43)" rx="2" ry="2" />
<text  x="498.50" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (224 samples, 1.12%)</title><rect x="710.5" y="1877" width="13.2" height="15.0" fill="rgb(222,53,23)" rx="2" ry="2" />
<text  x="713.45" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1173" width="0.2" height="15.0" fill="rgb(220,222,14)" rx="2" ry="2" />
<text  x="1190.29" y="1183.5" ></text>
</g>
<g >
<title>GetHost (478 samples, 2.39%)</title><rect x="159.2" y="1957" width="28.2" height="15.0" fill="rgb(220,153,15)" rx="2" ry="2" />
<text  x="162.22" y="1967.5" >G..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="517.3" y="1733" width="0.1" height="15.0" fill="rgb(253,166,17)" rx="2" ry="2" />
<text  x="520.31" y="1743.5" ></text>
</g>
<g >
<title>ptep_clear_flush (2 samples, 0.01%)</title><rect x="1099.0" y="1925" width="0.1" height="15.0" fill="rgb(254,217,34)" rx="2" ry="2" />
<text  x="1101.97" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="373" width="0.4" height="15.0" fill="rgb(248,65,53)" rx="2" ry="2" />
<text  x="1189.88" y="383.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (2 samples, 0.01%)</title><rect x="122.2" y="1925" width="0.1" height="15.0" fill="rgb(250,189,35)" rx="2" ry="2" />
<text  x="125.19" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1301" width="0.3" height="15.0" fill="rgb(242,17,38)" rx="2" ry="2" />
<text  x="1189.52" y="1311.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.03%)</title><rect x="163.4" y="1541" width="0.4" height="15.0" fill="rgb(221,23,11)" rx="2" ry="2" />
<text  x="166.40" y="1551.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="185.2" y="1669" width="0.1" height="15.0" fill="rgb(232,123,14)" rx="2" ry="2" />
<text  x="188.22" y="1679.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (3,002 samples, 15.00%)</title><rect x="337.6" y="2005" width="177.0" height="15.0" fill="rgb(229,190,53)" rx="2" ry="2" />
<text  x="340.62" y="2015.5" >TSlinkClustering::Clus..</text>
</g>
<g >
<title>__interceptor_memchr (2 samples, 0.01%)</title><rect x="1146.0" y="2037" width="0.1" height="15.0" fill="rgb(215,105,54)" rx="2" ry="2" />
<text  x="1148.96" y="2047.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.01%)</title><rect x="197.9" y="1589" width="0.2" height="15.0" fill="rgb(216,146,29)" rx="2" ry="2" />
<text  x="200.89" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (82 samples, 0.41%)</title><rect x="209.8" y="1749" width="4.8" height="15.0" fill="rgb(227,133,52)" rx="2" ry="2" />
<text  x="212.80" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="389" width="19.6" height="15.0" fill="rgb(245,165,1)" rx="2" ry="2" />
<text  x="58.22" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1925" width="0.2" height="15.0" fill="rgb(220,142,34)" rx="2" ry="2" />
<text  x="1190.29" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (5 samples, 0.02%)</title><rect x="180.9" y="1781" width="0.3" height="15.0" fill="rgb(226,47,3)" rx="2" ry="2" />
<text  x="183.91" y="1791.5" ></text>
</g>
<g >
<title>operator new[] (52 samples, 0.26%)</title><rect x="1183.1" y="2037" width="3.1" height="15.0" fill="rgb(247,170,18)" rx="2" ry="2" />
<text  x="1186.10" y="2047.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.02%)</title><rect x="53.9" y="1909" width="0.2" height="15.0" fill="rgb(211,169,15)" rx="2" ry="2" />
<text  x="56.86" y="1919.5" ></text>
</g>
<g >
<title>vm_area_dup (2 samples, 0.01%)</title><rect x="765.0" y="1877" width="0.2" height="15.0" fill="rgb(246,47,2)" rx="2" ry="2" />
<text  x="768.05" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.01%)</title><rect x="201.7" y="1605" width="0.2" height="15.0" fill="rgb(211,69,25)" rx="2" ry="2" />
<text  x="204.72" y="1615.5" ></text>
</g>
<g >
<title>__asan_memmove (4 samples, 0.02%)</title><rect x="322.8" y="1941" width="0.3" height="15.0" fill="rgb(230,127,1)" rx="2" ry="2" />
<text  x="325.82" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="766.9" y="2021" width="0.1" height="15.0" fill="rgb(226,178,6)" rx="2" ry="2" />
<text  x="769.87" y="2031.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (29 samples, 0.14%)</title><rect x="332.7" y="1989" width="1.7" height="15.0" fill="rgb(239,166,37)" rx="2" ry="2" />
<text  x="335.67" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1621" width="0.3" height="15.0" fill="rgb(248,53,54)" rx="2" ry="2" />
<text  x="190.04" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="76.0" y="1077" width="0.1" height="15.0" fill="rgb(240,61,1)" rx="2" ry="2" />
<text  x="79.03" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (348 samples, 1.74%)</title><rect x="55.2" y="1029" width="20.5" height="15.0" fill="rgb(207,49,32)" rx="2" ry="2" />
<text  x="58.22" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="837" width="0.2" height="15.0" fill="rgb(251,221,14)" rx="2" ry="2" />
<text  x="1190.29" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1237" width="0.4" height="15.0" fill="rgb(241,103,23)" rx="2" ry="2" />
<text  x="1189.88" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1781" width="0.5" height="15.0" fill="rgb(221,150,4)" rx="2" ry="2" />
<text  x="189.81" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (3 samples, 0.01%)</title><rect x="766.3" y="2037" width="0.2" height="15.0" fill="rgb(252,80,11)" rx="2" ry="2" />
<text  x="769.28" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1605" width="0.2" height="15.0" fill="rgb(208,116,24)" rx="2" ry="2" />
<text  x="1190.29" y="1615.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (35 samples, 0.17%)</title><rect x="1126.2" y="2037" width="2.0" height="15.0" fill="rgb(217,13,50)" rx="2" ry="2" />
<text  x="1129.15" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (388 samples, 1.94%)</title><rect x="55.2" y="1253" width="22.9" height="15.0" fill="rgb(240,86,29)" rx="2" ry="2" />
<text  x="58.22" y="1263.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="187.2" y="1077" width="0.1" height="15.0" fill="rgb(218,50,11)" rx="2" ry="2" />
<text  x="190.16" y="1087.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="570.8" y="1893" width="0.2" height="15.0" fill="rgb(239,145,1)" rx="2" ry="2" />
<text  x="573.85" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (88 samples, 0.44%)</title><rect x="171.2" y="1733" width="5.2" height="15.0" fill="rgb(251,9,29)" rx="2" ry="2" />
<text  x="174.24" y="1743.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.01%)</title><rect x="1100.9" y="1845" width="0.1" height="15.0" fill="rgb(243,164,7)" rx="2" ry="2" />
<text  x="1103.86" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="179.0" y="1621" width="0.1" height="15.0" fill="rgb(253,28,19)" rx="2" ry="2" />
<text  x="182.03" y="1631.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="79.3" y="1221" width="0.1" height="15.0" fill="rgb(212,210,37)" rx="2" ry="2" />
<text  x="82.33" y="1231.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (5 samples, 0.02%)</title><rect x="1110.9" y="2053" width="0.3" height="15.0" fill="rgb(247,6,37)" rx="2" ry="2" />
<text  x="1113.88" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.0" y="1637" width="0.1" height="15.0" fill="rgb(249,150,46)" rx="2" ry="2" />
<text  x="161.98" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (78 samples, 0.39%)</title><rect x="194.4" y="1637" width="4.6" height="15.0" fill="rgb(221,68,9)" rx="2" ry="2" />
<text  x="197.35" y="1647.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (4 samples, 0.02%)</title><rect x="515.3" y="1973" width="0.2" height="15.0" fill="rgb(216,135,27)" rx="2" ry="2" />
<text  x="518.31" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1685" width="0.2" height="15.0" fill="rgb(205,180,4)" rx="2" ry="2" />
<text  x="57.98" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="158.3" y="1861" width="0.1" height="15.0" fill="rgb(235,109,3)" rx="2" ry="2" />
<text  x="161.27" y="1871.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::load (5 samples, 0.02%)</title><rect x="1102.6" y="2053" width="0.3" height="15.0" fill="rgb(242,21,45)" rx="2" ry="2" />
<text  x="1105.63" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::push_back (2 samples, 0.01%)</title><rect x="151.8" y="1669" width="0.1" height="15.0" fill="rgb(236,6,45)" rx="2" ry="2" />
<text  x="154.79" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="813.3" y="2005" width="0.1" height="15.0" fill="rgb(244,189,45)" rx="2" ry="2" />
<text  x="816.33" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::Recycle (3 samples, 0.01%)</title><rect x="755.8" y="2037" width="0.2" height="15.0" fill="rgb(211,2,11)" rx="2" ry="2" />
<text  x="758.85" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (522 samples, 2.61%)</title><rect x="55.2" y="1685" width="30.7" height="15.0" fill="rgb(230,183,50)" rx="2" ry="2" />
<text  x="58.16" y="1695.5" >[u..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.01%)</title><rect x="119.8" y="1861" width="0.1" height="15.0" fill="rgb(210,0,28)" rx="2" ry="2" />
<text  x="122.78" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1253" width="0.1" height="15.0" fill="rgb(248,114,29)" rx="2" ry="2" />
<text  x="57.98" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1765" width="0.5" height="15.0" fill="rgb(240,23,18)" rx="2" ry="2" />
<text  x="189.81" y="1775.5" ></text>
</g>
<g >
<title>__asan_memcpy (12 samples, 0.06%)</title><rect x="594.7" y="1877" width="0.7" height="15.0" fill="rgb(218,62,52)" rx="2" ry="2" />
<text  x="597.72" y="1887.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (2 samples, 0.01%)</title><rect x="518.0" y="1973" width="0.1" height="15.0" fill="rgb(246,107,42)" rx="2" ry="2" />
<text  x="520.96" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="837" width="20.4" height="15.0" fill="rgb(214,44,15)" rx="2" ry="2" />
<text  x="58.22" y="847.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1269" width="0.1" height="15.0" fill="rgb(229,5,43)" rx="2" ry="2" />
<text  x="57.98" y="1279.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (31 samples, 0.15%)</title><rect x="489.5" y="1925" width="1.8" height="15.0" fill="rgb(235,27,1)" rx="2" ry="2" />
<text  x="492.49" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (11 samples, 0.05%)</title><rect x="754.9" y="2037" width="0.7" height="15.0" fill="rgb(242,194,32)" rx="2" ry="2" />
<text  x="757.91" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (22 samples, 0.11%)</title><rect x="1100.4" y="2037" width="1.3" height="15.0" fill="rgb(223,21,11)" rx="2" ry="2" />
<text  x="1103.45" y="2047.5" ></text>
</g>
<g >
<title>__vm_munmap (3 samples, 0.01%)</title><rect x="766.3" y="1973" width="0.2" height="15.0" fill="rgb(239,218,51)" rx="2" ry="2" />
<text  x="769.28" y="1983.5" ></text>
</g>
<g >
<title>smp_call_function_many (2 samples, 0.01%)</title><rect x="84.1" y="1381" width="0.1" height="15.0" fill="rgb(205,158,14)" rx="2" ry="2" />
<text  x="87.11" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (3 samples, 0.01%)</title><rect x="159.7" y="1605" width="0.2" height="15.0" fill="rgb(236,171,30)" rx="2" ry="2" />
<text  x="162.69" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1845" width="0.5" height="15.0" fill="rgb(208,26,6)" rx="2" ry="2" />
<text  x="189.81" y="1855.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.01%)</title><rect x="946.0" y="1877" width="0.2" height="15.0" fill="rgb(219,6,20)" rx="2" ry="2" />
<text  x="949.04" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (185 samples, 0.92%)</title><rect x="44.1" y="2037" width="10.9" height="15.0" fill="rgb(217,223,48)" rx="2" ry="2" />
<text  x="47.08" y="2047.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (12 samples, 0.06%)</title><rect x="767.6" y="2037" width="0.7" height="15.0" fill="rgb(214,110,22)" rx="2" ry="2" />
<text  x="770.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="186.7" y="1909" width="0.6" height="15.0" fill="rgb(254,153,21)" rx="2" ry="2" />
<text  x="189.69" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="766.9" y="2005" width="0.1" height="15.0" fill="rgb(253,80,25)" rx="2" ry="2" />
<text  x="769.87" y="2015.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (10 samples, 0.05%)</title><rect x="1008.2" y="2053" width="0.6" height="15.0" fill="rgb(219,63,21)" rx="2" ry="2" />
<text  x="1011.18" y="2063.5" ></text>
</g>
<g >
<title>free_pgtables (2 samples, 0.01%)</title><rect x="765.3" y="1877" width="0.2" height="15.0" fill="rgb(221,213,16)" rx="2" ry="2" />
<text  x="768.34" y="1887.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="510.6" y="1861" width="0.1" height="15.0" fill="rgb(235,24,5)" rx="2" ry="2" />
<text  x="513.59" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="389" width="0.2" height="15.0" fill="rgb(205,210,40)" rx="2" ry="2" />
<text  x="1190.35" y="399.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (13 samples, 0.06%)</title><rect x="113.7" y="2037" width="0.8" height="15.0" fill="rgb(211,91,51)" rx="2" ry="2" />
<text  x="116.70" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="43.7" y="2021" width="0.1" height="15.0" fill="rgb(243,151,48)" rx="2" ry="2" />
<text  x="46.72" y="2031.5" ></text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 0.04%)</title><rect x="652.7" y="1797" width="0.5" height="15.0" fill="rgb(205,209,13)" rx="2" ry="2" />
<text  x="655.68" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="159.7" y="1573" width="0.2" height="15.0" fill="rgb(230,97,22)" rx="2" ry="2" />
<text  x="162.75" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="2021" width="0.1" height="15.0" fill="rgb(216,31,21)" rx="2" ry="2" />
<text  x="1189.17" y="2031.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.01%)</title><rect x="206.4" y="1637" width="0.2" height="15.0" fill="rgb(219,194,41)" rx="2" ry="2" />
<text  x="209.44" y="1647.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="183.8" y="1653" width="0.2" height="15.0" fill="rgb(233,105,2)" rx="2" ry="2" />
<text  x="186.80" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (40 samples, 0.20%)</title><rect x="182.9" y="1669" width="2.3" height="15.0" fill="rgb(210,83,33)" rx="2" ry="2" />
<text  x="185.86" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.04%)</title><rect x="764.2" y="2021" width="0.5" height="15.0" fill="rgb(215,59,28)" rx="2" ry="2" />
<text  x="767.16" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1173" width="0.2" height="15.0" fill="rgb(231,202,46)" rx="2" ry="2" />
<text  x="219.64" y="1183.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="167.4" y="1573" width="0.2" height="15.0" fill="rgb(252,145,35)" rx="2" ry="2" />
<text  x="170.35" y="1583.5" ></text>
</g>
<g >
<title>do_page_fault (13 samples, 0.06%)</title><rect x="652.4" y="1845" width="0.8" height="15.0" fill="rgb(209,23,50)" rx="2" ry="2" />
<text  x="655.44" y="1855.5" ></text>
</g>
<g >
<title>__handle_mm_fault (21 samples, 0.10%)</title><rect x="53.7" y="1957" width="1.3" height="15.0" fill="rgb(211,178,37)" rx="2" ry="2" />
<text  x="56.75" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (52 samples, 0.26%)</title><rect x="143.0" y="1621" width="3.1" height="15.0" fill="rgb(234,65,10)" rx="2" ry="2" />
<text  x="146.00" y="1631.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (5 samples, 0.02%)</title><rect x="159.6" y="1621" width="0.3" height="15.0" fill="rgb(234,0,21)" rx="2" ry="2" />
<text  x="162.57" y="1631.5" ></text>
</g>
<g >
<title>__do_munmap (12 samples, 0.06%)</title><rect x="1100.6" y="1925" width="0.7" height="15.0" fill="rgb(205,25,52)" rx="2" ry="2" />
<text  x="1103.56" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (575 samples, 2.87%)</title><rect x="55.2" y="1893" width="33.9" height="15.0" fill="rgb(225,167,46)" rx="2" ry="2" />
<text  x="58.16" y="1903.5" >[u..</text>
</g>
<g >
<title>[unknown] (12 samples, 0.06%)</title><rect x="767.6" y="2021" width="0.7" height="15.0" fill="rgb(229,195,7)" rx="2" ry="2" />
<text  x="770.64" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1141" width="0.1" height="15.0" fill="rgb(223,112,39)" rx="2" ry="2" />
<text  x="57.98" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="469" width="0.4" height="15.0" fill="rgb(241,204,40)" rx="2" ry="2" />
<text  x="1189.88" y="479.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.01%)</title><rect x="314.3" y="1925" width="0.1" height="15.0" fill="rgb(235,218,29)" rx="2" ry="2" />
<text  x="317.27" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1365" width="0.2" height="15.0" fill="rgb(233,129,12)" rx="2" ry="2" />
<text  x="1190.29" y="1375.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="1188.7" y="2037" width="0.2" height="15.0" fill="rgb(217,166,5)" rx="2" ry="2" />
<text  x="1191.70" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1477" width="0.2" height="15.0" fill="rgb(223,67,38)" rx="2" ry="2" />
<text  x="1190.29" y="1487.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="614.5" y="1845" width="0.1" height="15.0" fill="rgb(208,133,29)" rx="2" ry="2" />
<text  x="617.47" y="1855.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="201.0" y="1605" width="0.1" height="15.0" fill="rgb(214,167,3)" rx="2" ry="2" />
<text  x="204.02" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (366 samples, 1.83%)</title><rect x="55.2" y="1141" width="21.6" height="15.0" fill="rgb(215,108,52)" rx="2" ry="2" />
<text  x="58.22" y="1151.5" >[..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.02%)</title><rect x="90.5" y="1989" width="0.3" height="15.0" fill="rgb(226,175,40)" rx="2" ry="2" />
<text  x="93.53" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1157" width="0.1" height="15.0" fill="rgb(248,45,18)" rx="2" ry="2" />
<text  x="57.98" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (450 samples, 2.25%)</title><rect x="159.5" y="1813" width="26.5" height="15.0" fill="rgb(218,224,30)" rx="2" ry="2" />
<text  x="162.45" y="1823.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (82 samples, 0.41%)</title><rect x="141.6" y="1717" width="4.8" height="15.0" fill="rgb(223,22,0)" rx="2" ry="2" />
<text  x="144.59" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="373" width="0.2" height="15.0" fill="rgb(249,212,27)" rx="2" ry="2" />
<text  x="1190.35" y="383.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="206.8" y="1637" width="0.2" height="15.0" fill="rgb(246,10,5)" rx="2" ry="2" />
<text  x="209.79" y="1647.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="84.1" y="1461" width="0.1" height="15.0" fill="rgb(235,178,24)" rx="2" ry="2" />
<text  x="87.11" y="1471.5" ></text>
</g>
<g >
<title>handle_mm_fault (16 samples, 0.08%)</title><rect x="678.2" y="1797" width="0.9" height="15.0" fill="rgb(236,124,34)" rx="2" ry="2" />
<text  x="681.20" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (65 samples, 0.32%)</title><rect x="189.8" y="1589" width="3.8" height="15.0" fill="rgb(241,85,46)" rx="2" ry="2" />
<text  x="192.82" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1045" width="0.4" height="15.0" fill="rgb(208,48,26)" rx="2" ry="2" />
<text  x="1189.88" y="1055.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="632.5" y="1829" width="0.1" height="15.0" fill="rgb(242,119,17)" rx="2" ry="2" />
<text  x="635.46" y="1839.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="133.3" y="1557" width="0.2" height="15.0" fill="rgb(234,90,24)" rx="2" ry="2" />
<text  x="136.34" y="1567.5" ></text>
</g>
<g >
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.01%)</title><rect x="944.7" y="1925" width="0.2" height="15.0" fill="rgb(210,146,53)" rx="2" ry="2" />
<text  x="947.74" y="1935.5" ></text>
</g>
<g >
<title>__interceptor_malloc (2 samples, 0.01%)</title><rect x="224.5" y="1941" width="0.2" height="15.0" fill="rgb(254,104,44)" rx="2" ry="2" />
<text  x="227.54" y="1951.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (3 samples, 0.01%)</title><rect x="26.8" y="1957" width="0.2" height="15.0" fill="rgb(220,183,21)" rx="2" ry="2" />
<text  x="29.80" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1509" width="0.2" height="15.0" fill="rgb(222,223,42)" rx="2" ry="2" />
<text  x="1190.29" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.0" y="1541" width="0.1" height="15.0" fill="rgb(217,192,0)" rx="2" ry="2" />
<text  x="161.98" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="171.2" y="1749" width="5.2" height="15.0" fill="rgb(245,209,5)" rx="2" ry="2" />
<text  x="174.24" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (75 samples, 0.37%)</title><rect x="176.4" y="1701" width="4.5" height="15.0" fill="rgb(238,71,46)" rx="2" ry="2" />
<text  x="179.43" y="1711.5" ></text>
</g>
<g >
<title>operator delete[] (72 samples, 0.36%)</title><rect x="1178.9" y="2037" width="4.2" height="15.0" fill="rgb(212,109,54)" rx="2" ry="2" />
<text  x="1181.86" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (15 samples, 0.07%)</title><rect x="593.7" y="1877" width="0.9" height="15.0" fill="rgb(241,68,18)" rx="2" ry="2" />
<text  x="596.72" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1685" width="0.2" height="15.0" fill="rgb(253,10,49)" rx="2" ry="2" />
<text  x="1190.29" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.01%)</title><rect x="43.4" y="2005" width="0.1" height="15.0" fill="rgb(220,132,25)" rx="2" ry="2" />
<text  x="46.37" y="2015.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.01%)</title><rect x="766.3" y="1877" width="0.2" height="15.0" fill="rgb(251,130,13)" rx="2" ry="2" />
<text  x="769.34" y="1887.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.01%)</title><rect x="693.5" y="1733" width="0.2" height="15.0" fill="rgb(254,182,25)" rx="2" ry="2" />
<text  x="696.53" y="1743.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="139.9" y="1589" width="0.1" height="15.0" fill="rgb(215,75,25)" rx="2" ry="2" />
<text  x="142.88" y="1599.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="168.9" y="1573" width="0.2" height="15.0" fill="rgb(243,211,1)" rx="2" ry="2" />
<text  x="171.89" y="1583.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (5 samples, 0.02%)</title><rect x="122.0" y="1941" width="0.3" height="15.0" fill="rgb(230,145,43)" rx="2" ry="2" />
<text  x="125.02" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="877.5" y="2021" width="0.2" height="15.0" fill="rgb(218,96,28)" rx="2" ry="2" />
<text  x="880.53" y="2031.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (2 samples, 0.01%)</title><rect x="573.9" y="1909" width="0.1" height="15.0" fill="rgb(223,216,5)" rx="2" ry="2" />
<text  x="576.91" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1109" width="0.2" height="15.0" fill="rgb(226,76,31)" rx="2" ry="2" />
<text  x="1190.29" y="1119.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="570.6" y="1845" width="0.1" height="15.0" fill="rgb(248,163,7)" rx="2" ry="2" />
<text  x="573.61" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="186.7" y="1893" width="0.6" height="15.0" fill="rgb(205,212,44)" rx="2" ry="2" />
<text  x="189.69" y="1903.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append@plt (2 samples, 0.01%)</title><rect x="582.4" y="1893" width="0.1" height="15.0" fill="rgb(214,75,29)" rx="2" ry="2" />
<text  x="585.40" y="1903.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (2 samples, 0.01%)</title><rect x="85.0" y="1461" width="0.1" height="15.0" fill="rgb(246,210,10)" rx="2" ry="2" />
<text  x="87.99" y="1471.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (5 samples, 0.02%)</title><rect x="54.6" y="1861" width="0.3" height="15.0" fill="rgb(246,218,33)" rx="2" ry="2" />
<text  x="57.63" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (461 samples, 2.30%)</title><rect x="131.1" y="1861" width="27.2" height="15.0" fill="rgb(222,95,27)" rx="2" ry="2" />
<text  x="134.10" y="1871.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.5" y="1557" width="0.3" height="15.0" fill="rgb(247,159,18)" rx="2" ry="2" />
<text  x="1189.46" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (370 samples, 1.85%)</title><rect x="159.5" y="1797" width="21.8" height="15.0" fill="rgb(227,213,41)" rx="2" ry="2" />
<text  x="162.45" y="1807.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.01%)</title><rect x="618.3" y="1845" width="0.2" height="15.0" fill="rgb(220,100,5)" rx="2" ry="2" />
<text  x="621.31" y="1855.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (53 samples, 0.26%)</title><rect x="124.0" y="1925" width="3.1" height="15.0" fill="rgb(228,196,54)" rx="2" ry="2" />
<text  x="126.96" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1877" width="0.4" height="15.0" fill="rgb(224,129,54)" rx="2" ry="2" />
<text  x="1189.88" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (60 samples, 0.30%)</title><rect x="161.1" y="1557" width="3.5" height="15.0" fill="rgb(236,135,44)" rx="2" ry="2" />
<text  x="164.10" y="1567.5" ></text>
</g>
<g >
<title>.str.35 (3 samples, 0.01%)</title><rect x="43.2" y="2037" width="0.2" height="15.0" fill="rgb(251,116,53)" rx="2" ry="2" />
<text  x="46.19" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.15%)</title><rect x="872.1" y="2021" width="1.8" height="15.0" fill="rgb(238,94,42)" rx="2" ry="2" />
<text  x="875.11" y="2031.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (3 samples, 0.01%)</title><rect x="765.5" y="1861" width="0.1" height="15.0" fill="rgb(240,120,47)" rx="2" ry="2" />
<text  x="768.46" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1541" width="0.3" height="15.0" fill="rgb(242,67,17)" rx="2" ry="2" />
<text  x="219.46" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1653" width="0.4" height="15.0" fill="rgb(251,84,52)" rx="2" ry="2" />
<text  x="1189.40" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (18 samples, 0.09%)</title><rect x="689.9" y="1845" width="1.0" height="15.0" fill="rgb(219,108,24)" rx="2" ry="2" />
<text  x="692.88" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1221" width="0.1" height="15.0" fill="rgb(233,51,12)" rx="2" ry="2" />
<text  x="57.98" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="197" width="0.4" height="15.0" fill="rgb(253,174,49)" rx="2" ry="2" />
<text  x="1189.93" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (31 samples, 0.15%)</title><rect x="72.7" y="37" width="1.8" height="15.0" fill="rgb(238,53,37)" rx="2" ry="2" />
<text  x="75.67" y="47.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.04%)</title><rect x="1102.0" y="2053" width="0.5" height="15.0" fill="rgb(214,191,51)" rx="2" ry="2" />
<text  x="1104.98" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="215.3" y="1813" width="0.2" height="15.0" fill="rgb(214,17,10)" rx="2" ry="2" />
<text  x="218.34" y="1823.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="517.6" y="2005" width="0.1" height="15.0" fill="rgb(241,51,15)" rx="2" ry="2" />
<text  x="520.55" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="901" width="0.2" height="15.0" fill="rgb(233,34,11)" rx="2" ry="2" />
<text  x="1190.29" y="911.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1477" width="0.1" height="15.0" fill="rgb(252,174,22)" rx="2" ry="2" />
<text  x="57.98" y="1487.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (5 samples, 0.02%)</title><rect x="1023.3" y="2053" width="0.3" height="15.0" fill="rgb(253,166,39)" rx="2" ry="2" />
<text  x="1026.33" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.78%)</title><rect x="55.2" y="1093" width="21.0" height="15.0" fill="rgb(237,67,27)" rx="2" ry="2" />
<text  x="58.22" y="1103.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (9 samples, 0.04%)</title><rect x="521.1" y="1989" width="0.6" height="15.0" fill="rgb(231,179,16)" rx="2" ry="2" />
<text  x="524.15" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (96 samples, 0.48%)</title><rect x="203.7" y="1717" width="5.7" height="15.0" fill="rgb(207,42,51)" rx="2" ry="2" />
<text  x="206.73" y="1727.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="179.5" y="1621" width="0.2" height="15.0" fill="rgb(213,69,28)" rx="2" ry="2" />
<text  x="182.50" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1669" width="0.3" height="15.0" fill="rgb(249,72,28)" rx="2" ry="2" />
<text  x="219.76" y="1679.5" ></text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.01%)</title><rect x="652.7" y="1749" width="0.2" height="15.0" fill="rgb(251,68,26)" rx="2" ry="2" />
<text  x="655.68" y="1759.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.02%)</title><rect x="153.9" y="1685" width="0.3" height="15.0" fill="rgb(243,171,16)" rx="2" ry="2" />
<text  x="156.91" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1605" width="0.4" height="15.0" fill="rgb(215,160,18)" rx="2" ry="2" />
<text  x="1189.88" y="1615.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="1100.9" y="1813" width="0.1" height="15.0" fill="rgb(231,195,12)" rx="2" ry="2" />
<text  x="1103.86" y="1823.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="207.3" y="1637" width="0.1" height="15.0" fill="rgb(213,11,30)" rx="2" ry="2" />
<text  x="210.27" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1941" width="0.2" height="15.0" fill="rgb(254,85,43)" rx="2" ry="2" />
<text  x="57.98" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1237" width="0.1" height="15.0" fill="rgb(224,23,30)" rx="2" ry="2" />
<text  x="57.98" y="1247.5" ></text>
</g>
<g >
<title>up_read (2 samples, 0.01%)</title><rect x="949.0" y="1989" width="0.2" height="15.0" fill="rgb(213,118,14)" rx="2" ry="2" />
<text  x="952.05" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (91 samples, 0.45%)</title><rect x="146.6" y="1749" width="5.4" height="15.0" fill="rgb(221,14,24)" rx="2" ry="2" />
<text  x="149.60" y="1759.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (6 samples, 0.03%)</title><rect x="1157.0" y="2037" width="0.4" height="15.0" fill="rgb(221,196,25)" rx="2" ry="2" />
<text  x="1160.04" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.05%)</title><rect x="1186.2" y="2037" width="0.6" height="15.0" fill="rgb(234,137,50)" rx="2" ry="2" />
<text  x="1189.17" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1429" width="0.3" height="15.0" fill="rgb(234,195,21)" rx="2" ry="2" />
<text  x="219.82" y="1439.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.01%)</title><rect x="84.1" y="1301" width="0.1" height="15.0" fill="rgb(245,20,25)" rx="2" ry="2" />
<text  x="87.11" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (6 samples, 0.03%)</title><rect x="157.9" y="1813" width="0.3" height="15.0" fill="rgb(222,110,41)" rx="2" ry="2" />
<text  x="160.86" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1797" width="0.5" height="15.0" fill="rgb(209,44,11)" rx="2" ry="2" />
<text  x="189.81" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="138.5" y="1589" width="0.1" height="15.0" fill="rgb(237,57,2)" rx="2" ry="2" />
<text  x="141.46" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1509" width="0.3" height="15.0" fill="rgb(253,161,31)" rx="2" ry="2" />
<text  x="190.04" y="1519.5" ></text>
</g>
<g >
<title>mmap_region (18 samples, 0.09%)</title><rect x="764.9" y="1925" width="1.1" height="15.0" fill="rgb(208,159,40)" rx="2" ry="2" />
<text  x="767.93" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (69 samples, 0.34%)</title><rect x="199.4" y="1653" width="4.1" height="15.0" fill="rgb(227,121,48)" rx="2" ry="2" />
<text  x="202.42" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (368 samples, 1.84%)</title><rect x="55.2" y="1157" width="21.7" height="15.0" fill="rgb(230,171,47)" rx="2" ry="2" />
<text  x="58.22" y="1167.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1845" width="0.1" height="15.0" fill="rgb(245,36,34)" rx="2" ry="2" />
<text  x="161.98" y="1855.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.01%)</title><rect x="491.3" y="1925" width="0.2" height="15.0" fill="rgb(219,71,15)" rx="2" ry="2" />
<text  x="494.32" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1605" width="0.1" height="15.0" fill="rgb(241,219,44)" rx="2" ry="2" />
<text  x="189.87" y="1615.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (5 samples, 0.02%)</title><rect x="946.7" y="1909" width="0.3" height="15.0" fill="rgb(249,167,36)" rx="2" ry="2" />
<text  x="949.75" y="1919.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (27 samples, 0.13%)</title><rect x="1151.7" y="2037" width="1.6" height="15.0" fill="rgb(207,216,0)" rx="2" ry="2" />
<text  x="1154.68" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="1099.0" y="2021" width="0.1" height="15.0" fill="rgb(224,110,48)" rx="2" ry="2" />
<text  x="1101.97" y="2031.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="84.1" y="1525" width="0.1" height="15.0" fill="rgb(217,228,25)" rx="2" ry="2" />
<text  x="87.11" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1509" width="0.3" height="15.0" fill="rgb(228,207,4)" rx="2" ry="2" />
<text  x="219.82" y="1519.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="191.5" y="1557" width="0.1" height="15.0" fill="rgb(228,122,29)" rx="2" ry="2" />
<text  x="194.47" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1573" width="0.2" height="15.0" fill="rgb(212,24,1)" rx="2" ry="2" />
<text  x="1190.29" y="1583.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.04%)</title><rect x="514.6" y="2005" width="0.5" height="15.0" fill="rgb(206,17,11)" rx="2" ry="2" />
<text  x="517.60" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (5 samples, 0.02%)</title><rect x="813.5" y="2037" width="0.3" height="15.0" fill="rgb(216,115,2)" rx="2" ry="2" />
<text  x="816.51" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="98.9" y="2005" width="0.1" height="15.0" fill="rgb(219,1,8)" rx="2" ry="2" />
<text  x="101.91" y="2015.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1845" width="0.2" height="15.0" fill="rgb(222,148,2)" rx="2" ry="2" />
<text  x="520.20" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (87 samples, 0.43%)</title><rect x="159.9" y="1589" width="5.1" height="15.0" fill="rgb(235,214,44)" rx="2" ry="2" />
<text  x="162.87" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="82.7" y="1509" width="0.2" height="15.0" fill="rgb(238,91,53)" rx="2" ry="2" />
<text  x="85.69" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1509" width="0.3" height="15.0" fill="rgb(222,66,3)" rx="2" ry="2" />
<text  x="219.46" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1621" width="0.4" height="15.0" fill="rgb(248,123,18)" rx="2" ry="2" />
<text  x="1189.40" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (23 samples, 0.11%)</title><rect x="1100.4" y="2053" width="1.3" height="15.0" fill="rgb(218,42,26)" rx="2" ry="2" />
<text  x="1103.39" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.03%)</title><rect x="175.1" y="1589" width="0.4" height="15.0" fill="rgb(217,212,22)" rx="2" ry="2" />
<text  x="178.14" y="1599.5" ></text>
</g>
<g >
<title>main (6,755 samples, 33.75%)</title><rect x="119.9" y="2021" width="398.2" height="15.0" fill="rgb(252,129,10)" rx="2" ry="2" />
<text  x="122.89" y="2031.5" >main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1413" width="0.3" height="15.0" fill="rgb(243,124,20)" rx="2" ry="2" />
<text  x="1189.52" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.38%)</title><rect x="176.4" y="1765" width="4.5" height="15.0" fill="rgb(252,110,43)" rx="2" ry="2" />
<text  x="179.43" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_ScannerBase::_ScannerBase (2 samples, 0.01%)</title><rect x="216.1" y="1909" width="0.1" height="15.0" fill="rgb(207,108,52)" rx="2" ry="2" />
<text  x="219.05" y="1919.5" ></text>
</g>
<g >
<title>page_fault (5 samples, 0.02%)</title><rect x="1023.3" y="2037" width="0.3" height="15.0" fill="rgb(251,198,18)" rx="2" ry="2" />
<text  x="1026.33" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadContextBase::OnJoined (9 samples, 0.04%)</title><rect x="764.2" y="2037" width="0.5" height="15.0" fill="rgb(206,151,3)" rx="2" ry="2" />
<text  x="767.16" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.01%)</title><rect x="167.6" y="1573" width="0.2" height="15.0" fill="rgb(235,226,42)" rx="2" ry="2" />
<text  x="170.59" y="1583.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (306 samples, 1.53%)</title><rect x="383.7" y="1925" width="18.1" height="15.0" fill="rgb(233,111,23)" rx="2" ry="2" />
<text  x="386.72" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="581" width="0.3" height="15.0" fill="rgb(229,48,49)" rx="2" ry="2" />
<text  x="1189.52" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::value (2 samples, 0.01%)</title><rect x="199.2" y="1717" width="0.1" height="15.0" fill="rgb(216,10,13)" rx="2" ry="2" />
<text  x="202.19" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="501" width="0.3" height="15.0" fill="rgb(250,203,39)" rx="2" ry="2" />
<text  x="1189.52" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="186.3" y="1781" width="0.1" height="15.0" fill="rgb(248,220,16)" rx="2" ry="2" />
<text  x="189.28" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (337 samples, 1.68%)</title><rect x="55.2" y="517" width="19.9" height="15.0" fill="rgb(210,113,4)" rx="2" ry="2" />
<text  x="58.22" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1365" width="0.3" height="15.0" fill="rgb(214,169,45)" rx="2" ry="2" />
<text  x="219.82" y="1375.5" ></text>
</g>
<g >
<title>handle_mm_fault (9 samples, 0.04%)</title><rect x="652.7" y="1813" width="0.5" height="15.0" fill="rgb(254,206,4)" rx="2" ry="2" />
<text  x="655.68" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1186.6" y="53" width="0.2" height="15.0" fill="rgb(246,147,0)" rx="2" ry="2" />
<text  x="1189.58" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (464 samples, 2.32%)</title><rect x="159.3" y="1941" width="27.4" height="15.0" fill="rgb(252,200,45)" rx="2" ry="2" />
<text  x="162.33" y="1951.5" >s..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="78.4" y="1269" width="0.2" height="15.0" fill="rgb(246,169,38)" rx="2" ry="2" />
<text  x="81.45" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1589" width="0.1" height="15.0" fill="rgb(241,48,53)" rx="2" ry="2" />
<text  x="189.87" y="1599.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (3 samples, 0.01%)</title><rect x="175.7" y="1605" width="0.2" height="15.0" fill="rgb(206,136,10)" rx="2" ry="2" />
<text  x="178.72" y="1615.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="154.9" y="1669" width="0.1" height="15.0" fill="rgb(224,203,2)" rx="2" ry="2" />
<text  x="157.85" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1333" width="0.3" height="15.0" fill="rgb(220,163,20)" rx="2" ry="2" />
<text  x="1189.52" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1125" width="0.3" height="15.0" fill="rgb(223,196,37)" rx="2" ry="2" />
<text  x="1189.52" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.15%)</title><rect x="810.9" y="2021" width="1.8" height="15.0" fill="rgb(249,208,40)" rx="2" ry="2" />
<text  x="813.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.01%)</title><rect x="754.7" y="1973" width="0.2" height="15.0" fill="rgb(218,79,49)" rx="2" ry="2" />
<text  x="757.73" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (10 samples, 0.05%)</title><rect x="131.2" y="1669" width="0.5" height="15.0" fill="rgb(220,135,46)" rx="2" ry="2" />
<text  x="134.15" y="1679.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="632.5" y="1845" width="0.1" height="15.0" fill="rgb(249,136,53)" rx="2" ry="2" />
<text  x="635.46" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1221" width="0.4" height="15.0" fill="rgb(240,144,50)" rx="2" ry="2" />
<text  x="1189.88" y="1231.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="201.6" y="1605" width="0.1" height="15.0" fill="rgb(208,115,53)" rx="2" ry="2" />
<text  x="204.61" y="1615.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.02%)</title><rect x="104.7" y="2021" width="0.3" height="15.0" fill="rgb(215,193,0)" rx="2" ry="2" />
<text  x="107.74" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (82 samples, 0.41%)</title><rect x="136.2" y="1653" width="4.9" height="15.0" fill="rgb(234,99,0)" rx="2" ry="2" />
<text  x="139.22" y="1663.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="148.0" y="1653" width="0.1" height="15.0" fill="rgb(240,137,1)" rx="2" ry="2" />
<text  x="151.02" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1653" width="0.2" height="15.0" fill="rgb(207,178,17)" rx="2" ry="2" />
<text  x="1190.29" y="1663.5" ></text>
</g>
<g >
<title>clear_page_erms (24 samples, 0.12%)</title><rect x="509.0" y="1845" width="1.4" height="15.0" fill="rgb(240,78,8)" rx="2" ry="2" />
<text  x="512.00" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="917" width="0.2" height="15.0" fill="rgb(220,93,17)" rx="2" ry="2" />
<text  x="1190.29" y="927.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (77 samples, 0.38%)</title><rect x="37.5" y="2021" width="4.5" height="15.0" fill="rgb(235,139,42)" rx="2" ry="2" />
<text  x="40.47" y="2031.5" ></text>
</g>
<g >
<title>handle_mm_fault (5 samples, 0.02%)</title><rect x="762.3" y="1973" width="0.3" height="15.0" fill="rgb(234,168,11)" rx="2" ry="2" />
<text  x="765.33" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (2 samples, 0.01%)</title><rect x="768.5" y="2037" width="0.1" height="15.0" fill="rgb(220,86,28)" rx="2" ry="2" />
<text  x="771.53" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (10 samples, 0.05%)</title><rect x="539.1" y="1893" width="0.6" height="15.0" fill="rgb(231,91,37)" rx="2" ry="2" />
<text  x="542.13" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1365" width="0.3" height="15.0" fill="rgb(238,176,42)" rx="2" ry="2" />
<text  x="190.04" y="1375.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (11 samples, 0.05%)</title><rect x="150.7" y="1637" width="0.7" height="15.0" fill="rgb(226,64,14)" rx="2" ry="2" />
<text  x="153.73" y="1647.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (3 samples, 0.01%)</title><rect x="584.1" y="1893" width="0.1" height="15.0" fill="rgb(207,126,37)" rx="2" ry="2" />
<text  x="587.05" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1365" width="0.3" height="15.0" fill="rgb(242,164,20)" rx="2" ry="2" />
<text  x="1189.52" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13 samples, 0.06%)</title><rect x="216.3" y="1925" width="0.8" height="15.0" fill="rgb(217,149,47)" rx="2" ry="2" />
<text  x="219.29" y="1935.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="1100.9" y="1829" width="0.1" height="15.0" fill="rgb(214,222,42)" rx="2" ry="2" />
<text  x="1103.86" y="1839.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.01%)</title><rect x="1189.4" y="2021" width="0.1" height="15.0" fill="rgb(252,47,11)" rx="2" ry="2" />
<text  x="1192.35" y="2031.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="766.3" y="1861" width="0.2" height="15.0" fill="rgb(235,105,2)" rx="2" ry="2" />
<text  x="769.34" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.4" y="53" width="0.1" height="15.0" fill="rgb(207,64,34)" rx="2" ry="2" />
<text  x="1190.41" y="63.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (8 samples, 0.04%)</title><rect x="764.2" y="1989" width="0.5" height="15.0" fill="rgb(248,41,1)" rx="2" ry="2" />
<text  x="767.22" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (519 samples, 2.59%)</title><rect x="55.2" y="1669" width="30.6" height="15.0" fill="rgb(207,224,53)" rx="2" ry="2" />
<text  x="58.16" y="1679.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1781" width="0.1" height="15.0" fill="rgb(214,88,13)" rx="2" ry="2" />
<text  x="161.98" y="1791.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.01%)</title><rect x="871.6" y="1957" width="0.2" height="15.0" fill="rgb(250,1,48)" rx="2" ry="2" />
<text  x="874.58" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (530 samples, 2.65%)</title><rect x="55.2" y="1717" width="31.2" height="15.0" fill="rgb(228,29,10)" rx="2" ry="2" />
<text  x="58.16" y="1727.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (79 samples, 0.39%)</title><rect x="194.3" y="1685" width="4.7" height="15.0" fill="rgb(222,71,35)" rx="2" ry="2" />
<text  x="197.30" y="1695.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.23%)</title><rect x="132.9" y="1573" width="2.7" height="15.0" fill="rgb(218,26,15)" rx="2" ry="2" />
<text  x="135.86" y="1583.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (2 samples, 0.01%)</title><rect x="521.3" y="1797" width="0.1" height="15.0" fill="rgb(224,53,20)" rx="2" ry="2" />
<text  x="524.32" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.05%)</title><rect x="216.4" y="1749" width="0.7" height="15.0" fill="rgb(206,133,20)" rx="2" ry="2" />
<text  x="219.40" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="187.2" y="1093" width="0.1" height="15.0" fill="rgb(226,27,42)" rx="2" ry="2" />
<text  x="190.16" y="1103.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (67 samples, 0.33%)</title><rect x="94.8" y="2021" width="3.9" height="15.0" fill="rgb(244,99,40)" rx="2" ry="2" />
<text  x="97.78" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1061" width="0.4" height="15.0" fill="rgb(215,1,12)" rx="2" ry="2" />
<text  x="1189.88" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (69 samples, 0.34%)</title><rect x="136.6" y="1621" width="4.1" height="15.0" fill="rgb(240,171,11)" rx="2" ry="2" />
<text  x="139.64" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="229" width="0.3" height="15.0" fill="rgb(205,67,17)" rx="2" ry="2" />
<text  x="1189.52" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="869" width="0.3" height="15.0" fill="rgb(214,91,47)" rx="2" ry="2" />
<text  x="1189.52" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1317" width="0.3" height="15.0" fill="rgb(209,39,10)" rx="2" ry="2" />
<text  x="219.82" y="1327.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.03%)</title><rect x="156.5" y="1669" width="0.4" height="15.0" fill="rgb(213,181,18)" rx="2" ry="2" />
<text  x="159.51" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::value (3 samples, 0.01%)</title><rect x="141.2" y="1717" width="0.2" height="15.0" fill="rgb(242,203,40)" rx="2" ry="2" />
<text  x="144.24" y="1727.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (4 samples, 0.02%)</title><rect x="582.2" y="1893" width="0.2" height="15.0" fill="rgb(233,44,38)" rx="2" ry="2" />
<text  x="585.17" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (91 samples, 0.45%)</title><rect x="152.4" y="1733" width="5.3" height="15.0" fill="rgb(212,207,27)" rx="2" ry="2" />
<text  x="155.38" y="1743.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="155.4" y="1669" width="0.1" height="15.0" fill="rgb(213,178,41)" rx="2" ry="2" />
<text  x="158.38" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1173" width="0.1" height="15.0" fill="rgb(235,131,41)" rx="2" ry="2" />
<text  x="57.98" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1605" width="0.4" height="15.0" fill="rgb(206,119,2)" rx="2" ry="2" />
<text  x="1189.40" y="1615.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.2" y="1893" width="0.2" height="15.0" fill="rgb(218,171,28)" rx="2" ry="2" />
<text  x="520.20" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (342 samples, 1.71%)</title><rect x="55.2" y="709" width="20.2" height="15.0" fill="rgb(230,19,32)" rx="2" ry="2" />
<text  x="58.22" y="719.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="101" width="19.3" height="15.0" fill="rgb(251,7,50)" rx="2" ry="2" />
<text  x="58.22" y="111.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.03%)</title><rect x="28.9" y="2037" width="0.4" height="15.0" fill="rgb(214,121,7)" rx="2" ry="2" />
<text  x="31.92" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="148.7" y="1637" width="0.1" height="15.0" fill="rgb(214,106,51)" rx="2" ry="2" />
<text  x="151.66" y="1647.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (138 samples, 0.69%)</title><rect x="121.7" y="1989" width="8.2" height="15.0" fill="rgb(243,137,19)" rx="2" ry="2" />
<text  x="124.72" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (178 samples, 0.89%)</title><rect x="131.1" y="1765" width="10.5" height="15.0" fill="rgb(242,192,24)" rx="2" ry="2" />
<text  x="134.10" y="1775.5" ></text>
</g>
<g >
<title>copy_page_to_iter (4 samples, 0.02%)</title><rect x="1110.9" y="1877" width="0.3" height="15.0" fill="rgb(224,140,0)" rx="2" ry="2" />
<text  x="1113.94" y="1887.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (2 samples, 0.01%)</title><rect x="1100.7" y="1813" width="0.2" height="15.0" fill="rgb(246,157,49)" rx="2" ry="2" />
<text  x="1103.74" y="1823.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (5 samples, 0.02%)</title><rect x="1102.2" y="1877" width="0.3" height="15.0" fill="rgb(233,184,44)" rx="2" ry="2" />
<text  x="1105.16" y="1887.5" ></text>
</g>
<g >
<title>__interceptor_strlen (18 samples, 0.09%)</title><rect x="581.0" y="1893" width="1.0" height="15.0" fill="rgb(205,112,43)" rx="2" ry="2" />
<text  x="583.99" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (6 samples, 0.03%)</title><rect x="119.0" y="2037" width="0.3" height="15.0" fill="rgb(249,58,47)" rx="2" ry="2" />
<text  x="121.95" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (96 samples, 0.48%)</title><rect x="203.7" y="1701" width="5.7" height="15.0" fill="rgb(211,89,26)" rx="2" ry="2" />
<text  x="206.73" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (755 samples, 3.77%)</title><rect x="55.2" y="2037" width="44.5" height="15.0" fill="rgb(214,119,28)" rx="2" ry="2" />
<text  x="58.16" y="2047.5" >[unk..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="91.7" y="1973" width="0.1" height="15.0" fill="rgb(218,209,36)" rx="2" ry="2" />
<text  x="94.71" y="1983.5" ></text>
</g>
<g >
<title>memcpy (12 samples, 0.06%)</title><rect x="656.0" y="1877" width="0.7" height="15.0" fill="rgb(232,23,50)" rx="2" ry="2" />
<text  x="658.98" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;onmt::AnnotatedToken, std::allocator&lt;onmt::AnnotatedToken&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="752.8" y="1893" width="0.2" height="15.0" fill="rgb(215,17,36)" rx="2" ry="2" />
<text  x="755.84" y="1903.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (49 samples, 0.24%)</title><rect x="740.0" y="1877" width="2.9" height="15.0" fill="rgb(218,98,30)" rx="2" ry="2" />
<text  x="742.99" y="1887.5" ></text>
</g>
<g >
<title>smp_call_function_single (4 samples, 0.02%)</title><rect x="521.2" y="1829" width="0.2" height="15.0" fill="rgb(217,199,45)" rx="2" ry="2" />
<text  x="524.21" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1685" width="0.4" height="15.0" fill="rgb(220,226,12)" rx="2" ry="2" />
<text  x="1189.88" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="181.0" y="1717" width="0.2" height="15.0" fill="rgb(248,221,48)" rx="2" ry="2" />
<text  x="183.97" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (563 samples, 2.81%)</title><rect x="55.2" y="1861" width="33.2" height="15.0" fill="rgb(237,215,6)" rx="2" ry="2" />
<text  x="58.16" y="1871.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1077" width="0.3" height="15.0" fill="rgb(243,174,37)" rx="2" ry="2" />
<text  x="1189.52" y="1087.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="653.1" y="1749" width="0.1" height="15.0" fill="rgb(238,170,46)" rx="2" ry="2" />
<text  x="656.09" y="1759.5" ></text>
</g>
<g >
<title>page_fault (95 samples, 0.47%)</title><rect x="23.1" y="2037" width="5.6" height="15.0" fill="rgb(207,14,22)" rx="2" ry="2" />
<text  x="26.09" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="163.0" y="1541" width="0.2" height="15.0" fill="rgb(205,121,10)" rx="2" ry="2" />
<text  x="166.05" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.69%)</title><rect x="55.2" y="597" width="20.0" height="15.0" fill="rgb(232,78,6)" rx="2" ry="2" />
<text  x="58.22" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.01%)</title><rect x="579.1" y="1829" width="0.2" height="15.0" fill="rgb(215,137,10)" rx="2" ry="2" />
<text  x="582.10" y="1839.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="146.2" y="1637" width="0.1" height="15.0" fill="rgb(245,120,51)" rx="2" ry="2" />
<text  x="149.19" y="1647.5" ></text>
</g>
<g >
<title>__handle_mm_fault (18 samples, 0.09%)</title><rect x="499.5" y="1861" width="1.1" height="15.0" fill="rgb(234,212,14)" rx="2" ry="2" />
<text  x="502.51" y="1871.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="151.4" y="1637" width="0.1" height="15.0" fill="rgb(208,93,32)" rx="2" ry="2" />
<text  x="154.38" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="869" width="20.4" height="15.0" fill="rgb(220,132,24)" rx="2" ry="2" />
<text  x="58.22" y="879.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="632.5" y="1861" width="0.1" height="15.0" fill="rgb(209,49,37)" rx="2" ry="2" />
<text  x="635.46" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="215.2" y="1765" width="0.1" height="15.0" fill="rgb(213,159,23)" rx="2" ry="2" />
<text  x="218.17" y="1775.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (17 samples, 0.08%)</title><rect x="652.2" y="1877" width="1.0" height="15.0" fill="rgb(244,160,37)" rx="2" ry="2" />
<text  x="655.21" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_strcmp (4 samples, 0.02%)</title><rect x="42.0" y="2021" width="0.2" height="15.0" fill="rgb(231,185,36)" rx="2" ry="2" />
<text  x="45.01" y="2031.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="178.6" y="1621" width="0.1" height="15.0" fill="rgb(250,135,27)" rx="2" ry="2" />
<text  x="181.55" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="1121.6" y="2037" width="0.1" height="15.0" fill="rgb(250,123,26)" rx="2" ry="2" />
<text  x="1124.55" y="2047.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (5 samples, 0.02%)</title><rect x="27.2" y="1941" width="0.3" height="15.0" fill="rgb(208,72,51)" rx="2" ry="2" />
<text  x="30.22" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1125" width="0.2" height="15.0" fill="rgb(235,32,29)" rx="2" ry="2" />
<text  x="219.64" y="1135.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (474 samples, 2.37%)</title><rect x="131.0" y="1957" width="27.9" height="15.0" fill="rgb(244,178,9)" rx="2" ry="2" />
<text  x="133.98" y="1967.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="421" width="0.4" height="15.0" fill="rgb(223,123,11)" rx="2" ry="2" />
<text  x="1189.88" y="431.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.01%)</title><rect x="197.7" y="1589" width="0.2" height="15.0" fill="rgb(232,168,15)" rx="2" ry="2" />
<text  x="200.72" y="1599.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="138.9" y="1589" width="0.2" height="15.0" fill="rgb(240,121,1)" rx="2" ry="2" />
<text  x="141.94" y="1599.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (21 samples, 0.10%)</title><rect x="115.7" y="2037" width="1.2" height="15.0" fill="rgb(227,143,51)" rx="2" ry="2" />
<text  x="118.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="133" width="0.4" height="15.0" fill="rgb(225,87,26)" rx="2" ry="2" />
<text  x="1189.93" y="143.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (24 samples, 0.12%)</title><rect x="764.9" y="1973" width="1.4" height="15.0" fill="rgb(215,130,24)" rx="2" ry="2" />
<text  x="767.87" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="43.9" y="2021" width="0.1" height="15.0" fill="rgb(212,99,3)" rx="2" ry="2" />
<text  x="46.90" y="2031.5" ></text>
</g>
<g >
<title>__asan_memmove (2 samples, 0.01%)</title><rect x="1188.9" y="2037" width="0.1" height="15.0" fill="rgb(206,45,3)" rx="2" ry="2" />
<text  x="1191.88" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (90 samples, 0.45%)</title><rect x="159.9" y="1669" width="5.3" height="15.0" fill="rgb(238,207,27)" rx="2" ry="2" />
<text  x="162.87" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1173" width="0.4" height="15.0" fill="rgb(221,16,18)" rx="2" ry="2" />
<text  x="1189.88" y="1183.5" ></text>
</g>
<g >
<title>smp_call_function_many (4 samples, 0.02%)</title><rect x="521.2" y="1845" width="0.2" height="15.0" fill="rgb(219,19,41)" rx="2" ry="2" />
<text  x="524.21" y="1855.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.02%)</title><rect x="634.3" y="1877" width="0.3" height="15.0" fill="rgb(219,121,36)" rx="2" ry="2" />
<text  x="637.34" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (462 samples, 2.31%)</title><rect x="159.5" y="1893" width="27.2" height="15.0" fill="rgb(247,69,8)" rx="2" ry="2" />
<text  x="162.45" y="1903.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="661" width="0.4" height="15.0" fill="rgb(250,45,20)" rx="2" ry="2" />
<text  x="1189.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1637" width="0.3" height="15.0" fill="rgb(216,78,22)" rx="2" ry="2" />
<text  x="190.04" y="1647.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.01%)</title><rect x="871.6" y="1989" width="0.2" height="15.0" fill="rgb(248,34,9)" rx="2" ry="2" />
<text  x="874.58" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1237" width="0.3" height="15.0" fill="rgb(222,203,22)" rx="2" ry="2" />
<text  x="190.04" y="1247.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="168.4" y="1573" width="0.1" height="15.0" fill="rgb(249,129,12)" rx="2" ry="2" />
<text  x="171.41" y="1583.5" ></text>
</g>
<g >
<title>__split_vma (2 samples, 0.01%)</title><rect x="765.0" y="1893" width="0.2" height="15.0" fill="rgb(235,201,15)" rx="2" ry="2" />
<text  x="768.05" y="1903.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (9 samples, 0.04%)</title><rect x="819.2" y="2005" width="0.5" height="15.0" fill="rgb(228,21,5)" rx="2" ry="2" />
<text  x="822.17" y="2015.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="479.9" y="1941" width="0.2" height="15.0" fill="rgb(210,206,29)" rx="2" ry="2" />
<text  x="482.94" y="1951.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="540.8" y="1957" width="0.2" height="15.0" fill="rgb(227,53,18)" rx="2" ry="2" />
<text  x="543.78" y="1967.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (48 samples, 0.24%)</title><rect x="1165.4" y="2021" width="2.8" height="15.0" fill="rgb(207,209,22)" rx="2" ry="2" />
<text  x="1168.42" y="2031.5" ></text>
</g>
<g >
<title>memcpy (4 samples, 0.02%)</title><rect x="1123.7" y="2037" width="0.2" height="15.0" fill="rgb(214,78,6)" rx="2" ry="2" />
<text  x="1126.67" y="2047.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.02%)</title><rect x="139.1" y="1589" width="0.3" height="15.0" fill="rgb(253,11,18)" rx="2" ry="2" />
<text  x="142.11" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (461 samples, 2.30%)</title><rect x="131.1" y="1845" width="27.2" height="15.0" fill="rgb(212,103,51)" rx="2" ry="2" />
<text  x="134.10" y="1855.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1221" width="0.2" height="15.0" fill="rgb(242,112,15)" rx="2" ry="2" />
<text  x="1190.29" y="1231.5" ></text>
</g>
<g >
<title>TDocument::operator= (2 samples, 0.01%)</title><rect x="517.8" y="1957" width="0.1" height="15.0" fill="rgb(212,177,35)" rx="2" ry="2" />
<text  x="520.79" y="1967.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (6 samples, 0.03%)</title><rect x="159.5" y="1637" width="0.4" height="15.0" fill="rgb(251,121,2)" rx="2" ry="2" />
<text  x="162.51" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="1941" width="0.1" height="15.0" fill="rgb(217,149,34)" rx="2" ry="2" />
<text  x="1189.17" y="1951.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="178.4" y="1621" width="0.2" height="15.0" fill="rgb(205,199,27)" rx="2" ry="2" />
<text  x="181.44" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="135.8" y="1605" width="0.1" height="15.0" fill="rgb(227,80,7)" rx="2" ry="2" />
<text  x="138.75" y="1615.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="212.2" y="1669" width="0.1" height="15.0" fill="rgb(242,115,19)" rx="2" ry="2" />
<text  x="215.22" y="1679.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="570.6" y="1813" width="0.1" height="15.0" fill="rgb(235,54,23)" rx="2" ry="2" />
<text  x="573.61" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1749" width="0.5" height="15.0" fill="rgb(249,30,47)" rx="2" ry="2" />
<text  x="189.81" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="87.5" y="1781" width="0.1" height="15.0" fill="rgb(250,0,2)" rx="2" ry="2" />
<text  x="90.47" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1157" width="0.2" height="15.0" fill="rgb(217,47,18)" rx="2" ry="2" />
<text  x="1190.29" y="1167.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="1187.9" y="2053" width="0.2" height="15.0" fill="rgb(240,207,53)" rx="2" ry="2" />
<text  x="1190.94" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (329 samples, 1.64%)</title><rect x="55.2" y="213" width="19.4" height="15.0" fill="rgb(253,192,40)" rx="2" ry="2" />
<text  x="58.22" y="223.5" ></text>
</g>
<g >
<title>__do_page_fault (36 samples, 0.18%)</title><rect x="508.6" y="1925" width="2.1" height="15.0" fill="rgb(225,115,31)" rx="2" ry="2" />
<text  x="511.59" y="1935.5" ></text>
</g>
<g >
<title>do_wp_page (77 samples, 0.38%)</title><rect x="944.5" y="1957" width="4.5" height="15.0" fill="rgb(245,190,6)" rx="2" ry="2" />
<text  x="947.51" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1413" width="0.4" height="15.0" fill="rgb(246,132,24)" rx="2" ry="2" />
<text  x="1189.88" y="1423.5" ></text>
</g>
<g >
<title>[libOpenNMTTokenizer.so] (2 samples, 0.01%)</title><rect x="591.0" y="1877" width="0.1" height="15.0" fill="rgb(228,166,12)" rx="2" ry="2" />
<text  x="593.95" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="373" width="0.3" height="15.0" fill="rgb(236,125,32)" rx="2" ry="2" />
<text  x="1189.52" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (19 samples, 0.09%)</title><rect x="678.0" y="1813" width="1.1" height="15.0" fill="rgb(239,51,31)" rx="2" ry="2" />
<text  x="681.03" y="1823.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (10 samples, 0.05%)</title><rect x="572.7" y="1941" width="0.6" height="15.0" fill="rgb(225,180,13)" rx="2" ry="2" />
<text  x="575.67" y="1951.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="632.5" y="1813" width="0.1" height="15.0" fill="rgb(215,228,1)" rx="2" ry="2" />
<text  x="635.46" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="725" width="0.4" height="15.0" fill="rgb(238,206,0)" rx="2" ry="2" />
<text  x="1189.88" y="735.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (5 samples, 0.02%)</title><rect x="27.6" y="1925" width="0.3" height="15.0" fill="rgb(231,197,10)" rx="2" ry="2" />
<text  x="30.63" y="1935.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (79 samples, 0.39%)</title><rect x="730.4" y="1877" width="4.6" height="15.0" fill="rgb(245,150,11)" rx="2" ry="2" />
<text  x="733.38" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1733" width="0.3" height="15.0" fill="rgb(220,28,0)" rx="2" ry="2" />
<text  x="219.46" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="101" width="0.2" height="15.0" fill="rgb(220,26,11)" rx="2" ry="2" />
<text  x="1190.35" y="111.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.01%)</title><rect x="192.4" y="1557" width="0.2" height="15.0" fill="rgb(252,191,29)" rx="2" ry="2" />
<text  x="195.41" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="917" width="0.4" height="15.0" fill="rgb(237,97,5)" rx="2" ry="2" />
<text  x="1189.88" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1941" width="0.2" height="15.0" fill="rgb(236,216,34)" rx="2" ry="2" />
<text  x="1190.29" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="469" width="19.7" height="15.0" fill="rgb(227,57,26)" rx="2" ry="2" />
<text  x="58.22" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.02%)</title><rect x="181.7" y="1685" width="0.3" height="15.0" fill="rgb(218,84,52)" rx="2" ry="2" />
<text  x="184.68" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1077" width="0.1" height="15.0" fill="rgb(207,101,5)" rx="2" ry="2" />
<text  x="57.98" y="1087.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (2 samples, 0.01%)</title><rect x="946.2" y="1925" width="0.1" height="15.0" fill="rgb(236,139,18)" rx="2" ry="2" />
<text  x="949.22" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1477" width="0.3" height="15.0" fill="rgb(245,141,19)" rx="2" ry="2" />
<text  x="1189.52" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1749" width="0.5" height="15.0" fill="rgb(242,110,3)" rx="2" ry="2" />
<text  x="1189.34" y="1759.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.01%)</title><rect x="84.1" y="1445" width="0.1" height="15.0" fill="rgb(210,137,40)" rx="2" ry="2" />
<text  x="87.11" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1525" width="0.3" height="15.0" fill="rgb(208,36,26)" rx="2" ry="2" />
<text  x="1189.52" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (338 samples, 1.69%)</title><rect x="55.2" y="565" width="19.9" height="15.0" fill="rgb(247,70,51)" rx="2" ry="2" />
<text  x="58.22" y="575.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="133" width="19.3" height="15.0" fill="rgb(216,85,11)" rx="2" ry="2" />
<text  x="58.22" y="143.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (24 samples, 0.12%)</title><rect x="947.6" y="1893" width="1.4" height="15.0" fill="rgb(216,149,21)" rx="2" ry="2" />
<text  x="950.57" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1765" width="0.5" height="15.0" fill="rgb(227,4,34)" rx="2" ry="2" />
<text  x="1189.34" y="1775.5" ></text>
</g>
<g >
<title>__libc_read (2 samples, 0.01%)</title><rect x="119.8" y="2037" width="0.1" height="15.0" fill="rgb(214,34,21)" rx="2" ry="2" />
<text  x="122.78" y="2047.5" ></text>
</g>
<g >
<title>all (20,015 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(246,53,25)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (17 samples, 0.08%)</title><rect x="814.6" y="2005" width="1.0" height="15.0" fill="rgb(242,16,41)" rx="2" ry="2" />
<text  x="817.57" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="152.1" y="1733" width="0.1" height="15.0" fill="rgb(205,151,40)" rx="2" ry="2" />
<text  x="155.08" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (82 samples, 0.41%)</title><rect x="209.8" y="1765" width="4.8" height="15.0" fill="rgb(249,33,26)" rx="2" ry="2" />
<text  x="212.80" y="1775.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="172.8" y="1589" width="0.3" height="15.0" fill="rgb(238,115,21)" rx="2" ry="2" />
<text  x="175.84" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (883 samples, 4.41%)</title><rect x="819.7" y="2037" width="52.1" height="15.0" fill="rgb(244,182,24)" rx="2" ry="2" />
<text  x="822.70" y="2047.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (79 samples, 0.39%)</title><rect x="189.6" y="1701" width="4.6" height="15.0" fill="rgb(210,188,18)" rx="2" ry="2" />
<text  x="192.58" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="85" width="0.4" height="15.0" fill="rgb(212,228,18)" rx="2" ry="2" />
<text  x="1189.93" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1301" width="0.3" height="15.0" fill="rgb(248,207,22)" rx="2" ry="2" />
<text  x="219.82" y="1311.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="210.4" y="1701" width="0.2" height="15.0" fill="rgb(215,115,54)" rx="2" ry="2" />
<text  x="213.39" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (97 samples, 0.48%)</title><rect x="159.5" y="1701" width="5.7" height="15.0" fill="rgb(223,33,38)" rx="2" ry="2" />
<text  x="162.45" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (134 samples, 0.67%)</title><rect x="1111.2" y="2053" width="7.9" height="15.0" fill="rgb(234,133,36)" rx="2" ry="2" />
<text  x="1114.18" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="178.3" y="1621" width="0.1" height="15.0" fill="rgb(208,62,45)" rx="2" ry="2" />
<text  x="181.26" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (90 samples, 0.45%)</title><rect x="159.9" y="1685" width="5.3" height="15.0" fill="rgb(225,82,49)" rx="2" ry="2" />
<text  x="162.87" y="1695.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="1099.0" y="2037" width="0.1" height="15.0" fill="rgb(213,197,5)" rx="2" ry="2" />
<text  x="1101.97" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="87.2" y="1765" width="0.2" height="15.0" fill="rgb(240,77,49)" rx="2" ry="2" />
<text  x="90.23" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="598.8" y="1861" width="0.2" height="15.0" fill="rgb(223,39,18)" rx="2" ry="2" />
<text  x="601.79" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (274 samples, 1.37%)</title><rect x="949.2" y="2053" width="16.2" height="15.0" fill="rgb(214,104,11)" rx="2" ry="2" />
<text  x="952.22" y="2063.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="1102.8" y="1957" width="0.1" height="15.0" fill="rgb(243,117,11)" rx="2" ry="2" />
<text  x="1105.80" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1717" width="0.3" height="15.0" fill="rgb(251,113,50)" rx="2" ry="2" />
<text  x="219.76" y="1727.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (21 samples, 0.10%)</title><rect x="114.5" y="2037" width="1.2" height="15.0" fill="rgb(211,106,12)" rx="2" ry="2" />
<text  x="117.47" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (589 samples, 2.94%)</title><rect x="55.2" y="1941" width="34.7" height="15.0" fill="rgb(237,81,40)" rx="2" ry="2" />
<text  x="58.16" y="1951.5" >[u..</text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="160.3" y="1573" width="0.2" height="15.0" fill="rgb(208,121,53)" rx="2" ry="2" />
<text  x="163.28" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1205" width="0.2" height="15.0" fill="rgb(254,170,50)" rx="2" ry="2" />
<text  x="219.93" y="1215.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (20 samples, 0.10%)</title><rect x="29.5" y="2021" width="1.1" height="15.0" fill="rgb(246,140,42)" rx="2" ry="2" />
<text  x="32.46" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (71 samples, 0.35%)</title><rect x="131.7" y="1653" width="4.2" height="15.0" fill="rgb(248,58,37)" rx="2" ry="2" />
<text  x="134.74" y="1663.5" ></text>
</g>
<g >
<title>lru_add_drain (3 samples, 0.01%)</title><rect x="765.5" y="1877" width="0.1" height="15.0" fill="rgb(247,66,17)" rx="2" ry="2" />
<text  x="768.46" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (41 samples, 0.20%)</title><rect x="1148.7" y="2037" width="2.4" height="15.0" fill="rgb(211,149,53)" rx="2" ry="2" />
<text  x="1151.67" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (18 samples, 0.09%)</title><rect x="324.5" y="1941" width="1.1" height="15.0" fill="rgb(214,204,24)" rx="2" ry="2" />
<text  x="327.53" y="1951.5" ></text>
</g>
<g >
<title>__do_page_fault (8 samples, 0.04%)</title><rect x="656.2" y="1829" width="0.5" height="15.0" fill="rgb(207,89,24)" rx="2" ry="2" />
<text  x="659.21" y="1839.5" ></text>
</g>
<g >
<title>std::locale::~locale (2 samples, 0.01%)</title><rect x="514.4" y="1973" width="0.1" height="15.0" fill="rgb(217,204,26)" rx="2" ry="2" />
<text  x="517.37" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (42 samples, 0.21%)</title><rect x="196.1" y="1605" width="2.4" height="15.0" fill="rgb(206,162,18)" rx="2" ry="2" />
<text  x="199.06" y="1615.5" ></text>
</g>
<g >
<title>__pthread_getspecific (9 samples, 0.04%)</title><rect x="596.3" y="1877" width="0.5" height="15.0" fill="rgb(208,221,37)" rx="2" ry="2" />
<text  x="599.32" y="1887.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10 samples, 0.05%)</title><rect x="678.3" y="1765" width="0.6" height="15.0" fill="rgb(220,196,5)" rx="2" ry="2" />
<text  x="681.32" y="1775.5" ></text>
</g>
<g >
<title>do_page_fault (5 samples, 0.02%)</title><rect x="1023.3" y="2021" width="0.3" height="15.0" fill="rgb(245,115,46)" rx="2" ry="2" />
<text  x="1026.33" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (471 samples, 2.35%)</title><rect x="131.1" y="1909" width="27.8" height="15.0" fill="rgb(232,56,11)" rx="2" ry="2" />
<text  x="134.10" y="1919.5" >s..</text>
</g>
<g >
<title>[unknown] (353 samples, 1.76%)</title><rect x="55.2" y="1077" width="20.8" height="15.0" fill="rgb(238,6,30)" rx="2" ry="2" />
<text  x="58.22" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (88 samples, 0.44%)</title><rect x="171.2" y="1717" width="5.2" height="15.0" fill="rgb(242,44,17)" rx="2" ry="2" />
<text  x="174.24" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="165" width="0.4" height="15.0" fill="rgb(215,76,0)" rx="2" ry="2" />
<text  x="1189.93" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1749" width="0.4" height="15.0" fill="rgb(237,193,5)" rx="2" ry="2" />
<text  x="1189.88" y="1759.5" ></text>
</g>
<g >
<title>wp_page_copy (14 samples, 0.07%)</title><rect x="54.1" y="1925" width="0.8" height="15.0" fill="rgb(253,82,20)" rx="2" ry="2" />
<text  x="57.10" y="1935.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (4 samples, 0.02%)</title><rect x="1110.9" y="1861" width="0.3" height="15.0" fill="rgb(240,147,4)" rx="2" ry="2" />
<text  x="1113.94" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.01%)</title><rect x="215.1" y="1797" width="0.2" height="15.0" fill="rgb(248,52,10)" rx="2" ry="2" />
<text  x="218.11" y="1807.5" ></text>
</g>
<g >
<title>expf32x (2 samples, 0.01%)</title><rect x="1103.3" y="2037" width="0.2" height="15.0" fill="rgb(230,220,53)" rx="2" ry="2" />
<text  x="1106.33" y="2047.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (2 samples, 0.01%)</title><rect x="84.1" y="1413" width="0.1" height="15.0" fill="rgb(215,113,44)" rx="2" ry="2" />
<text  x="87.11" y="1423.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,214 samples, 6.07%)</title><rect x="1027.5" y="2053" width="71.6" height="15.0" fill="rgb(248,189,47)" rx="2" ry="2" />
<text  x="1030.52" y="2063.5" >__saniti..</text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="495.9" y="1957" width="0.1" height="15.0" fill="rgb(233,79,1)" rx="2" ry="2" />
<text  x="498.91" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="901" width="0.4" height="15.0" fill="rgb(220,132,16)" rx="2" ry="2" />
<text  x="1189.88" y="911.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.01%)</title><rect x="157.3" y="1685" width="0.1" height="15.0" fill="rgb(234,50,39)" rx="2" ry="2" />
<text  x="160.27" y="1695.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (2 samples, 0.01%)</title><rect x="517.4" y="1989" width="0.2" height="15.0" fill="rgb(235,189,36)" rx="2" ry="2" />
<text  x="520.43" y="1999.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (9 samples, 0.04%)</title><rect x="514.6" y="1957" width="0.5" height="15.0" fill="rgb(254,51,30)" rx="2" ry="2" />
<text  x="517.60" y="1967.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (3,058 samples, 15.28%)</title><rect x="573.4" y="1925" width="180.3" height="15.0" fill="rgb(241,216,33)" rx="2" ry="2" />
<text  x="576.44" y="1935.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>onmt::unicode::is_letter (210 samples, 1.05%)</title><rect x="620.2" y="1877" width="12.4" height="15.0" fill="rgb(238,104,22)" rx="2" ry="2" />
<text  x="623.19" y="1887.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (125 samples, 0.62%)</title><rect x="1137.3" y="2037" width="7.4" height="15.0" fill="rgb(240,216,12)" rx="2" ry="2" />
<text  x="1140.29" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="741" width="0.2" height="15.0" fill="rgb(239,79,9)" rx="2" ry="2" />
<text  x="1190.29" y="751.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="149" width="19.3" height="15.0" fill="rgb(246,68,25)" rx="2" ry="2" />
<text  x="58.22" y="159.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (33 samples, 0.16%)</title><rect x="327.8" y="1973" width="1.9" height="15.0" fill="rgb(227,161,9)" rx="2" ry="2" />
<text  x="330.77" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.04%)</title><rect x="1186.3" y="1925" width="0.5" height="15.0" fill="rgb(219,75,42)" rx="2" ry="2" />
<text  x="1189.29" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="186.5" y="1781" width="0.1" height="15.0" fill="rgb(216,19,0)" rx="2" ry="2" />
<text  x="189.51" y="1791.5" ></text>
</g>
<g >
<title>__strxfrm_l (35 samples, 0.17%)</title><rect x="1168.2" y="2021" width="2.1" height="15.0" fill="rgb(224,178,2)" rx="2" ry="2" />
<text  x="1171.25" y="2031.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="802.2" y="2021" width="0.1" height="15.0" fill="rgb(213,47,47)" rx="2" ry="2" />
<text  x="805.19" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.03%)</title><rect x="1145.4" y="2037" width="0.4" height="15.0" fill="rgb(233,87,26)" rx="2" ry="2" />
<text  x="1148.43" y="2047.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="82.3" y="1349" width="0.1" height="15.0" fill="rgb(243,118,2)" rx="2" ry="2" />
<text  x="85.28" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1061" width="0.3" height="15.0" fill="rgb(238,43,28)" rx="2" ry="2" />
<text  x="1189.52" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1717" width="0.1" height="15.0" fill="rgb(209,46,11)" rx="2" ry="2" />
<text  x="161.98" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (456 samples, 2.28%)</title><rect x="55.2" y="1461" width="26.8" height="15.0" fill="rgb(230,59,21)" rx="2" ry="2" />
<text  x="58.16" y="1471.5" >[..</text>
</g>
<g >
<title>__asan::Allocator::Deallocate (4 samples, 0.02%)</title><rect x="143.5" y="1605" width="0.2" height="15.0" fill="rgb(220,130,14)" rx="2" ry="2" />
<text  x="146.48" y="1615.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="1925" width="0.4" height="15.0" fill="rgb(249,188,3)" rx="2" ry="2" />
<text  x="518.84" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (507 samples, 2.53%)</title><rect x="541.4" y="1925" width="29.9" height="15.0" fill="rgb(225,184,39)" rx="2" ry="2" />
<text  x="544.37" y="1935.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="293" width="0.3" height="15.0" fill="rgb(212,175,49)" rx="2" ry="2" />
<text  x="1189.52" y="303.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="91.7" y="1925" width="0.1" height="15.0" fill="rgb(211,64,34)" rx="2" ry="2" />
<text  x="94.71" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::~collate (19 samples, 0.09%)</title><rect x="818.6" y="2037" width="1.1" height="15.0" fill="rgb(235,9,15)" rx="2" ry="2" />
<text  x="821.58" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1557" width="0.1" height="15.0" fill="rgb(242,74,12)" rx="2" ry="2" />
<text  x="161.98" y="1567.5" ></text>
</g>
<g >
<title>do_page_fault (29 samples, 0.14%)</title><rect x="53.3" y="2005" width="1.7" height="15.0" fill="rgb(211,160,21)" rx="2" ry="2" />
<text  x="56.27" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (584 samples, 2.92%)</title><rect x="55.2" y="1925" width="34.4" height="15.0" fill="rgb(254,1,36)" rx="2" ry="2" />
<text  x="58.16" y="1935.5" >[u..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1029" width="0.1" height="15.0" fill="rgb(248,2,45)" rx="2" ry="2" />
<text  x="57.98" y="1039.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (8 samples, 0.04%)</title><rect x="1123.1" y="2037" width="0.5" height="15.0" fill="rgb(220,157,23)" rx="2" ry="2" />
<text  x="1126.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (64 samples, 0.32%)</title><rect x="131.9" y="1589" width="3.8" height="15.0" fill="rgb(205,55,33)" rx="2" ry="2" />
<text  x="134.92" y="1599.5" ></text>
</g>
<g >
<title>fasttext::FastText::createLoss (9 samples, 0.04%)</title><rect x="514.6" y="1973" width="0.5" height="15.0" fill="rgb(217,46,2)" rx="2" ry="2" />
<text  x="517.60" y="1983.5" ></text>
</g>
<g >
<title>__asan::CanPoisonMemory (16 samples, 0.08%)</title><rect x="971.0" y="2053" width="1.0" height="15.0" fill="rgb(223,117,18)" rx="2" ry="2" />
<text  x="974.04" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="43.4" y="2021" width="0.1" height="15.0" fill="rgb(209,228,12)" rx="2" ry="2" />
<text  x="46.37" y="2031.5" ></text>
</g>
<g >
<title>wp_page_copy (2 samples, 0.01%)</title><rect x="1099.0" y="1941" width="0.1" height="15.0" fill="rgb(222,51,27)" rx="2" ry="2" />
<text  x="1101.97" y="1951.5" ></text>
</g>
<g >
<title>ptep_clear_flush (9 samples, 0.04%)</title><rect x="54.4" y="1909" width="0.5" height="15.0" fill="rgb(226,43,23)" rx="2" ry="2" />
<text  x="57.39" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.09%)</title><rect x="818.6" y="2021" width="1.1" height="15.0" fill="rgb(237,130,52)" rx="2" ry="2" />
<text  x="821.58" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1397" width="0.1" height="15.0" fill="rgb(240,95,10)" rx="2" ry="2" />
<text  x="57.98" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (69 samples, 0.34%)</title><rect x="131.8" y="1621" width="4.1" height="15.0" fill="rgb(237,67,53)" rx="2" ry="2" />
<text  x="134.80" y="1631.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (10 samples, 0.05%)</title><rect x="1151.1" y="2037" width="0.6" height="15.0" fill="rgb(241,204,11)" rx="2" ry="2" />
<text  x="1154.09" y="2047.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (2 samples, 0.01%)</title><rect x="1100.7" y="1797" width="0.2" height="15.0" fill="rgb(246,56,24)" rx="2" ry="2" />
<text  x="1103.74" y="1807.5" ></text>
</g>
<g >
<title>TDocument::PreprocessTextFields (3,091 samples, 15.44%)</title><rect x="571.8" y="1973" width="182.3" height="15.0" fill="rgb(239,219,54)" rx="2" ry="2" />
<text  x="574.85" y="1983.5" >TDocument::PreprocessTe..</text>
</g>
<g >
<title>[unknown] (345 samples, 1.72%)</title><rect x="55.2" y="757" width="20.4" height="15.0" fill="rgb(253,136,49)" rx="2" ry="2" />
<text  x="58.22" y="767.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="766.5" y="2037" width="0.1" height="15.0" fill="rgb(242,97,40)" rx="2" ry="2" />
<text  x="769.46" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1573" width="0.3" height="15.0" fill="rgb(219,116,30)" rx="2" ry="2" />
<text  x="190.04" y="1583.5" ></text>
</g>
<g >
<title>get_page_from_freelist (7 samples, 0.03%)</title><rect x="26.2" y="1925" width="0.4" height="15.0" fill="rgb(213,101,51)" rx="2" ry="2" />
<text  x="29.15" y="1935.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (21 samples, 0.10%)</title><rect x="947.6" y="1861" width="1.3" height="15.0" fill="rgb(207,102,13)" rx="2" ry="2" />
<text  x="950.63" y="1871.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.01%)</title><rect x="1187.8" y="2053" width="0.1" height="15.0" fill="rgb(222,223,25)" rx="2" ry="2" />
<text  x="1190.82" y="2063.5" ></text>
</g>
<g >
<title>exit_mmap (8 samples, 0.04%)</title><rect x="1102.0" y="1957" width="0.5" height="15.0" fill="rgb(213,130,22)" rx="2" ry="2" />
<text  x="1104.98" y="1967.5" ></text>
</g>
<g >
<title>clear_page_erms (9 samples, 0.04%)</title><rect x="678.3" y="1733" width="0.6" height="15.0" fill="rgb(244,5,29)" rx="2" ry="2" />
<text  x="681.32" y="1743.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 0.01%)</title><rect x="766.3" y="1909" width="0.2" height="15.0" fill="rgb(219,43,46)" rx="2" ry="2" />
<text  x="769.28" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="677" width="0.3" height="15.0" fill="rgb(205,48,1)" rx="2" ry="2" />
<text  x="1189.52" y="687.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="871.8" y="2005" width="0.3" height="15.0" fill="rgb(223,63,3)" rx="2" ry="2" />
<text  x="874.82" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="197.6" y="1589" width="0.1" height="15.0" fill="rgb(245,155,24)" rx="2" ry="2" />
<text  x="200.60" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1429" width="0.4" height="15.0" fill="rgb(250,218,22)" rx="2" ry="2" />
<text  x="1189.88" y="1439.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.01%)</title><rect x="43.2" y="2005" width="0.2" height="15.0" fill="rgb(250,29,39)" rx="2" ry="2" />
<text  x="46.19" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (10 samples, 0.05%)</title><rect x="537.2" y="1909" width="0.6" height="15.0" fill="rgb(227,16,45)" rx="2" ry="2" />
<text  x="540.24" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1813" width="0.1" height="15.0" fill="rgb(215,101,50)" rx="2" ry="2" />
<text  x="161.98" y="1823.5" ></text>
</g>
<g >
<title>try_charge (8 samples, 0.04%)</title><rect x="27.9" y="1925" width="0.5" height="15.0" fill="rgb(249,59,29)" rx="2" ry="2" />
<text  x="30.92" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (514 samples, 2.57%)</title><rect x="55.2" y="1653" width="30.3" height="15.0" fill="rgb(232,130,43)" rx="2" ry="2" />
<text  x="58.16" y="1663.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1045" width="0.2" height="15.0" fill="rgb(207,39,42)" rx="2" ry="2" />
<text  x="1190.29" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="405" width="0.3" height="15.0" fill="rgb(218,27,10)" rx="2" ry="2" />
<text  x="1189.52" y="415.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="82.3" y="1397" width="0.1" height="15.0" fill="rgb(205,188,14)" rx="2" ry="2" />
<text  x="85.28" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="693" width="0.2" height="15.0" fill="rgb(225,165,11)" rx="2" ry="2" />
<text  x="1190.29" y="703.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (3 samples, 0.01%)</title><rect x="1100.7" y="1845" width="0.2" height="15.0" fill="rgb(218,209,1)" rx="2" ry="2" />
<text  x="1103.68" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (10 samples, 0.05%)</title><rect x="1120.2" y="2037" width="0.6" height="15.0" fill="rgb(242,164,44)" rx="2" ry="2" />
<text  x="1123.20" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.01%)</title><rect x="813.8" y="2005" width="0.2" height="15.0" fill="rgb(254,130,21)" rx="2" ry="2" />
<text  x="816.80" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="157.9" y="1797" width="0.3" height="15.0" fill="rgb(230,169,25)" rx="2" ry="2" />
<text  x="160.86" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1845" width="0.2" height="15.0" fill="rgb(225,135,34)" rx="2" ry="2" />
<text  x="1190.29" y="1855.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="165.6" y="1605" width="0.1" height="15.0" fill="rgb(232,89,32)" rx="2" ry="2" />
<text  x="168.58" y="1615.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::has_features (3 samples, 0.01%)</title><rect x="575.9" y="1893" width="0.2" height="15.0" fill="rgb(240,75,28)" rx="2" ry="2" />
<text  x="578.92" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (90 samples, 0.45%)</title><rect x="159.9" y="1653" width="5.3" height="15.0" fill="rgb(219,199,7)" rx="2" ry="2" />
<text  x="162.87" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.3" y="1877" width="0.5" height="15.0" fill="rgb(252,9,54)" rx="2" ry="2" />
<text  x="1189.34" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="85.3" y="1637" width="0.1" height="15.0" fill="rgb(241,216,1)" rx="2" ry="2" />
<text  x="88.29" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="90.9" y="1989" width="0.3" height="15.0" fill="rgb(242,1,53)" rx="2" ry="2" />
<text  x="93.95" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="869" width="0.2" height="15.0" fill="rgb(241,1,13)" rx="2" ry="2" />
<text  x="1190.29" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (6 samples, 0.03%)</title><rect x="158.4" y="1877" width="0.3" height="15.0" fill="rgb(253,92,50)" rx="2" ry="2" />
<text  x="161.39" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (75 samples, 0.37%)</title><rect x="176.4" y="1749" width="4.5" height="15.0" fill="rgb(217,17,50)" rx="2" ry="2" />
<text  x="179.43" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1909" width="0.2" height="15.0" fill="rgb(253,182,52)" rx="2" ry="2" />
<text  x="520.20" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1941" width="0.2" height="15.0" fill="rgb(231,107,19)" rx="2" ry="2" />
<text  x="520.20" y="1951.5" ></text>
</g>
<g >
<title>get_user_pages_fast (4 samples, 0.02%)</title><rect x="29.6" y="1893" width="0.3" height="15.0" fill="rgb(245,7,29)" rx="2" ry="2" />
<text  x="32.63" y="1903.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (5 samples, 0.02%)</title><rect x="167.8" y="1573" width="0.3" height="15.0" fill="rgb(206,53,43)" rx="2" ry="2" />
<text  x="170.82" y="1583.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (4 samples, 0.02%)</title><rect x="812.8" y="2037" width="0.2" height="15.0" fill="rgb(242,149,16)" rx="2" ry="2" />
<text  x="815.80" y="2047.5" ></text>
</g>
<g >
<title>futex_wake (16 samples, 0.08%)</title><rect x="29.6" y="1925" width="1.0" height="15.0" fill="rgb(229,40,40)" rx="2" ry="2" />
<text  x="32.63" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="981" width="0.2" height="15.0" fill="rgb(253,26,38)" rx="2" ry="2" />
<text  x="1190.29" y="991.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (20 samples, 0.10%)</title><rect x="71.5" y="37" width="1.2" height="15.0" fill="rgb(248,57,46)" rx="2" ry="2" />
<text  x="74.49" y="47.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.3" y="1189" width="0.1" height="15.0" fill="rgb(248,136,33)" rx="2" ry="2" />
<text  x="80.27" y="1199.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (5 samples, 0.02%)</title><rect x="810.6" y="2037" width="0.3" height="15.0" fill="rgb(249,13,10)" rx="2" ry="2" />
<text  x="813.62" y="2047.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="149.2" y="1637" width="0.2" height="15.0" fill="rgb(222,125,16)" rx="2" ry="2" />
<text  x="152.19" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="2053" width="0.2" height="15.0" fill="rgb(230,72,13)" rx="2" ry="2" />
<text  x="1190.29" y="2063.5" ></text>
</g>
<g >
<title>__do_page_fault (9 samples, 0.04%)</title><rect x="762.1" y="1989" width="0.5" height="15.0" fill="rgb(247,56,38)" rx="2" ry="2" />
<text  x="765.10" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (93 samples, 0.46%)</title><rect x="146.6" y="1781" width="5.5" height="15.0" fill="rgb(209,69,20)" rx="2" ry="2" />
<text  x="149.60" y="1791.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="84.1" y="1509" width="0.1" height="15.0" fill="rgb(237,139,39)" rx="2" ry="2" />
<text  x="87.11" y="1519.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="202.0" y="1605" width="0.1" height="15.0" fill="rgb(251,4,25)" rx="2" ry="2" />
<text  x="204.96" y="1615.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="193.6" y="1589" width="0.2" height="15.0" fill="rgb(248,152,25)" rx="2" ry="2" />
<text  x="196.65" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="157.7" y="1765" width="0.2" height="15.0" fill="rgb(220,110,5)" rx="2" ry="2" />
<text  x="160.74" y="1775.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="875.5" y="2021" width="0.3" height="15.0" fill="rgb(227,193,46)" rx="2" ry="2" />
<text  x="878.47" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (584 samples, 2.92%)</title><rect x="660.3" y="1877" width="34.4" height="15.0" fill="rgb(229,139,49)" rx="2" ry="2" />
<text  x="663.28" y="1887.5" >on..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1429" width="0.1" height="15.0" fill="rgb(243,68,4)" rx="2" ry="2" />
<text  x="57.98" y="1439.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (133 samples, 0.66%)</title><rect x="500.7" y="1909" width="7.8" height="15.0" fill="rgb(254,122,53)" rx="2" ry="2" />
<text  x="503.69" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (6 samples, 0.03%)</title><rect x="209.4" y="1733" width="0.4" height="15.0" fill="rgb(239,130,10)" rx="2" ry="2" />
<text  x="212.45" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4 samples, 0.02%)</title><rect x="163.2" y="1541" width="0.2" height="15.0" fill="rgb(227,85,4)" rx="2" ry="2" />
<text  x="166.17" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="597" width="0.2" height="15.0" fill="rgb(227,13,10)" rx="2" ry="2" />
<text  x="1190.29" y="607.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="171.5" y="1621" width="0.2" height="15.0" fill="rgb(240,147,49)" rx="2" ry="2" />
<text  x="174.48" y="1631.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (25 samples, 0.12%)</title><rect x="325.6" y="1941" width="1.5" height="15.0" fill="rgb(205,23,7)" rx="2" ry="2" />
<text  x="328.65" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (46 samples, 0.23%)</title><rect x="616.8" y="1861" width="2.7" height="15.0" fill="rgb(246,32,46)" rx="2" ry="2" />
<text  x="619.83" y="1871.5" ></text>
</g>
<g >
<title>fasttext::Loss::predict (10 samples, 0.05%)</title><rect x="1102.9" y="2053" width="0.6" height="15.0" fill="rgb(239,4,27)" rx="2" ry="2" />
<text  x="1105.92" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (2 samples, 0.01%)</title><rect x="165.3" y="1621" width="0.2" height="15.0" fill="rgb(213,226,18)" rx="2" ry="2" />
<text  x="168.35" y="1631.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (6 samples, 0.03%)</title><rect x="129.5" y="1941" width="0.4" height="15.0" fill="rgb(246,197,52)" rx="2" ry="2" />
<text  x="132.50" y="1951.5" ></text>
</g>
<g >
<title>__pthread_getspecific (34 samples, 0.17%)</title><rect x="1172.1" y="2037" width="2.0" height="15.0" fill="rgb(215,144,53)" rx="2" ry="2" />
<text  x="1175.08" y="2047.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.01%)</title><rect x="1023.4" y="1989" width="0.2" height="15.0" fill="rgb(211,23,40)" rx="2" ry="2" />
<text  x="1026.45" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="933" width="0.3" height="15.0" fill="rgb(226,19,13)" rx="2" ry="2" />
<text  x="1189.52" y="943.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="90.8" y="1989" width="0.1" height="15.0" fill="rgb(232,116,37)" rx="2" ry="2" />
<text  x="93.83" y="1999.5" ></text>
</g>
<g >
<title>__do_page_fault (95 samples, 0.47%)</title><rect x="23.1" y="2005" width="5.6" height="15.0" fill="rgb(250,183,15)" rx="2" ry="2" />
<text  x="26.09" y="2015.5" ></text>
</g>
<g >
<title>__lru_cache_add (3 samples, 0.01%)</title><rect x="26.8" y="1941" width="0.2" height="15.0" fill="rgb(208,8,35)" rx="2" ry="2" />
<text  x="29.80" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReturnToAllocator (7 samples, 0.03%)</title><rect x="1027.0" y="2053" width="0.4" height="15.0" fill="rgb(219,1,7)" rx="2" ry="2" />
<text  x="1029.99" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1317" width="0.2" height="15.0" fill="rgb(239,57,47)" rx="2" ry="2" />
<text  x="1190.29" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (80 samples, 0.40%)</title><rect x="181.3" y="1797" width="4.7" height="15.0" fill="rgb(208,193,26)" rx="2" ry="2" />
<text  x="184.27" y="1807.5" ></text>
</g>
<g >
<title>__do_munmap (3 samples, 0.01%)</title><rect x="766.3" y="1957" width="0.2" height="15.0" fill="rgb(228,85,10)" rx="2" ry="2" />
<text  x="769.28" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1589" width="0.4" height="15.0" fill="rgb(215,142,3)" rx="2" ry="2" />
<text  x="1189.88" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (595 samples, 2.97%)</title><rect x="55.2" y="1973" width="35.0" height="15.0" fill="rgb(220,104,27)" rx="2" ry="2" />
<text  x="58.16" y="1983.5" >[u..</text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (190 samples, 0.95%)</title><rect x="480.3" y="1941" width="11.2" height="15.0" fill="rgb(224,217,14)" rx="2" ry="2" />
<text  x="483.29" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1461" width="0.1" height="15.0" fill="rgb(239,31,21)" rx="2" ry="2" />
<text  x="189.87" y="1471.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="133.6" y="1557" width="0.3" height="15.0" fill="rgb(240,117,30)" rx="2" ry="2" />
<text  x="136.57" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="245" width="0.4" height="15.0" fill="rgb(236,223,17)" rx="2" ry="2" />
<text  x="1189.88" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (3 samples, 0.01%)</title><rect x="735.0" y="1877" width="0.2" height="15.0" fill="rgb(216,92,54)" rx="2" ry="2" />
<text  x="738.04" y="1887.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="91.7" y="1989" width="0.1" height="15.0" fill="rgb(251,224,44)" rx="2" ry="2" />
<text  x="94.71" y="1999.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="155.0" y="1669" width="0.1" height="15.0" fill="rgb(215,161,40)" rx="2" ry="2" />
<text  x="158.03" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (90 samples, 0.45%)</title><rect x="159.9" y="1637" width="5.3" height="15.0" fill="rgb(219,73,12)" rx="2" ry="2" />
<text  x="162.87" y="1647.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (4 samples, 0.02%)</title><rect x="802.3" y="2037" width="0.2" height="15.0" fill="rgb(239,79,4)" rx="2" ry="2" />
<text  x="805.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="469" width="0.3" height="15.0" fill="rgb(224,105,1)" rx="2" ry="2" />
<text  x="1189.52" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1173" width="0.3" height="15.0" fill="rgb(239,158,16)" rx="2" ry="2" />
<text  x="1189.52" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="325" width="19.6" height="15.0" fill="rgb(238,189,42)" rx="2" ry="2" />
<text  x="58.22" y="335.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (53 samples, 0.26%)</title><rect x="110.6" y="2037" width="3.1" height="15.0" fill="rgb(252,151,18)" rx="2" ry="2" />
<text  x="113.58" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (77 samples, 0.38%)</title><rect x="181.3" y="1733" width="4.6" height="15.0" fill="rgb(226,10,30)" rx="2" ry="2" />
<text  x="184.33" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="629" width="0.3" height="15.0" fill="rgb(225,25,27)" rx="2" ry="2" />
<text  x="1189.52" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (77 samples, 0.38%)</title><rect x="189.6" y="1685" width="4.5" height="15.0" fill="rgb(211,143,14)" rx="2" ry="2" />
<text  x="192.58" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="133" width="0.2" height="15.0" fill="rgb(235,136,53)" rx="2" ry="2" />
<text  x="1190.35" y="143.5" ></text>
</g>
<g >
<title>operator new[] (3 samples, 0.01%)</title><rect x="1110.5" y="2053" width="0.2" height="15.0" fill="rgb(240,124,46)" rx="2" ry="2" />
<text  x="1113.53" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1749" width="0.1" height="15.0" fill="rgb(236,201,38)" rx="2" ry="2" />
<text  x="161.98" y="1759.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (50 samples, 0.25%)</title><rect x="657.3" y="1877" width="3.0" height="15.0" fill="rgb(231,103,29)" rx="2" ry="2" />
<text  x="660.33" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="885" width="0.3" height="15.0" fill="rgb(235,19,1)" rx="2" ry="2" />
<text  x="1189.52" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1669" width="0.4" height="15.0" fill="rgb(236,174,27)" rx="2" ry="2" />
<text  x="1189.88" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="805" width="20.4" height="15.0" fill="rgb(225,24,45)" rx="2" ry="2" />
<text  x="58.22" y="815.5" ></text>
</g>
<g >
<title>memcpy (5 samples, 0.02%)</title><rect x="1118.8" y="2037" width="0.3" height="15.0" fill="rgb(215,75,35)" rx="2" ry="2" />
<text  x="1121.78" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="357" width="0.3" height="15.0" fill="rgb(244,173,20)" rx="2" ry="2" />
<text  x="1189.52" y="367.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="2005" width="0.2" height="15.0" fill="rgb(248,214,8)" rx="2" ry="2" />
<text  x="57.98" y="2015.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.01%)</title><rect x="130.5" y="1845" width="0.2" height="15.0" fill="rgb(211,38,5)" rx="2" ry="2" />
<text  x="133.51" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="91.7" y="2005" width="0.1" height="15.0" fill="rgb(206,107,26)" rx="2" ry="2" />
<text  x="94.71" y="2015.5" ></text>
</g>
<g >
<title>TSlinkClustering::FillDistanceMatrix (247 samples, 1.23%)</title><rect x="496.1" y="1973" width="14.6" height="15.0" fill="rgb(215,147,52)" rx="2" ry="2" />
<text  x="499.15" y="1983.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="78.7" y="1285" width="0.1" height="15.0" fill="rgb(210,42,50)" rx="2" ry="2" />
<text  x="81.68" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1877" width="0.2" height="15.0" fill="rgb(227,56,53)" rx="2" ry="2" />
<text  x="57.98" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (90 samples, 0.45%)</title><rect x="159.9" y="1621" width="5.3" height="15.0" fill="rgb(235,101,1)" rx="2" ry="2" />
<text  x="162.87" y="1631.5" ></text>
</g>
<g >
<title>Preprocess (3,087 samples, 15.42%)</title><rect x="572.0" y="1957" width="182.0" height="15.0" fill="rgb(237,218,15)" rx="2" ry="2" />
<text  x="575.03" y="1967.5" >Preprocess</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (200 samples, 1.00%)</title><rect x="159.5" y="1749" width="11.7" height="15.0" fill="rgb(205,131,30)" rx="2" ry="2" />
<text  x="162.45" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="635.5" y="1877" width="0.1" height="15.0" fill="rgb(241,7,11)" rx="2" ry="2" />
<text  x="638.46" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.02%)</title><rect x="88.5" y="1877" width="0.3" height="15.0" fill="rgb(211,52,25)" rx="2" ry="2" />
<text  x="91.53" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (90 samples, 0.45%)</title><rect x="165.7" y="1605" width="5.3" height="15.0" fill="rgb(232,115,47)" rx="2" ry="2" />
<text  x="168.70" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (10 samples, 0.05%)</title><rect x="179.8" y="1621" width="0.6" height="15.0" fill="rgb(205,34,17)" rx="2" ry="2" />
<text  x="182.79" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (82 samples, 0.41%)</title><rect x="194.3" y="1701" width="4.8" height="15.0" fill="rgb(249,192,9)" rx="2" ry="2" />
<text  x="197.30" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="186.8" y="1669" width="0.2" height="15.0" fill="rgb(231,212,1)" rx="2" ry="2" />
<text  x="189.81" y="1679.5" ></text>
</g>
<g >
<title>smp_call_function_single (2 samples, 0.01%)</title><rect x="1100.7" y="1765" width="0.2" height="15.0" fill="rgb(251,176,11)" rx="2" ry="2" />
<text  x="1103.74" y="1775.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (3 samples, 0.01%)</title><rect x="43.4" y="2037" width="0.1" height="15.0" fill="rgb(221,31,50)" rx="2" ry="2" />
<text  x="46.37" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (52 samples, 0.26%)</title><rect x="172.5" y="1605" width="3.1" height="15.0" fill="rgb(248,61,9)" rx="2" ry="2" />
<text  x="175.54" y="1615.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (7 samples, 0.03%)</title><rect x="521.1" y="1941" width="0.5" height="15.0" fill="rgb(227,192,8)" rx="2" ry="2" />
<text  x="524.15" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="194.6" y="1621" width="0.3" height="15.0" fill="rgb(252,26,13)" rx="2" ry="2" />
<text  x="197.65" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="572.9" y="1925" width="0.1" height="15.0" fill="rgb(222,148,33)" rx="2" ry="2" />
<text  x="575.85" y="1935.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="178.7" y="1621" width="0.1" height="15.0" fill="rgb(248,59,35)" rx="2" ry="2" />
<text  x="181.73" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1397" width="0.3" height="15.0" fill="rgb(224,54,6)" rx="2" ry="2" />
<text  x="219.82" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="186.8" y="1685" width="0.2" height="15.0" fill="rgb(210,32,17)" rx="2" ry="2" />
<text  x="189.81" y="1695.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.03%)</title><rect x="146.8" y="1669" width="0.4" height="15.0" fill="rgb(253,25,33)" rx="2" ry="2" />
<text  x="149.84" y="1679.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (3 samples, 0.01%)</title><rect x="618.1" y="1845" width="0.2" height="15.0" fill="rgb(216,72,48)" rx="2" ry="2" />
<text  x="621.13" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.9" y="1237" width="0.1" height="15.0" fill="rgb(250,12,18)" rx="2" ry="2" />
<text  x="80.86" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (499 samples, 2.49%)</title><rect x="55.2" y="1605" width="29.4" height="15.0" fill="rgb(246,147,30)" rx="2" ry="2" />
<text  x="58.16" y="1615.5" >[u..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="192.2" y="1557" width="0.1" height="15.0" fill="rgb(209,150,27)" rx="2" ry="2" />
<text  x="195.17" y="1567.5" ></text>
</g>
<g >
<title>strlen@plt (5 samples, 0.02%)</title><rect x="753.0" y="1893" width="0.3" height="15.0" fill="rgb(250,66,40)" rx="2" ry="2" />
<text  x="755.96" y="1903.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (5 samples, 0.02%)</title><rect x="517.8" y="1989" width="0.3" height="15.0" fill="rgb(252,149,8)" rx="2" ry="2" />
<text  x="520.79" y="1999.5" ></text>
</g>
<g >
<title>__do_page_fault (25 samples, 0.12%)</title><rect x="499.2" y="1893" width="1.5" height="15.0" fill="rgb(216,19,29)" rx="2" ry="2" />
<text  x="502.22" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (3 samples, 0.01%)</title><rect x="874.3" y="2037" width="0.2" height="15.0" fill="rgb(225,222,25)" rx="2" ry="2" />
<text  x="877.29" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="187.1" y="1157" width="0.2" height="15.0" fill="rgb(228,79,24)" rx="2" ry="2" />
<text  x="190.10" y="1167.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (2 samples, 0.01%)</title><rect x="1099.0" y="1893" width="0.1" height="15.0" fill="rgb(213,125,26)" rx="2" ry="2" />
<text  x="1101.97" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (70 samples, 0.35%)</title><rect x="199.4" y="1685" width="4.2" height="15.0" fill="rgb(251,107,11)" rx="2" ry="2" />
<text  x="202.42" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="517" width="0.4" height="15.0" fill="rgb(205,17,54)" rx="2" ry="2" />
<text  x="1189.88" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.5" y="1269" width="0.3" height="15.0" fill="rgb(212,37,47)" rx="2" ry="2" />
<text  x="219.52" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (434 samples, 2.17%)</title><rect x="189.2" y="1893" width="25.6" height="15.0" fill="rgb(237,157,13)" rx="2" ry="2" />
<text  x="192.23" y="1903.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1669" width="0.1" height="15.0" fill="rgb(211,44,28)" rx="2" ry="2" />
<text  x="161.98" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="80.5" y="1381" width="0.2" height="15.0" fill="rgb(236,215,32)" rx="2" ry="2" />
<text  x="83.45" y="1391.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2 samples, 0.01%)</title><rect x="119.8" y="1893" width="0.1" height="15.0" fill="rgb(252,108,14)" rx="2" ry="2" />
<text  x="122.78" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (80 samples, 0.40%)</title><rect x="181.3" y="1781" width="4.7" height="15.0" fill="rgb(211,221,17)" rx="2" ry="2" />
<text  x="184.27" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (3 samples, 0.01%)</title><rect x="135.4" y="1557" width="0.2" height="15.0" fill="rgb(241,50,7)" rx="2" ry="2" />
<text  x="138.40" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1253" width="0.3" height="15.0" fill="rgb(244,48,40)" rx="2" ry="2" />
<text  x="1189.52" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1445" width="0.4" height="15.0" fill="rgb(216,216,18)" rx="2" ry="2" />
<text  x="1189.88" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="837" width="0.4" height="15.0" fill="rgb(241,197,4)" rx="2" ry="2" />
<text  x="1189.88" y="847.5" ></text>
</g>
<g >
<title>page_fault (13 samples, 0.06%)</title><rect x="652.4" y="1861" width="0.8" height="15.0" fill="rgb(244,69,7)" rx="2" ry="2" />
<text  x="655.44" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (70 samples, 0.35%)</title><rect x="199.4" y="1701" width="4.2" height="15.0" fill="rgb(217,149,22)" rx="2" ry="2" />
<text  x="202.42" y="1711.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (447 samples, 2.23%)</title><rect x="544.5" y="1893" width="26.3" height="15.0" fill="rgb(210,174,50)" rx="2" ry="2" />
<text  x="547.49" y="1903.5" >f..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="152.0" y="1749" width="0.1" height="15.0" fill="rgb(250,219,48)" rx="2" ry="2" />
<text  x="154.97" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="86.2" y="1685" width="0.1" height="15.0" fill="rgb(241,199,34)" rx="2" ry="2" />
<text  x="89.17" y="1695.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.01%)</title><rect x="157.5" y="1701" width="0.2" height="15.0" fill="rgb(214,103,42)" rx="2" ry="2" />
<text  x="160.51" y="1711.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (230 samples, 1.15%)</title><rect x="478.3" y="1957" width="13.6" height="15.0" fill="rgb(205,182,24)" rx="2" ry="2" />
<text  x="481.34" y="1967.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="693.8" y="1717" width="0.1" height="15.0" fill="rgb(224,225,3)" rx="2" ry="2" />
<text  x="696.83" y="1727.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="151.5" y="1653" width="0.1" height="15.0" fill="rgb(254,175,12)" rx="2" ry="2" />
<text  x="154.49" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (96 samples, 0.48%)</title><rect x="203.7" y="1733" width="5.7" height="15.0" fill="rgb(205,160,42)" rx="2" ry="2" />
<text  x="206.73" y="1743.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (2 samples, 0.01%)</title><rect x="571.6" y="1893" width="0.1" height="15.0" fill="rgb(228,23,37)" rx="2" ry="2" />
<text  x="574.55" y="1903.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.07%)</title><rect x="618.7" y="1845" width="0.8" height="15.0" fill="rgb(254,55,38)" rx="2" ry="2" />
<text  x="621.66" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="357" width="0.4" height="15.0" fill="rgb(228,51,54)" rx="2" ry="2" />
<text  x="1189.88" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (4 samples, 0.02%)</title><rect x="199.1" y="1733" width="0.3" height="15.0" fill="rgb(249,34,20)" rx="2" ry="2" />
<text  x="202.13" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1477" width="0.3" height="15.0" fill="rgb(217,157,13)" rx="2" ry="2" />
<text  x="190.04" y="1487.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.01%)</title><rect x="579.0" y="1877" width="0.1" height="15.0" fill="rgb(230,11,14)" rx="2" ry="2" />
<text  x="581.98" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6 samples, 0.03%)</title><rect x="813.1" y="2037" width="0.3" height="15.0" fill="rgb(248,12,41)" rx="2" ry="2" />
<text  x="816.10" y="2047.5" ></text>
</g>
<g >
<title>__handle_mm_fault (85 samples, 0.42%)</title><rect x="944.0" y="1973" width="5.0" height="15.0" fill="rgb(209,63,26)" rx="2" ry="2" />
<text  x="947.04" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (86 samples, 0.43%)</title><rect x="136.1" y="1733" width="5.1" height="15.0" fill="rgb(227,107,6)" rx="2" ry="2" />
<text  x="139.11" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1573" width="0.3" height="15.0" fill="rgb(224,118,28)" rx="2" ry="2" />
<text  x="219.82" y="1583.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (312 samples, 1.56%)</title><rect x="383.4" y="1941" width="18.4" height="15.0" fill="rgb(242,173,26)" rx="2" ry="2" />
<text  x="386.37" y="1951.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (13 samples, 0.06%)</title><rect x="1154.7" y="2037" width="0.8" height="15.0" fill="rgb(232,28,4)" rx="2" ry="2" />
<text  x="1157.74" y="2047.5" ></text>
</g>
<g >
<title>unmap_single_vma (8 samples, 0.04%)</title><rect x="1102.0" y="1925" width="0.5" height="15.0" fill="rgb(235,40,35)" rx="2" ry="2" />
<text  x="1104.98" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (463 samples, 2.31%)</title><rect x="55.2" y="1493" width="27.3" height="15.0" fill="rgb(209,196,13)" rx="2" ry="2" />
<text  x="58.16" y="1503.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1237" width="0.2" height="15.0" fill="rgb(237,54,23)" rx="2" ry="2" />
<text  x="1190.29" y="1247.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (13 samples, 0.06%)</title><rect x="948.1" y="1781" width="0.8" height="15.0" fill="rgb(234,71,48)" rx="2" ry="2" />
<text  x="951.10" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="141.1" y="1685" width="0.1" height="15.0" fill="rgb(243,108,5)" rx="2" ry="2" />
<text  x="144.06" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="453" width="0.3" height="15.0" fill="rgb(254,167,37)" rx="2" ry="2" />
<text  x="1189.52" y="463.5" ></text>
</g>
<g >
<title>[tgnews] (213 samples, 1.06%)</title><rect x="30.6" y="2053" width="12.6" height="15.0" fill="rgb(223,15,48)" rx="2" ry="2" />
<text  x="33.63" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="84.3" y="1589" width="0.2" height="15.0" fill="rgb(242,26,31)" rx="2" ry="2" />
<text  x="87.34" y="1599.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.01%)</title><rect x="207.9" y="1637" width="0.1" height="15.0" fill="rgb(239,65,18)" rx="2" ry="2" />
<text  x="210.86" y="1647.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.02%)</title><rect x="53.9" y="1925" width="0.2" height="15.0" fill="rgb(207,226,52)" rx="2" ry="2" />
<text  x="56.86" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (9 samples, 0.04%)</title><rect x="1178.2" y="2037" width="0.5" height="15.0" fill="rgb(248,142,48)" rx="2" ry="2" />
<text  x="1181.21" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (9 samples, 0.04%)</title><rect x="591.1" y="1877" width="0.5" height="15.0" fill="rgb(253,11,37)" rx="2" ry="2" />
<text  x="594.07" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1973" width="0.2" height="15.0" fill="rgb(249,222,27)" rx="2" ry="2" />
<text  x="57.98" y="1983.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.01%)</title><rect x="499.9" y="1845" width="0.2" height="15.0" fill="rgb(230,10,54)" rx="2" ry="2" />
<text  x="502.92" y="1855.5" ></text>
</g>
<g >
<title>memcmp@plt (3 samples, 0.01%)</title><rect x="1110.0" y="2053" width="0.2" height="15.0" fill="rgb(235,205,6)" rx="2" ry="2" />
<text  x="1113.00" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1125" width="0.4" height="15.0" fill="rgb(251,113,15)" rx="2" ry="2" />
<text  x="1189.88" y="1135.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.02%)</title><rect x="149.6" y="1637" width="0.3" height="15.0" fill="rgb(241,103,43)" rx="2" ry="2" />
<text  x="152.61" y="1647.5" ></text>
</g>
<g >
<title>__do_page_fault (29 samples, 0.14%)</title><rect x="53.3" y="1989" width="1.7" height="15.0" fill="rgb(214,25,7)" rx="2" ry="2" />
<text  x="56.27" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="229" width="0.4" height="15.0" fill="rgb(237,118,36)" rx="2" ry="2" />
<text  x="1189.88" y="239.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (3 samples, 0.01%)</title><rect x="170.7" y="1589" width="0.2" height="15.0" fill="rgb(231,167,42)" rx="2" ry="2" />
<text  x="173.71" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (72 samples, 0.36%)</title><rect x="131.7" y="1701" width="4.3" height="15.0" fill="rgb(207,21,25)" rx="2" ry="2" />
<text  x="134.74" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="812.8" y="2005" width="0.2" height="15.0" fill="rgb(206,103,32)" rx="2" ry="2" />
<text  x="815.80" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (2 samples, 0.01%)</title><rect x="766.9" y="2037" width="0.1" height="15.0" fill="rgb(240,70,19)" rx="2" ry="2" />
<text  x="769.87" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.5" y="1317" width="0.3" height="15.0" fill="rgb(246,141,0)" rx="2" ry="2" />
<text  x="219.52" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1461" width="0.3" height="15.0" fill="rgb(251,92,17)" rx="2" ry="2" />
<text  x="190.04" y="1471.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="478.2" y="1925" width="0.1" height="15.0" fill="rgb(237,200,46)" rx="2" ry="2" />
<text  x="481.17" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1397" width="0.4" height="15.0" fill="rgb(208,125,8)" rx="2" ry="2" />
<text  x="1189.88" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (81 samples, 0.40%)</title><rect x="141.6" y="1669" width="4.8" height="15.0" fill="rgb(240,212,51)" rx="2" ry="2" />
<text  x="144.65" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1765" width="0.4" height="15.0" fill="rgb(208,199,13)" rx="2" ry="2" />
<text  x="1189.88" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="357" width="19.6" height="15.0" fill="rgb(210,126,48)" rx="2" ry="2" />
<text  x="58.22" y="367.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (3 samples, 0.01%)</title><rect x="946.0" y="1893" width="0.2" height="15.0" fill="rgb(237,28,3)" rx="2" ry="2" />
<text  x="949.04" y="1903.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (13 samples, 0.06%)</title><rect x="948.1" y="1797" width="0.8" height="15.0" fill="rgb(211,183,37)" rx="2" ry="2" />
<text  x="951.10" y="1807.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.03%)</title><rect x="202.1" y="1605" width="0.4" height="15.0" fill="rgb(227,191,0)" rx="2" ry="2" />
<text  x="205.14" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (554 samples, 2.77%)</title><rect x="55.2" y="1813" width="32.6" height="15.0" fill="rgb(226,151,7)" rx="2" ry="2" />
<text  x="58.16" y="1823.5" >[u..</text>
</g>
<g >
<title>DetectCategory (276 samples, 1.38%)</title><rect x="524.7" y="1973" width="16.3" height="15.0" fill="rgb(229,28,34)" rx="2" ry="2" />
<text  x="527.74" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (4 samples, 0.02%)</title><rect x="334.4" y="1989" width="0.2" height="15.0" fill="rgb(226,87,3)" rx="2" ry="2" />
<text  x="337.37" y="1999.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="179.1" y="1621" width="0.4" height="15.0" fill="rgb(248,128,40)" rx="2" ry="2" />
<text  x="182.14" y="1631.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (11 samples, 0.05%)</title><rect x="1009.2" y="2053" width="0.6" height="15.0" fill="rgb(237,205,42)" rx="2" ry="2" />
<text  x="1012.18" y="2063.5" ></text>
</g>
<g >
<title>__libc_read (4 samples, 0.02%)</title><rect x="1110.9" y="2037" width="0.3" height="15.0" fill="rgb(238,46,4)" rx="2" ry="2" />
<text  x="1113.94" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="453" width="0.2" height="15.0" fill="rgb(218,100,6)" rx="2" ry="2" />
<text  x="1190.35" y="463.5" ></text>
</g>
<g >
<title>[unknown] (534 samples, 2.67%)</title><rect x="55.2" y="1749" width="31.4" height="15.0" fill="rgb(238,161,13)" rx="2" ry="2" />
<text  x="58.16" y="1759.5" >[u..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1781" width="0.2" height="15.0" fill="rgb(216,69,27)" rx="2" ry="2" />
<text  x="57.98" y="1791.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.02%)</title><rect x="656.5" y="1813" width="0.2" height="15.0" fill="rgb(243,227,18)" rx="2" ry="2" />
<text  x="659.45" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="197" width="0.2" height="15.0" fill="rgb(232,100,11)" rx="2" ry="2" />
<text  x="1190.35" y="207.5" ></text>
</g>
<g >
<title>mmap_region (18 samples, 0.09%)</title><rect x="1100.5" y="1941" width="1.1" height="15.0" fill="rgb(238,205,23)" rx="2" ry="2" />
<text  x="1103.51" y="1951.5" ></text>
</g>
<g >
<title>[[vdso]] (7 samples, 0.03%)</title><rect x="119.3" y="2021" width="0.4" height="15.0" fill="rgb(229,126,26)" rx="2" ry="2" />
<text  x="122.30" y="2031.5" ></text>
</g>
<g >
<title>page_fault (19 samples, 0.09%)</title><rect x="678.0" y="1845" width="1.1" height="15.0" fill="rgb(239,4,47)" rx="2" ry="2" />
<text  x="681.03" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="201.4" y="1605" width="0.2" height="15.0" fill="rgb(214,153,45)" rx="2" ry="2" />
<text  x="204.43" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="131.6" y="1621" width="0.1" height="15.0" fill="rgb(250,88,33)" rx="2" ry="2" />
<text  x="134.63" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="693" width="0.3" height="15.0" fill="rgb(208,60,4)" rx="2" ry="2" />
<text  x="1189.52" y="703.5" ></text>
</g>
<g >
<title>[unknown] (441 samples, 2.20%)</title><rect x="55.2" y="1413" width="26.0" height="15.0" fill="rgb(225,130,54)" rx="2" ry="2" />
<text  x="58.22" y="1423.5" >[..</text>
</g>
<g >
<title>unmap_region (10 samples, 0.05%)</title><rect x="1100.7" y="1909" width="0.6" height="15.0" fill="rgb(249,171,29)" rx="2" ry="2" />
<text  x="1103.68" y="1919.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="617.7" y="1845" width="0.1" height="15.0" fill="rgb(242,89,6)" rx="2" ry="2" />
<text  x="620.72" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1445" width="0.2" height="15.0" fill="rgb(239,92,42)" rx="2" ry="2" />
<text  x="1190.29" y="1455.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="131.4" y="1637" width="0.2" height="15.0" fill="rgb(215,107,11)" rx="2" ry="2" />
<text  x="134.39" y="1647.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="484.8" y="1925" width="0.1" height="15.0" fill="rgb(234,21,42)" rx="2" ry="2" />
<text  x="487.77" y="1935.5" ></text>
</g>
<g >
<title>ptep_clear_flush (34 samples, 0.17%)</title><rect x="947.0" y="1925" width="2.0" height="15.0" fill="rgb(239,220,34)" rx="2" ry="2" />
<text  x="950.04" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (415 samples, 2.07%)</title><rect x="55.2" y="1349" width="24.5" height="15.0" fill="rgb(217,161,36)" rx="2" ry="2" />
<text  x="58.22" y="1359.5" >[..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (82 samples, 0.41%)</title><rect x="204.3" y="1669" width="4.8" height="15.0" fill="rgb(229,193,53)" rx="2" ry="2" />
<text  x="207.26" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1877" width="0.1" height="15.0" fill="rgb(221,218,48)" rx="2" ry="2" />
<text  x="161.98" y="1887.5" ></text>
</g>
<g >
<title>strlen@plt (3 samples, 0.01%)</title><rect x="1189.8" y="2053" width="0.2" height="15.0" fill="rgb(251,39,29)" rx="2" ry="2" />
<text  x="1192.82" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1269" width="0.3" height="15.0" fill="rgb(214,4,11)" rx="2" ry="2" />
<text  x="1189.52" y="1279.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (15 samples, 0.07%)</title><rect x="27.5" y="1941" width="0.9" height="15.0" fill="rgb(219,42,37)" rx="2" ry="2" />
<text  x="30.51" y="1951.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (26 samples, 0.13%)</title><rect x="1006.6" y="2053" width="1.6" height="15.0" fill="rgb(234,83,3)" rx="2" ry="2" />
<text  x="1009.65" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1989" width="0.2" height="15.0" fill="rgb(225,106,6)" rx="2" ry="2" />
<text  x="520.20" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="69" width="0.3" height="15.0" fill="rgb(254,105,25)" rx="2" ry="2" />
<text  x="1189.52" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1637" width="0.4" height="15.0" fill="rgb(249,6,23)" rx="2" ry="2" />
<text  x="1189.88" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1829" width="0.2" height="15.0" fill="rgb(254,181,51)" rx="2" ry="2" />
<text  x="57.98" y="1839.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (12 samples, 0.06%)</title><rect x="42.2" y="2037" width="0.8" height="15.0" fill="rgb(244,14,13)" rx="2" ry="2" />
<text  x="45.25" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.01%)</title><rect x="88.9" y="1877" width="0.2" height="15.0" fill="rgb(247,121,14)" rx="2" ry="2" />
<text  x="91.88" y="1887.5" ></text>
</g>
<g >
<title>free_unref_page_list (2 samples, 0.01%)</title><rect x="1100.9" y="1797" width="0.1" height="15.0" fill="rgb(233,222,44)" rx="2" ry="2" />
<text  x="1103.86" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="645" width="0.2" height="15.0" fill="rgb(229,209,13)" rx="2" ry="2" />
<text  x="1190.29" y="655.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.01%)</title><rect x="148.8" y="1637" width="0.2" height="15.0" fill="rgb(243,55,14)" rx="2" ry="2" />
<text  x="151.78" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1093" width="0.3" height="15.0" fill="rgb(247,90,43)" rx="2" ry="2" />
<text  x="1189.52" y="1103.5" ></text>
</g>
<g >
<title>nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::handle_value&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.01%)</title><rect x="121.7" y="1941" width="0.2" height="15.0" fill="rgb(224,201,28)" rx="2" ry="2" />
<text  x="124.72" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1365" width="0.3" height="15.0" fill="rgb(251,131,26)" rx="2" ry="2" />
<text  x="219.46" y="1375.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="91.7" y="1957" width="0.1" height="15.0" fill="rgb(234,226,33)" rx="2" ry="2" />
<text  x="94.71" y="1967.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.01%)</title><rect x="579.1" y="1877" width="0.2" height="15.0" fill="rgb(205,88,36)" rx="2" ry="2" />
<text  x="582.10" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (11 samples, 0.05%)</title><rect x="619.5" y="1877" width="0.7" height="15.0" fill="rgb(206,194,14)" rx="2" ry="2" />
<text  x="622.54" y="1887.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="119.8" y="2021" width="0.1" height="15.0" fill="rgb(227,214,19)" rx="2" ry="2" />
<text  x="122.78" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (88 samples, 0.44%)</title><rect x="152.5" y="1717" width="5.2" height="15.0" fill="rgb(229,54,45)" rx="2" ry="2" />
<text  x="155.50" y="1727.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="1957" width="0.4" height="15.0" fill="rgb(243,90,15)" rx="2" ry="2" />
<text  x="518.84" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (6 samples, 0.03%)</title><rect x="86.6" y="1749" width="0.4" height="15.0" fill="rgb(237,190,1)" rx="2" ry="2" />
<text  x="89.64" y="1759.5" ></text>
</g>
<g >
<title>GetHost (483 samples, 2.41%)</title><rect x="130.7" y="1973" width="28.5" height="15.0" fill="rgb(222,67,24)" rx="2" ry="2" />
<text  x="133.74" y="1983.5" >Ge..</text>
</g>
<g >
<title>fasttext::Vector::zero (13 samples, 0.06%)</title><rect x="331.5" y="1973" width="0.8" height="15.0" fill="rgb(211,77,48)" rx="2" ry="2" />
<text  x="334.49" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (8 samples, 0.04%)</title><rect x="1114.6" y="2037" width="0.5" height="15.0" fill="rgb(214,72,0)" rx="2" ry="2" />
<text  x="1117.60" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1813" width="0.5" height="15.0" fill="rgb(247,69,52)" rx="2" ry="2" />
<text  x="189.81" y="1823.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.04%)</title><rect x="134.9" y="1557" width="0.4" height="15.0" fill="rgb(234,136,25)" rx="2" ry="2" />
<text  x="137.87" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (81 samples, 0.40%)</title><rect x="141.6" y="1701" width="4.8" height="15.0" fill="rgb(211,128,2)" rx="2" ry="2" />
<text  x="144.65" y="1711.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2,950 samples, 14.74%)</title><rect x="579.3" y="1909" width="174.0" height="15.0" fill="rgb(248,149,23)" rx="2" ry="2" />
<text  x="582.34" y="1919.5" >onmt::Tokenizer::token..</text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (346 samples, 1.73%)</title><rect x="599.1" y="1877" width="20.4" height="15.0" fill="rgb(238,93,33)" rx="2" ry="2" />
<text  x="602.15" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (75 samples, 0.37%)</title><rect x="176.4" y="1717" width="4.5" height="15.0" fill="rgb(230,101,42)" rx="2" ry="2" />
<text  x="179.43" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1589" width="0.2" height="15.0" fill="rgb(206,89,32)" rx="2" ry="2" />
<text  x="1190.29" y="1599.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="191.8" y="1557" width="0.1" height="15.0" fill="rgb(242,40,26)" rx="2" ry="2" />
<text  x="194.76" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1797" width="0.8" height="15.0" fill="rgb(237,220,35)" rx="2" ry="2" />
<text  x="219.35" y="1807.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::Dictionary (31 samples, 0.15%)</title><rect x="872.1" y="2005" width="1.8" height="15.0" fill="rgb(210,158,32)" rx="2" ry="2" />
<text  x="875.11" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="437" width="0.3" height="15.0" fill="rgb(208,137,32)" rx="2" ry="2" />
<text  x="1189.52" y="447.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.02%)</title><rect x="810.6" y="2021" width="0.3" height="15.0" fill="rgb(205,109,45)" rx="2" ry="2" />
<text  x="813.62" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1669" width="0.3" height="15.0" fill="rgb(252,59,14)" rx="2" ry="2" />
<text  x="190.04" y="1679.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="148.5" y="1637" width="0.1" height="15.0" fill="rgb(240,80,53)" rx="2" ry="2" />
<text  x="151.49" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (85 samples, 0.42%)</title><rect x="131.1" y="1733" width="5.0" height="15.0" fill="rgb(209,137,53)" rx="2" ry="2" />
<text  x="134.10" y="1743.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.01%)</title><rect x="130.5" y="1861" width="0.2" height="15.0" fill="rgb(243,186,49)" rx="2" ry="2" />
<text  x="133.51" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="79.4" y="1333" width="0.2" height="15.0" fill="rgb(235,108,12)" rx="2" ry="2" />
<text  x="82.45" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="821" width="0.2" height="15.0" fill="rgb(208,67,1)" rx="2" ry="2" />
<text  x="1190.29" y="831.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="170.4" y="1573" width="0.2" height="15.0" fill="rgb(206,120,13)" rx="2" ry="2" />
<text  x="173.36" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="485" width="0.3" height="15.0" fill="rgb(244,71,46)" rx="2" ry="2" />
<text  x="1189.52" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (3 samples, 0.01%)</title><rect x="873.6" y="1941" width="0.2" height="15.0" fill="rgb(214,61,19)" rx="2" ry="2" />
<text  x="876.64" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (6 samples, 0.03%)</title><rect x="209.4" y="1765" width="0.4" height="15.0" fill="rgb(237,61,43)" rx="2" ry="2" />
<text  x="212.45" y="1775.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.01%)</title><rect x="693.8" y="1733" width="0.1" height="15.0" fill="rgb(248,91,46)" rx="2" ry="2" />
<text  x="696.83" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (490 samples, 2.45%)</title><rect x="55.2" y="1573" width="28.8" height="15.0" fill="rgb(239,67,7)" rx="2" ry="2" />
<text  x="58.16" y="1583.5" >[u..</text>
</g>
<g >
<title>vfs_read (4 samples, 0.02%)</title><rect x="1110.9" y="1957" width="0.3" height="15.0" fill="rgb(207,13,30)" rx="2" ry="2" />
<text  x="1113.94" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (10 samples, 0.05%)</title><rect x="131.2" y="1685" width="0.5" height="15.0" fill="rgb(223,157,2)" rx="2" ry="2" />
<text  x="134.15" y="1695.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::predict (5 samples, 0.02%)</title><rect x="571.4" y="1925" width="0.3" height="15.0" fill="rgb(253,68,11)" rx="2" ry="2" />
<text  x="574.44" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1477" width="0.4" height="15.0" fill="rgb(226,30,38)" rx="2" ry="2" />
<text  x="1189.88" y="1487.5" ></text>
</g>
<g >
<title>generic_exec_single (13 samples, 0.06%)</title><rect x="948.1" y="1813" width="0.8" height="15.0" fill="rgb(208,159,33)" rx="2" ry="2" />
<text  x="951.10" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1893" width="0.2" height="15.0" fill="rgb(254,95,0)" rx="2" ry="2" />
<text  x="1190.29" y="1903.5" ></text>
</g>
<g >
<title>__asan_memcpy (9 samples, 0.04%)</title><rect x="654.7" y="1877" width="0.5" height="15.0" fill="rgb(228,197,36)" rx="2" ry="2" />
<text  x="657.68" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.01%)</title><rect x="83.0" y="1509" width="0.2" height="15.0" fill="rgb(228,83,29)" rx="2" ry="2" />
<text  x="85.99" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (451 samples, 2.25%)</title><rect x="189.2" y="1909" width="26.6" height="15.0" fill="rgb(250,15,25)" rx="2" ry="2" />
<text  x="192.23" y="1919.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="187.1" y="1141" width="0.2" height="15.0" fill="rgb(247,109,41)" rx="2" ry="2" />
<text  x="190.10" y="1151.5" ></text>
</g>
<g >
<title>__lru_cache_add (2 samples, 0.01%)</title><rect x="693.8" y="1749" width="0.1" height="15.0" fill="rgb(211,214,53)" rx="2" ry="2" />
<text  x="696.83" y="1759.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="314.3" y="1941" width="0.1" height="15.0" fill="rgb(242,174,33)" rx="2" ry="2" />
<text  x="317.27" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="155.1" y="1669" width="0.2" height="15.0" fill="rgb(213,23,14)" rx="2" ry="2" />
<text  x="158.15" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (78 samples, 0.39%)</title><rect x="181.3" y="1749" width="4.6" height="15.0" fill="rgb(226,32,30)" rx="2" ry="2" />
<text  x="184.33" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.5" y="1589" width="0.3" height="15.0" fill="rgb(218,147,29)" rx="2" ry="2" />
<text  x="1189.46" y="1599.5" ></text>
</g>
<g >
<title>vfs_read (2 samples, 0.01%)</title><rect x="119.8" y="1957" width="0.1" height="15.0" fill="rgb(221,229,34)" rx="2" ry="2" />
<text  x="122.78" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="549" width="0.2" height="15.0" fill="rgb(228,106,33)" rx="2" ry="2" />
<text  x="1190.35" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="789" width="0.2" height="15.0" fill="rgb(239,30,31)" rx="2" ry="2" />
<text  x="1190.29" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (64 samples, 0.32%)</title><rect x="194.9" y="1621" width="3.8" height="15.0" fill="rgb(241,60,15)" rx="2" ry="2" />
<text  x="197.89" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1429" width="0.3" height="15.0" fill="rgb(230,18,39)" rx="2" ry="2" />
<text  x="1189.52" y="1439.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (83 samples, 0.41%)</title><rect x="48.4" y="2021" width="4.9" height="15.0" fill="rgb(241,21,14)" rx="2" ry="2" />
<text  x="51.38" y="2031.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.01%)</title><rect x="653.0" y="1781" width="0.2" height="15.0" fill="rgb(220,178,32)" rx="2" ry="2" />
<text  x="656.03" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="516.9" y="1973" width="0.1" height="15.0" fill="rgb(223,137,47)" rx="2" ry="2" />
<text  x="519.90" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (59 samples, 0.29%)</title><rect x="182.0" y="1685" width="3.5" height="15.0" fill="rgb(254,97,14)" rx="2" ry="2" />
<text  x="184.97" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="421" width="0.2" height="15.0" fill="rgb(244,161,1)" rx="2" ry="2" />
<text  x="1190.35" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.8" y="2021" width="0.5" height="15.0" fill="rgb(246,40,16)" rx="2" ry="2" />
<text  x="1189.82" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="158.3" y="1845" width="0.1" height="15.0" fill="rgb(254,83,47)" rx="2" ry="2" />
<text  x="161.27" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (544 samples, 2.72%)</title><rect x="55.2" y="1765" width="32.0" height="15.0" fill="rgb(253,99,35)" rx="2" ry="2" />
<text  x="58.16" y="1775.5" >[u..</text>
</g>
<g >
<title>[unknown] (331 samples, 1.65%)</title><rect x="55.2" y="277" width="19.5" height="15.0" fill="rgb(242,45,49)" rx="2" ry="2" />
<text  x="58.22" y="287.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (3 samples, 0.01%)</title><rect x="485.1" y="1925" width="0.1" height="15.0" fill="rgb(214,28,1)" rx="2" ry="2" />
<text  x="488.07" y="1935.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.02%)</title><rect x="54.1" y="1893" width="0.2" height="15.0" fill="rgb(237,147,31)" rx="2" ry="2" />
<text  x="57.10" y="1903.5" ></text>
</g>
<g >
<title>unmap_page_range (3 samples, 0.01%)</title><rect x="766.3" y="1893" width="0.2" height="15.0" fill="rgb(214,10,28)" rx="2" ry="2" />
<text  x="769.28" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (76 samples, 0.38%)</title><rect x="189.6" y="1621" width="4.5" height="15.0" fill="rgb(225,153,29)" rx="2" ry="2" />
<text  x="192.58" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="187.0" y="1717" width="0.3" height="15.0" fill="rgb(227,216,37)" rx="2" ry="2" />
<text  x="189.99" y="1727.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (2 samples, 0.01%)</title><rect x="85.0" y="1477" width="0.1" height="15.0" fill="rgb(215,68,50)" rx="2" ry="2" />
<text  x="87.99" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="501" width="0.2" height="15.0" fill="rgb(253,201,39)" rx="2" ry="2" />
<text  x="1190.35" y="511.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::at (3 samples, 0.01%)</title><rect x="120.5" y="1957" width="0.2" height="15.0" fill="rgb(240,79,21)" rx="2" ry="2" />
<text  x="123.54" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (380 samples, 1.90%)</title><rect x="55.2" y="1205" width="22.4" height="15.0" fill="rgb(220,87,46)" rx="2" ry="2" />
<text  x="58.22" y="1215.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1333" width="0.3" height="15.0" fill="rgb(219,137,22)" rx="2" ry="2" />
<text  x="190.04" y="1343.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.01%)</title><rect x="874.4" y="2021" width="0.1" height="15.0" fill="rgb(231,213,22)" rx="2" ry="2" />
<text  x="877.35" y="2031.5" ></text>
</g>
<g >
<title>page_fault (9 samples, 0.04%)</title><rect x="762.1" y="2021" width="0.5" height="15.0" fill="rgb(217,141,3)" rx="2" ry="2" />
<text  x="765.10" y="2031.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.02%)</title><rect x="130.4" y="1957" width="0.3" height="15.0" fill="rgb(210,103,24)" rx="2" ry="2" />
<text  x="133.45" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (11 samples, 0.05%)</title><rect x="215.0" y="1877" width="0.7" height="15.0" fill="rgb(241,27,8)" rx="2" ry="2" />
<text  x="218.05" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1637" width="0.1" height="15.0" fill="rgb(222,33,4)" rx="2" ry="2" />
<text  x="189.87" y="1647.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="871.6" y="1973" width="0.2" height="15.0" fill="rgb(254,97,26)" rx="2" ry="2" />
<text  x="874.58" y="1983.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (14 samples, 0.07%)</title><rect x="519.0" y="2037" width="0.8" height="15.0" fill="rgb(219,28,17)" rx="2" ry="2" />
<text  x="522.02" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.4" y="69" width="0.1" height="15.0" fill="rgb(248,35,26)" rx="2" ry="2" />
<text  x="1190.41" y="79.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::setConstant (36 samples, 0.18%)</title><rect x="498.6" y="1941" width="2.1" height="15.0" fill="rgb(236,149,36)" rx="2" ry="2" />
<text  x="501.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.05%)</title><rect x="216.4" y="1781" width="0.7" height="15.0" fill="rgb(254,221,10)" rx="2" ry="2" />
<text  x="219.40" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1701" width="0.3" height="15.0" fill="rgb(205,193,33)" rx="2" ry="2" />
<text  x="219.46" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1189" width="0.3" height="15.0" fill="rgb(210,155,17)" rx="2" ry="2" />
<text  x="1189.52" y="1199.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="82.3" y="1429" width="0.1" height="15.0" fill="rgb(208,150,27)" rx="2" ry="2" />
<text  x="85.28" y="1439.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (26 samples, 0.13%)</title><rect x="1155.5" y="2037" width="1.5" height="15.0" fill="rgb(237,223,6)" rx="2" ry="2" />
<text  x="1158.51" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="517.1" y="1989" width="0.1" height="15.0" fill="rgb(253,58,1)" rx="2" ry="2" />
<text  x="520.08" y="1999.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (3 samples, 0.01%)</title><rect x="209.6" y="1717" width="0.2" height="15.0" fill="rgb(241,101,39)" rx="2" ry="2" />
<text  x="212.62" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="885" width="0.2" height="15.0" fill="rgb(240,117,8)" rx="2" ry="2" />
<text  x="1190.29" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1701" width="0.3" height="15.0" fill="rgb(224,154,29)" rx="2" ry="2" />
<text  x="219.76" y="1711.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (102 samples, 0.51%)</title><rect x="991.3" y="2053" width="6.0" height="15.0" fill="rgb(226,13,51)" rx="2" ry="2" />
<text  x="994.32" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="613" width="0.4" height="15.0" fill="rgb(241,37,48)" rx="2" ry="2" />
<text  x="1189.88" y="623.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1717" width="0.2" height="15.0" fill="rgb(216,182,54)" rx="2" ry="2" />
<text  x="57.98" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (452 samples, 2.26%)</title><rect x="159.5" y="1877" width="26.6" height="15.0" fill="rgb(218,2,8)" rx="2" ry="2" />
<text  x="162.45" y="1887.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="405" width="0.2" height="15.0" fill="rgb(222,2,29)" rx="2" ry="2" />
<text  x="1190.35" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (5 samples, 0.02%)</title><rect x="189.3" y="1669" width="0.3" height="15.0" fill="rgb(232,51,54)" rx="2" ry="2" />
<text  x="192.28" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1557" width="0.1" height="15.0" fill="rgb(254,16,3)" rx="2" ry="2" />
<text  x="189.87" y="1567.5" ></text>
</g>
<g >
<title>__lru_cache_add (2 samples, 0.01%)</title><rect x="652.9" y="1765" width="0.1" height="15.0" fill="rgb(254,149,1)" rx="2" ry="2" />
<text  x="655.85" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1365" width="0.4" height="15.0" fill="rgb(249,162,2)" rx="2" ry="2" />
<text  x="1189.88" y="1375.5" ></text>
</g>
<g >
<title>__vfs_read (2 samples, 0.01%)</title><rect x="119.8" y="1941" width="0.1" height="15.0" fill="rgb(225,81,4)" rx="2" ry="2" />
<text  x="122.78" y="1951.5" ></text>
</g>
<g >
<title>std::locale::locale (9 samples, 0.04%)</title><rect x="336.0" y="1989" width="0.5" height="15.0" fill="rgb(226,69,53)" rx="2" ry="2" />
<text  x="338.97" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (9 samples, 0.04%)</title><rect x="186.1" y="1829" width="0.5" height="15.0" fill="rgb(217,48,11)" rx="2" ry="2" />
<text  x="189.10" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1573" width="0.1" height="15.0" fill="rgb(236,13,4)" rx="2" ry="2" />
<text  x="57.98" y="1583.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (33 samples, 0.16%)</title><rect x="947.1" y="1909" width="1.9" height="15.0" fill="rgb(215,84,50)" rx="2" ry="2" />
<text  x="950.10" y="1919.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="874.4" y="1989" width="0.1" height="15.0" fill="rgb(239,23,19)" rx="2" ry="2" />
<text  x="877.35" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="186.9" y="1573" width="0.1" height="15.0" fill="rgb(252,34,46)" rx="2" ry="2" />
<text  x="189.87" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="933" width="20.4" height="15.0" fill="rgb(254,162,1)" rx="2" ry="2" />
<text  x="58.22" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1973" width="0.2" height="15.0" fill="rgb(250,192,23)" rx="2" ry="2" />
<text  x="1190.29" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="158.3" y="1813" width="0.1" height="15.0" fill="rgb(223,85,29)" rx="2" ry="2" />
<text  x="161.27" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (338 samples, 1.69%)</title><rect x="55.2" y="581" width="19.9" height="15.0" fill="rgb(230,39,15)" rx="2" ry="2" />
<text  x="58.22" y="591.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (134 samples, 0.67%)</title><rect x="500.7" y="1925" width="7.9" height="15.0" fill="rgb(233,6,54)" rx="2" ry="2" />
<text  x="503.69" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="725" width="0.3" height="15.0" fill="rgb(234,202,24)" rx="2" ry="2" />
<text  x="1189.52" y="735.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.01%)</title><rect x="579.1" y="1861" width="0.2" height="15.0" fill="rgb(227,30,10)" rx="2" ry="2" />
<text  x="582.10" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (85 samples, 0.42%)</title><rect x="189.3" y="1733" width="5.0" height="15.0" fill="rgb(232,90,8)" rx="2" ry="2" />
<text  x="192.28" y="1743.5" ></text>
</g>
<g >
<title>wp_page_copy (75 samples, 0.37%)</title><rect x="944.6" y="1941" width="4.4" height="15.0" fill="rgb(254,21,17)" rx="2" ry="2" />
<text  x="947.63" y="1951.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="682.7" y="1813" width="0.1" height="15.0" fill="rgb(223,180,2)" rx="2" ry="2" />
<text  x="685.69" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (263 samples, 1.31%)</title><rect x="131.1" y="1781" width="15.5" height="15.0" fill="rgb(224,125,35)" rx="2" ry="2" />
<text  x="134.10" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (3 samples, 0.01%)</title><rect x="151.7" y="1685" width="0.2" height="15.0" fill="rgb(253,121,52)" rx="2" ry="2" />
<text  x="154.73" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.01%)</title><rect x="215.1" y="1829" width="0.2" height="15.0" fill="rgb(253,110,48)" rx="2" ry="2" />
<text  x="218.11" y="1839.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="170.0" y="1573" width="0.4" height="15.0" fill="rgb(227,141,22)" rx="2" ry="2" />
<text  x="173.01" y="1583.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="874.4" y="1973" width="0.1" height="15.0" fill="rgb(219,145,7)" rx="2" ry="2" />
<text  x="877.35" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="517" width="0.2" height="15.0" fill="rgb(244,26,18)" rx="2" ry="2" />
<text  x="1190.35" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="209.7" y="1685" width="0.1" height="15.0" fill="rgb(240,88,8)" rx="2" ry="2" />
<text  x="212.68" y="1695.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="173.6" y="1589" width="0.1" height="15.0" fill="rgb(244,127,11)" rx="2" ry="2" />
<text  x="176.60" y="1599.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (6 samples, 0.03%)</title><rect x="517.7" y="2005" width="0.4" height="15.0" fill="rgb(236,72,35)" rx="2" ry="2" />
<text  x="520.73" y="2015.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.01%)</title><rect x="652.7" y="1781" width="0.2" height="15.0" fill="rgb(224,195,20)" rx="2" ry="2" />
<text  x="655.68" y="1791.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (31 samples, 0.15%)</title><rect x="810.9" y="2037" width="1.8" height="15.0" fill="rgb(217,209,51)" rx="2" ry="2" />
<text  x="813.91" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (77 samples, 0.38%)</title><rect x="209.9" y="1717" width="4.6" height="15.0" fill="rgb(241,154,25)" rx="2" ry="2" />
<text  x="212.92" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="158.9" y="1893" width="0.2" height="15.0" fill="rgb(222,217,47)" rx="2" ry="2" />
<text  x="161.92" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (138 samples, 0.69%)</title><rect x="121.7" y="1957" width="8.2" height="15.0" fill="rgb(226,119,29)" rx="2" ry="2" />
<text  x="124.72" y="1967.5" ></text>
</g>
<g >
<title>generic_exec_single (2 samples, 0.01%)</title><rect x="84.1" y="1349" width="0.1" height="15.0" fill="rgb(246,25,38)" rx="2" ry="2" />
<text  x="87.11" y="1359.5" ></text>
</g>
<g >
<title>Eigen::internal::product_evaluator&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, 0&gt;, 8, Eigen::DenseShape, Eigen::DenseShape, float, float&gt;::product_evaluator (170 samples, 0.85%)</title><rect x="498.6" y="1957" width="10.0" height="15.0" fill="rgb(227,121,43)" rx="2" ry="2" />
<text  x="501.57" y="1967.5" ></text>
</g>
<g >
<title>unmap_region (9 samples, 0.04%)</title><rect x="765.3" y="1893" width="0.6" height="15.0" fill="rgb(228,147,53)" rx="2" ry="2" />
<text  x="768.34" y="1903.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (11 samples, 0.05%)</title><rect x="1153.3" y="2037" width="0.6" height="15.0" fill="rgb(209,220,38)" rx="2" ry="2" />
<text  x="1156.27" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="325" width="0.4" height="15.0" fill="rgb(207,110,6)" rx="2" ry="2" />
<text  x="1189.88" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.08%)</title><rect x="29.6" y="1989" width="1.0" height="15.0" fill="rgb(232,101,33)" rx="2" ry="2" />
<text  x="32.63" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (342 samples, 1.71%)</title><rect x="189.3" y="1797" width="20.1" height="15.0" fill="rgb(205,222,16)" rx="2" ry="2" />
<text  x="192.28" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (7 samples, 0.03%)</title><rect x="159.5" y="1685" width="0.4" height="15.0" fill="rgb(241,50,12)" rx="2" ry="2" />
<text  x="162.45" y="1695.5" ></text>
</g>
<g >
<title>__asan_memcpy (24 samples, 0.12%)</title><rect x="690.9" y="1845" width="1.5" height="15.0" fill="rgb(224,148,9)" rx="2" ry="2" />
<text  x="693.94" y="1855.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="91.7" y="1941" width="0.1" height="15.0" fill="rgb(243,173,46)" rx="2" ry="2" />
<text  x="94.71" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="453" width="19.7" height="15.0" fill="rgb(214,114,42)" rx="2" ry="2" />
<text  x="58.22" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1557" width="0.3" height="15.0" fill="rgb(234,24,17)" rx="2" ry="2" />
<text  x="219.46" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1829" width="0.4" height="15.0" fill="rgb(233,75,28)" rx="2" ry="2" />
<text  x="1189.88" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="917" width="20.4" height="15.0" fill="rgb(249,81,3)" rx="2" ry="2" />
<text  x="58.22" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (31 samples, 0.15%)</title><rect x="1122.1" y="2053" width="1.8" height="15.0" fill="rgb(219,123,33)" rx="2" ry="2" />
<text  x="1125.08" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="949" width="0.4" height="15.0" fill="rgb(223,95,22)" rx="2" ry="2" />
<text  x="1189.88" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (78 samples, 0.39%)</title><rect x="136.3" y="1637" width="4.6" height="15.0" fill="rgb(243,21,34)" rx="2" ry="2" />
<text  x="139.28" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (883 samples, 4.41%)</title><rect x="819.7" y="2021" width="52.1" height="15.0" fill="rgb(245,48,7)" rx="2" ry="2" />
<text  x="822.70" y="2031.5" >[unkn..</text>
</g>
<g >
<title>ext4_file_read_iter (2 samples, 0.01%)</title><rect x="119.8" y="1909" width="0.1" height="15.0" fill="rgb(248,141,4)" rx="2" ry="2" />
<text  x="122.78" y="1919.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="198.7" y="1621" width="0.1" height="15.0" fill="rgb(246,223,18)" rx="2" ry="2" />
<text  x="201.72" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (72 samples, 0.36%)</title><rect x="131.7" y="1669" width="4.3" height="15.0" fill="rgb(242,146,16)" rx="2" ry="2" />
<text  x="134.74" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.01%)</title><rect x="158.0" y="1781" width="0.2" height="15.0" fill="rgb(247,110,7)" rx="2" ry="2" />
<text  x="160.98" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (17 samples, 0.08%)</title><rect x="1176.3" y="2037" width="1.0" height="15.0" fill="rgb(208,53,32)" rx="2" ry="2" />
<text  x="1179.32" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1525" width="0.3" height="15.0" fill="rgb(205,47,28)" rx="2" ry="2" />
<text  x="219.82" y="1535.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (31 samples, 0.15%)</title><rect x="872.1" y="1989" width="1.8" height="15.0" fill="rgb(214,197,23)" rx="2" ry="2" />
<text  x="875.11" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (3 samples, 0.01%)</title><rect x="515.9" y="1909" width="0.2" height="15.0" fill="rgb(254,175,4)" rx="2" ry="2" />
<text  x="518.90" y="1919.5" ></text>
</g>
<g >
<title>new_sync_read (4 samples, 0.02%)</title><rect x="1110.9" y="1925" width="0.3" height="15.0" fill="rgb(245,129,22)" rx="2" ry="2" />
<text  x="1113.94" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Refill (2 samples, 0.01%)</title><rect x="1027.4" y="2053" width="0.1" height="15.0" fill="rgb(250,198,53)" rx="2" ry="2" />
<text  x="1030.40" y="2063.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="84.1" y="1493" width="0.1" height="15.0" fill="rgb(220,114,8)" rx="2" ry="2" />
<text  x="87.11" y="1503.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="734.9" y="1861" width="0.1" height="15.0" fill="rgb(237,127,29)" rx="2" ry="2" />
<text  x="737.92" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (79 samples, 0.39%)</title><rect x="194.3" y="1669" width="4.7" height="15.0" fill="rgb(231,71,0)" rx="2" ry="2" />
<text  x="197.30" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1509" width="0.3" height="15.0" fill="rgb(239,58,30)" rx="2" ry="2" />
<text  x="1189.52" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (461 samples, 2.30%)</title><rect x="131.1" y="1877" width="27.2" height="15.0" fill="rgb(238,174,45)" rx="2" ry="2" />
<text  x="134.10" y="1887.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (12 samples, 0.06%)</title><rect x="767.6" y="2005" width="0.7" height="15.0" fill="rgb(231,114,16)" rx="2" ry="2" />
<text  x="770.64" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1477" width="0.1" height="15.0" fill="rgb(250,77,50)" rx="2" ry="2" />
<text  x="161.98" y="1487.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (86 samples, 0.43%)</title><rect x="574.3" y="1909" width="5.0" height="15.0" fill="rgb(239,146,23)" rx="2" ry="2" />
<text  x="577.27" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="149" width="0.3" height="15.0" fill="rgb(220,18,53)" rx="2" ry="2" />
<text  x="1189.52" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1109" width="0.3" height="15.0" fill="rgb(209,29,50)" rx="2" ry="2" />
<text  x="1189.52" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (13 samples, 0.06%)</title><rect x="1023.9" y="2053" width="0.8" height="15.0" fill="rgb(239,34,27)" rx="2" ry="2" />
<text  x="1026.92" y="2063.5" ></text>
</g>
<g >
<title>__asan_memmove (2 samples, 0.01%)</title><rect x="486.7" y="1925" width="0.1" height="15.0" fill="rgb(207,122,0)" rx="2" ry="2" />
<text  x="489.66" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.2" y="1829" width="0.2" height="15.0" fill="rgb(247,166,22)" rx="2" ry="2" />
<text  x="520.20" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (66 samples, 0.33%)</title><rect x="199.5" y="1637" width="3.9" height="15.0" fill="rgb(238,85,39)" rx="2" ry="2" />
<text  x="202.54" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1285" width="0.1" height="15.0" fill="rgb(252,76,41)" rx="2" ry="2" />
<text  x="57.98" y="1295.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="91.7" y="1909" width="0.1" height="15.0" fill="rgb(221,20,27)" rx="2" ry="2" />
<text  x="94.71" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1269" width="0.2" height="15.0" fill="rgb(249,32,6)" rx="2" ry="2" />
<text  x="1190.29" y="1279.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="496.0" y="1957" width="0.1" height="15.0" fill="rgb(245,44,36)" rx="2" ry="2" />
<text  x="499.03" y="1967.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="187.6" y="1973" width="0.1" height="15.0" fill="rgb(214,102,33)" rx="2" ry="2" />
<text  x="190.57" y="1983.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (3,909 samples, 19.53%)</title><rect x="524.4" y="2021" width="230.5" height="15.0" fill="rgb(223,154,30)" rx="2" ry="2" />
<text  x="527.45" y="2031.5" >std::__future_base::_State_bas..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (82 samples, 0.41%)</title><rect x="209.8" y="1797" width="4.8" height="15.0" fill="rgb(215,176,29)" rx="2" ry="2" />
<text  x="212.80" y="1807.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.01%)</title><rect x="335.8" y="1989" width="0.2" height="15.0" fill="rgb(209,16,33)" rx="2" ry="2" />
<text  x="338.85" y="1999.5" ></text>
</g>
<g >
<title>__interceptor_strlen (30 samples, 0.15%)</title><rect x="1170.3" y="2037" width="1.8" height="15.0" fill="rgb(246,188,43)" rx="2" ry="2" />
<text  x="1173.31" y="2047.5" ></text>
</g>
<g >
<title>boost::optional_detail::optional_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::assign (2 samples, 0.01%)</title><rect x="518.0" y="1941" width="0.1" height="15.0" fill="rgb(219,78,36)" rx="2" ry="2" />
<text  x="520.96" y="1951.5" ></text>
</g>
<g >
<title>get_futex_key (4 samples, 0.02%)</title><rect x="29.6" y="1909" width="0.3" height="15.0" fill="rgb(230,176,44)" rx="2" ry="2" />
<text  x="32.63" y="1919.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="79.7" y="1349" width="0.2" height="15.0" fill="rgb(215,14,42)" rx="2" ry="2" />
<text  x="82.69" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1187.0" y="69" width="0.3" height="15.0" fill="rgb(228,30,8)" rx="2" ry="2" />
<text  x="1189.99" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1253" width="0.4" height="15.0" fill="rgb(231,185,26)" rx="2" ry="2" />
<text  x="1189.88" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="597" width="0.3" height="15.0" fill="rgb(209,155,29)" rx="2" ry="2" />
<text  x="1189.52" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (80 samples, 0.40%)</title><rect x="181.3" y="1765" width="4.7" height="15.0" fill="rgb(212,67,44)" rx="2" ry="2" />
<text  x="184.27" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1317" width="0.1" height="15.0" fill="rgb(236,98,17)" rx="2" ry="2" />
<text  x="57.98" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="389" width="0.4" height="15.0" fill="rgb(252,142,41)" rx="2" ry="2" />
<text  x="1189.88" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (451 samples, 2.25%)</title><rect x="159.5" y="1845" width="26.5" height="15.0" fill="rgb(207,17,13)" rx="2" ry="2" />
<text  x="162.45" y="1855.5" >s..</text>
</g>
<g >
<title>operator new (6 samples, 0.03%)</title><rect x="156.2" y="1669" width="0.3" height="15.0" fill="rgb(222,208,53)" rx="2" ry="2" />
<text  x="159.15" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="84.5" y="1589" width="0.1" height="15.0" fill="rgb(253,154,8)" rx="2" ry="2" />
<text  x="87.46" y="1599.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="145.2" y="1605" width="0.3" height="15.0" fill="rgb(217,49,14)" rx="2" ry="2" />
<text  x="148.24" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (533 samples, 2.66%)</title><rect x="55.2" y="1733" width="31.4" height="15.0" fill="rgb(252,197,26)" rx="2" ry="2" />
<text  x="58.16" y="1743.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1253" width="0.2" height="15.0" fill="rgb(253,204,40)" rx="2" ry="2" />
<text  x="1190.29" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1413" width="0.3" height="15.0" fill="rgb(230,114,8)" rx="2" ry="2" />
<text  x="219.82" y="1423.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (26 samples, 0.13%)</title><rect x="764.8" y="2037" width="1.5" height="15.0" fill="rgb(231,86,15)" rx="2" ry="2" />
<text  x="767.75" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (8 samples, 0.04%)</title><rect x="71.0" y="37" width="0.4" height="15.0" fill="rgb(210,20,38)" rx="2" ry="2" />
<text  x="73.96" y="47.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (4 samples, 0.02%)</title><rect x="189.3" y="1653" width="0.3" height="15.0" fill="rgb(231,40,28)" rx="2" ry="2" />
<text  x="192.34" y="1663.5" ></text>
</g>
<g >
<title>tgnews (20,015 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(230,30,23)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (5 samples, 0.02%)</title><rect x="946.5" y="1909" width="0.2" height="15.0" fill="rgb(251,7,33)" rx="2" ry="2" />
<text  x="949.45" y="1919.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="190.8" y="1573" width="0.1" height="15.0" fill="rgb(223,208,46)" rx="2" ry="2" />
<text  x="193.76" y="1583.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.01%)</title><rect x="730.2" y="1813" width="0.2" height="15.0" fill="rgb(239,187,10)" rx="2" ry="2" />
<text  x="733.20" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="186.4" y="1797" width="0.1" height="15.0" fill="rgb(252,100,30)" rx="2" ry="2" />
<text  x="189.40" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (6 samples, 0.03%)</title><rect x="597.8" y="1877" width="0.3" height="15.0" fill="rgb(249,39,38)" rx="2" ry="2" />
<text  x="600.79" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.05%)</title><rect x="216.4" y="1765" width="0.7" height="15.0" fill="rgb(212,30,2)" rx="2" ry="2" />
<text  x="219.40" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (474 samples, 2.37%)</title><rect x="131.0" y="1941" width="27.9" height="15.0" fill="rgb(246,196,13)" rx="2" ry="2" />
<text  x="133.98" y="1951.5" >s..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="94.4" y="2021" width="0.3" height="15.0" fill="rgb(214,5,18)" rx="2" ry="2" />
<text  x="97.42" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="405" width="0.4" height="15.0" fill="rgb(209,147,23)" rx="2" ry="2" />
<text  x="1189.88" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10 samples, 0.05%)</title><rect x="818.6" y="1973" width="0.6" height="15.0" fill="rgb(248,11,11)" rx="2" ry="2" />
<text  x="821.58" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (70 samples, 0.35%)</title><rect x="199.4" y="1669" width="4.2" height="15.0" fill="rgb(250,35,6)" rx="2" ry="2" />
<text  x="202.42" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="853" width="0.2" height="15.0" fill="rgb(246,99,34)" rx="2" ry="2" />
<text  x="1190.29" y="863.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.73%)</title><rect x="55.2" y="997" width="20.5" height="15.0" fill="rgb(238,12,14)" rx="2" ry="2" />
<text  x="58.22" y="1007.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="85.0" y="1605" width="0.1" height="15.0" fill="rgb(211,16,53)" rx="2" ry="2" />
<text  x="87.99" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1845" width="0.5" height="15.0" fill="rgb(221,102,46)" rx="2" ry="2" />
<text  x="1189.34" y="1855.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="84.1" y="1477" width="0.1" height="15.0" fill="rgb(231,130,24)" rx="2" ry="2" />
<text  x="87.11" y="1487.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="81.2" y="1413" width="0.1" height="15.0" fill="rgb(241,177,20)" rx="2" ry="2" />
<text  x="84.22" y="1423.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="134.4" y="1557" width="0.1" height="15.0" fill="rgb(245,24,8)" rx="2" ry="2" />
<text  x="137.40" y="1567.5" ></text>
</g>
<g >
<title>__asan::asan_delete (3 samples, 0.01%)</title><rect x="1161.8" y="2037" width="0.1" height="15.0" fill="rgb(247,64,52)" rx="2" ry="2" />
<text  x="1164.76" y="2047.5" ></text>
</g>
<g >
<title>do_wp_page (14 samples, 0.07%)</title><rect x="54.1" y="1941" width="0.8" height="15.0" fill="rgb(212,54,43)" rx="2" ry="2" />
<text  x="57.10" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="565" width="0.3" height="15.0" fill="rgb(249,63,47)" rx="2" ry="2" />
<text  x="1189.52" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="1027.3" y="2021" width="0.1" height="15.0" fill="rgb(237,62,27)" rx="2" ry="2" />
<text  x="1030.28" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (26 samples, 0.13%)</title><rect x="679.1" y="1861" width="1.6" height="15.0" fill="rgb(223,141,26)" rx="2" ry="2" />
<text  x="682.15" y="1871.5" ></text>
</g>
<g >
<title>ima_file_mmap (2 samples, 0.01%)</title><rect x="766.0" y="1941" width="0.2" height="15.0" fill="rgb(249,133,19)" rx="2" ry="2" />
<text  x="769.05" y="1951.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (12 samples, 0.06%)</title><rect x="946.3" y="1925" width="0.7" height="15.0" fill="rgb(224,88,37)" rx="2" ry="2" />
<text  x="949.34" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (404 samples, 2.02%)</title><rect x="55.2" y="1317" width="23.8" height="15.0" fill="rgb(210,121,48)" rx="2" ry="2" />
<text  x="58.22" y="1327.5" >[..</text>
</g>
<g >
<title>fasttext::FastText::predict (2 samples, 0.01%)</title><rect x="571.3" y="1925" width="0.1" height="15.0" fill="rgb(230,166,43)" rx="2" ry="2" />
<text  x="574.32" y="1935.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="143.8" y="1605" width="0.1" height="15.0" fill="rgb(243,160,51)" rx="2" ry="2" />
<text  x="146.77" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1637" width="0.2" height="15.0" fill="rgb(231,51,23)" rx="2" ry="2" />
<text  x="57.98" y="1647.5" ></text>
</g>
<g >
<title>generic_exec_single (5 samples, 0.02%)</title><rect x="54.6" y="1797" width="0.3" height="15.0" fill="rgb(227,144,37)" rx="2" ry="2" />
<text  x="57.63" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.02%)</title><rect x="162.3" y="1541" width="0.3" height="15.0" fill="rgb(218,121,5)" rx="2" ry="2" />
<text  x="165.34" y="1551.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="2005" width="0.4" height="15.0" fill="rgb(225,193,51)" rx="2" ry="2" />
<text  x="518.84" y="2015.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="214.0" y="1669" width="0.2" height="15.0" fill="rgb(224,179,39)" rx="2" ry="2" />
<text  x="217.05" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="812.8" y="2021" width="0.2" height="15.0" fill="rgb(208,56,6)" rx="2" ry="2" />
<text  x="815.80" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1285" width="0.2" height="15.0" fill="rgb(209,45,33)" rx="2" ry="2" />
<text  x="1190.29" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1349" width="0.3" height="15.0" fill="rgb(236,61,54)" rx="2" ry="2" />
<text  x="219.82" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1029" width="0.4" height="15.0" fill="rgb(205,41,50)" rx="2" ry="2" />
<text  x="1189.88" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (467 samples, 2.33%)</title><rect x="55.2" y="1509" width="27.5" height="15.0" fill="rgb(229,212,24)" rx="2" ry="2" />
<text  x="58.16" y="1519.5" >[..</text>
</g>
<g >
<title>__vma_adjust (2 samples, 0.01%)</title><rect x="1101.4" y="1909" width="0.2" height="15.0" fill="rgb(225,6,46)" rx="2" ry="2" />
<text  x="1104.45" y="1919.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.01%)</title><rect x="652.7" y="1765" width="0.2" height="15.0" fill="rgb(249,43,0)" rx="2" ry="2" />
<text  x="655.68" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.2" y="1877" width="0.2" height="15.0" fill="rgb(233,169,50)" rx="2" ry="2" />
<text  x="520.20" y="1887.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (7 samples, 0.03%)</title><rect x="176.0" y="1621" width="0.4" height="15.0" fill="rgb(240,39,42)" rx="2" ry="2" />
<text  x="179.02" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="533" width="0.3" height="15.0" fill="rgb(216,1,54)" rx="2" ry="2" />
<text  x="1189.52" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (85 samples, 0.42%)</title><rect x="141.6" y="1733" width="5.0" height="15.0" fill="rgb(236,75,10)" rx="2" ry="2" />
<text  x="144.59" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (4 samples, 0.02%)</title><rect x="158.9" y="1957" width="0.3" height="15.0" fill="rgb(217,81,5)" rx="2" ry="2" />
<text  x="161.92" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="261" width="0.4" height="15.0" fill="rgb(240,153,20)" rx="2" ry="2" />
<text  x="1189.88" y="271.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (5 samples, 0.02%)</title><rect x="766.6" y="2037" width="0.3" height="15.0" fill="rgb(246,46,0)" rx="2" ry="2" />
<text  x="769.58" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.0" y="1685" width="0.1" height="15.0" fill="rgb(230,45,10)" rx="2" ry="2" />
<text  x="161.98" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (2 samples, 0.01%)</title><rect x="186.5" y="1797" width="0.1" height="15.0" fill="rgb(228,173,52)" rx="2" ry="2" />
<text  x="189.51" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13 samples, 0.06%)</title><rect x="216.3" y="1893" width="0.8" height="15.0" fill="rgb(235,211,29)" rx="2" ry="2" />
<text  x="219.29" y="1903.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.01%)</title><rect x="54.7" y="1749" width="0.2" height="15.0" fill="rgb(246,40,50)" rx="2" ry="2" />
<text  x="57.75" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="485" width="0.2" height="15.0" fill="rgb(243,201,6)" rx="2" ry="2" />
<text  x="1190.35" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1877" width="0.2" height="15.0" fill="rgb(242,216,8)" rx="2" ry="2" />
<text  x="1190.29" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (4 samples, 0.02%)</title><rect x="98.8" y="2021" width="0.3" height="15.0" fill="rgb(220,16,17)" rx="2" ry="2" />
<text  x="101.85" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (197 samples, 0.98%)</title><rect x="682.8" y="1861" width="11.6" height="15.0" fill="rgb(215,52,28)" rx="2" ry="2" />
<text  x="685.80" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1541" width="0.2" height="15.0" fill="rgb(251,167,3)" rx="2" ry="2" />
<text  x="1190.29" y="1551.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (31 samples, 0.15%)</title><rect x="997.3" y="2053" width="1.9" height="15.0" fill="rgb(247,140,11)" rx="2" ry="2" />
<text  x="1000.33" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1493" width="0.3" height="15.0" fill="rgb(206,210,4)" rx="2" ry="2" />
<text  x="219.82" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="501" width="0.4" height="15.0" fill="rgb(239,110,3)" rx="2" ry="2" />
<text  x="1189.88" y="511.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="192.3" y="1557" width="0.1" height="15.0" fill="rgb(247,145,38)" rx="2" ry="2" />
<text  x="195.29" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1621" width="0.3" height="15.0" fill="rgb(209,124,27)" rx="2" ry="2" />
<text  x="219.76" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (74 samples, 0.37%)</title><rect x="1157.4" y="2037" width="4.4" height="15.0" fill="rgb(222,226,46)" rx="2" ry="2" />
<text  x="1160.40" y="2047.5" ></text>
</g>
<g >
<title>do_syscall_64 (25 samples, 0.12%)</title><rect x="764.8" y="2005" width="1.5" height="15.0" fill="rgb(248,188,6)" rx="2" ry="2" />
<text  x="767.81" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1717" width="0.3" height="15.0" fill="rgb(205,2,31)" rx="2" ry="2" />
<text  x="219.46" y="1727.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (14 samples, 0.07%)</title><rect x="723.8" y="1877" width="0.8" height="15.0" fill="rgb(238,25,9)" rx="2" ry="2" />
<text  x="726.78" y="1887.5" ></text>
</g>
<g >
<title>__madvise (10 samples, 0.05%)</title><rect x="521.1" y="2037" width="0.6" height="15.0" fill="rgb(214,17,12)" rx="2" ry="2" />
<text  x="524.09" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (19 samples, 0.09%)</title><rect x="763.0" y="2037" width="1.2" height="15.0" fill="rgb(210,218,24)" rx="2" ry="2" />
<text  x="766.04" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.01%)</title><rect x="579.1" y="1845" width="0.2" height="15.0" fill="rgb(205,20,14)" rx="2" ry="2" />
<text  x="582.10" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1493" width="0.1" height="15.0" fill="rgb(234,59,28)" rx="2" ry="2" />
<text  x="57.98" y="1503.5" ></text>
</g>
<g >
<title>find_vma (2 samples, 0.01%)</title><rect x="765.2" y="1893" width="0.1" height="15.0" fill="rgb(236,130,35)" rx="2" ry="2" />
<text  x="768.16" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="186.9" y="1525" width="0.1" height="15.0" fill="rgb(236,52,31)" rx="2" ry="2" />
<text  x="189.87" y="1535.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="331.8" y="1957" width="0.1" height="15.0" fill="rgb(248,106,54)" rx="2" ry="2" />
<text  x="334.78" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.3" y="1781" width="0.5" height="15.0" fill="rgb(229,223,3)" rx="2" ry="2" />
<text  x="1189.34" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1445" width="0.1" height="15.0" fill="rgb(254,90,22)" rx="2" ry="2" />
<text  x="57.98" y="1455.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="212.4" y="1669" width="0.1" height="15.0" fill="rgb(213,90,35)" rx="2" ry="2" />
<text  x="215.40" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (100 samples, 0.50%)</title><rect x="165.2" y="1685" width="5.9" height="15.0" fill="rgb(215,185,5)" rx="2" ry="2" />
<text  x="168.23" y="1695.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (24 samples, 0.12%)</title><rect x="509.0" y="1861" width="1.4" height="15.0" fill="rgb(212,18,17)" rx="2" ry="2" />
<text  x="512.00" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="158.5" y="1861" width="0.2" height="15.0" fill="rgb(225,55,36)" rx="2" ry="2" />
<text  x="161.51" y="1871.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.03%)</title><rect x="327.3" y="1957" width="0.4" height="15.0" fill="rgb(207,96,2)" rx="2" ry="2" />
<text  x="330.30" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="174.5" y="1589" width="0.1" height="15.0" fill="rgb(208,156,49)" rx="2" ry="2" />
<text  x="177.49" y="1599.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDocument*, __gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (3 samples, 0.01%)</title><rect x="517.8" y="1973" width="0.2" height="15.0" fill="rgb(230,22,20)" rx="2" ry="2" />
<text  x="520.79" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (20 samples, 0.10%)</title><rect x="872.6" y="1957" width="1.2" height="15.0" fill="rgb(248,47,50)" rx="2" ry="2" />
<text  x="875.64" y="1967.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (32 samples, 0.16%)</title><rect x="28.7" y="2053" width="1.9" height="15.0" fill="rgb(235,33,46)" rx="2" ry="2" />
<text  x="31.75" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.4" y="37" width="0.1" height="15.0" fill="rgb(229,78,35)" rx="2" ry="2" />
<text  x="1190.41" y="47.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1813" width="0.2" height="15.0" fill="rgb(226,179,8)" rx="2" ry="2" />
<text  x="57.98" y="1823.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.02%)</title><rect x="1110.9" y="2021" width="0.3" height="15.0" fill="rgb(240,143,23)" rx="2" ry="2" />
<text  x="1113.94" y="2031.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.04%)</title><rect x="1102.0" y="2037" width="0.5" height="15.0" fill="rgb(231,168,41)" rx="2" ry="2" />
<text  x="1104.98" y="2047.5" ></text>
</g>
<g >
<title>__libc_start_main (6,755 samples, 33.75%)</title><rect x="119.9" y="2037" width="398.2" height="15.0" fill="rgb(206,98,26)" rx="2" ry="2" />
<text  x="122.89" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="140.9" y="1637" width="0.2" height="15.0" fill="rgb(246,39,44)" rx="2" ry="2" />
<text  x="143.94" y="1647.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 0.02%)</title><rect x="129.6" y="1925" width="0.3" height="15.0" fill="rgb(216,110,38)" rx="2" ry="2" />
<text  x="132.62" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1013" width="0.2" height="15.0" fill="rgb(235,72,18)" rx="2" ry="2" />
<text  x="1190.29" y="1023.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="90.8" y="1925" width="0.1" height="15.0" fill="rgb(236,9,37)" rx="2" ry="2" />
<text  x="93.83" y="1935.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (3 samples, 0.01%)</title><rect x="26.8" y="1925" width="0.2" height="15.0" fill="rgb(221,121,13)" rx="2" ry="2" />
<text  x="29.80" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1093" width="0.2" height="15.0" fill="rgb(230,118,39)" rx="2" ry="2" />
<text  x="219.93" y="1103.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.02%)</title><rect x="583.8" y="1877" width="0.3" height="15.0" fill="rgb(236,59,6)" rx="2" ry="2" />
<text  x="586.76" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.01%)</title><rect x="158.5" y="1845" width="0.2" height="15.0" fill="rgb(220,184,2)" rx="2" ry="2" />
<text  x="161.51" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="158.3" y="1877" width="0.1" height="15.0" fill="rgb(207,129,24)" rx="2" ry="2" />
<text  x="161.27" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1621" width="0.2" height="15.0" fill="rgb(206,66,37)" rx="2" ry="2" />
<text  x="1190.29" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1877" width="0.8" height="15.0" fill="rgb(241,152,52)" rx="2" ry="2" />
<text  x="219.35" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (344 samples, 1.72%)</title><rect x="55.2" y="725" width="20.3" height="15.0" fill="rgb(239,16,10)" rx="2" ry="2" />
<text  x="58.22" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1221" width="0.3" height="15.0" fill="rgb(253,206,52)" rx="2" ry="2" />
<text  x="1189.52" y="1231.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.01%)</title><rect x="730.2" y="1829" width="0.2" height="15.0" fill="rgb(230,134,32)" rx="2" ry="2" />
<text  x="733.20" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;, std::allocator&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt; &gt;,  (2 samples, 0.01%)</title><rect x="159.2" y="1941" width="0.1" height="15.0" fill="rgb(220,27,20)" rx="2" ry="2" />
<text  x="162.22" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 1.70%)</title><rect x="55.2" y="629" width="20.1" height="15.0" fill="rgb(214,226,23)" rx="2" ry="2" />
<text  x="58.22" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="485" width="0.4" height="15.0" fill="rgb(208,200,10)" rx="2" ry="2" />
<text  x="1189.88" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1493" width="0.4" height="15.0" fill="rgb(253,176,52)" rx="2" ry="2" />
<text  x="1189.88" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="837" width="0.3" height="15.0" fill="rgb(217,137,42)" rx="2" ry="2" />
<text  x="1189.52" y="847.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (481 samples, 2.40%)</title><rect x="159.2" y="1973" width="28.4" height="15.0" fill="rgb(231,135,9)" rx="2" ry="2" />
<text  x="162.22" y="1983.5" >TA..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (52 samples, 0.26%)</title><rect x="1115.1" y="2037" width="3.0" height="15.0" fill="rgb(225,69,3)" rx="2" ry="2" />
<text  x="1118.07" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (123 samples, 0.61%)</title><rect x="941.9" y="2021" width="7.3" height="15.0" fill="rgb(248,29,47)" rx="2" ry="2" />
<text  x="944.91" y="2031.5" ></text>
</g>
<g >
<title>generic_file_read_iter (4 samples, 0.02%)</title><rect x="1110.9" y="1893" width="0.3" height="15.0" fill="rgb(249,177,8)" rx="2" ry="2" />
<text  x="1113.94" y="1903.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (6 samples, 0.03%)</title><rect x="657.0" y="1877" width="0.3" height="15.0" fill="rgb(225,53,32)" rx="2" ry="2" />
<text  x="659.98" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1509" width="0.1" height="15.0" fill="rgb(252,46,3)" rx="2" ry="2" />
<text  x="189.87" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="764.2" y="2005" width="0.5" height="15.0" fill="rgb(238,7,46)" rx="2" ry="2" />
<text  x="767.22" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (79 samples, 0.39%)</title><rect x="141.7" y="1653" width="4.7" height="15.0" fill="rgb(244,165,13)" rx="2" ry="2" />
<text  x="144.71" y="1663.5" ></text>
</g>
<g >
<title>alloc_pages_vma (17 samples, 0.08%)</title><rect x="944.9" y="1925" width="1.0" height="15.0" fill="rgb(239,53,20)" rx="2" ry="2" />
<text  x="947.86" y="1935.5" ></text>
</g>
<g >
<title>fasttext::FastText::predict (3 samples, 0.01%)</title><rect x="768.3" y="2037" width="0.2" height="15.0" fill="rgb(224,73,21)" rx="2" ry="2" />
<text  x="771.35" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (14 samples, 0.07%)</title><rect x="1153.9" y="2037" width="0.8" height="15.0" fill="rgb(249,80,46)" rx="2" ry="2" />
<text  x="1156.92" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.01%)</title><rect x="43.5" y="2005" width="0.2" height="15.0" fill="rgb(240,171,29)" rx="2" ry="2" />
<text  x="46.55" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="158.3" y="1829" width="0.1" height="15.0" fill="rgb(221,226,3)" rx="2" ry="2" />
<text  x="161.27" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.0" y="1493" width="0.1" height="15.0" fill="rgb(225,70,22)" rx="2" ry="2" />
<text  x="161.98" y="1503.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="43.7" y="2005" width="0.1" height="15.0" fill="rgb(251,14,5)" rx="2" ry="2" />
<text  x="46.72" y="2015.5" ></text>
</g>
<g >
<title>vma_merge (2 samples, 0.01%)</title><rect x="1101.4" y="1925" width="0.2" height="15.0" fill="rgb(205,201,30)" rx="2" ry="2" />
<text  x="1104.45" y="1935.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.01%)</title><rect x="478.2" y="1909" width="0.1" height="15.0" fill="rgb(250,125,9)" rx="2" ry="2" />
<text  x="481.17" y="1919.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="144.9" y="1605" width="0.3" height="15.0" fill="rgb(221,75,34)" rx="2" ry="2" />
<text  x="147.95" y="1615.5" ></text>
</g>
<g >
<title>nlohmann::operator== (3 samples, 0.01%)</title><rect x="540.4" y="1925" width="0.1" height="15.0" fill="rgb(232,182,28)" rx="2" ry="2" />
<text  x="543.37" y="1935.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.01%)</title><rect x="336.9" y="1989" width="0.1" height="15.0" fill="rgb(210,70,50)" rx="2" ry="2" />
<text  x="339.85" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.02%)</title><rect x="168.1" y="1573" width="0.3" height="15.0" fill="rgb(217,48,32)" rx="2" ry="2" />
<text  x="171.12" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="933" width="0.2" height="15.0" fill="rgb(228,26,0)" rx="2" ry="2" />
<text  x="1190.29" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (82 samples, 0.41%)</title><rect x="209.8" y="1781" width="4.8" height="15.0" fill="rgb(223,61,30)" rx="2" ry="2" />
<text  x="212.80" y="1791.5" ></text>
</g>
<g >
<title>page_fault (36 samples, 0.18%)</title><rect x="508.6" y="1957" width="2.1" height="15.0" fill="rgb(247,219,28)" rx="2" ry="2" />
<text  x="511.59" y="1967.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.02%)</title><rect x="656.5" y="1797" width="0.2" height="15.0" fill="rgb(214,15,25)" rx="2" ry="2" />
<text  x="659.45" y="1807.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.01%)</title><rect x="1121.9" y="2037" width="0.2" height="15.0" fill="rgb(221,207,30)" rx="2" ry="2" />
<text  x="1124.91" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="88.2" y="1845" width="0.2" height="15.0" fill="rgb(221,9,42)" rx="2" ry="2" />
<text  x="91.23" y="1855.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (24 samples, 0.12%)</title><rect x="764.9" y="1957" width="1.4" height="15.0" fill="rgb(226,225,11)" rx="2" ry="2" />
<text  x="767.87" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (14,159 samples, 70.74%)</title><rect x="43.2" y="2053" width="834.7" height="15.0" fill="rgb(228,28,21)" rx="2" ry="2" />
<text  x="46.19" y="2063.5" >[unknown]</text>
</g>
<g >
<title>wake_up_q (11 samples, 0.05%)</title><rect x="29.9" y="1909" width="0.7" height="15.0" fill="rgb(229,225,21)" rx="2" ry="2" />
<text  x="32.93" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1349" width="0.4" height="15.0" fill="rgb(253,89,0)" rx="2" ry="2" />
<text  x="1189.88" y="1359.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (6 samples, 0.03%)</title><rect x="605.8" y="1861" width="0.4" height="15.0" fill="rgb(219,39,44)" rx="2" ry="2" />
<text  x="608.81" y="1871.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (4 samples, 0.02%)</title><rect x="521.2" y="1861" width="0.2" height="15.0" fill="rgb(214,66,10)" rx="2" ry="2" />
<text  x="524.21" y="1871.5" ></text>
</g>
<g >
<title>__do_page_fault (13 samples, 0.06%)</title><rect x="652.4" y="1829" width="0.8" height="15.0" fill="rgb(225,59,18)" rx="2" ry="2" />
<text  x="655.44" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1317" width="0.4" height="15.0" fill="rgb(206,76,39)" rx="2" ry="2" />
<text  x="1189.88" y="1327.5" ></text>
</g>
<g >
<title>__pthread_getspecific (107 samples, 0.53%)</title><rect x="1009.9" y="2053" width="6.3" height="15.0" fill="rgb(210,35,3)" rx="2" ry="2" />
<text  x="1012.89" y="2063.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.01%)</title><rect x="762.5" y="1941" width="0.1" height="15.0" fill="rgb(213,167,15)" rx="2" ry="2" />
<text  x="765.45" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (10 samples, 0.05%)</title><rect x="186.1" y="1861" width="0.6" height="15.0" fill="rgb(231,224,35)" rx="2" ry="2" />
<text  x="189.10" y="1871.5" ></text>
</g>
<g >
<title>DetectLanguage[abi:cxx11] (523 samples, 2.61%)</title><rect x="541.0" y="1973" width="30.8" height="15.0" fill="rgb(239,111,13)" rx="2" ry="2" />
<text  x="544.01" y="1983.5" >De..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1509" width="0.1" height="15.0" fill="rgb(225,48,34)" rx="2" ry="2" />
<text  x="161.98" y="1519.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.01%)</title><rect x="169.5" y="1573" width="0.2" height="15.0" fill="rgb(250,169,18)" rx="2" ry="2" />
<text  x="172.53" y="1583.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="206.3" y="1637" width="0.1" height="15.0" fill="rgb(206,116,24)" rx="2" ry="2" />
<text  x="209.32" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="171.2" y="1685" width="5.2" height="15.0" fill="rgb(221,199,4)" rx="2" ry="2" />
<text  x="174.24" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="965" width="0.3" height="15.0" fill="rgb(216,151,4)" rx="2" ry="2" />
<text  x="1189.52" y="975.5" ></text>
</g>
<g >
<title>[unknown] (528 samples, 2.64%)</title><rect x="55.2" y="1701" width="31.1" height="15.0" fill="rgb(233,109,20)" rx="2" ry="2" />
<text  x="58.16" y="1711.5" >[u..</text>
</g>
<g >
<title>from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (5 samples, 0.02%)</title><rect x="540.2" y="1957" width="0.3" height="15.0" fill="rgb(253,32,54)" rx="2" ry="2" />
<text  x="543.25" y="1967.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (33 samples, 0.16%)</title><rect x="491.9" y="1957" width="2.0" height="15.0" fill="rgb(252,42,26)" rx="2" ry="2" />
<text  x="494.90" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1381" width="0.3" height="15.0" fill="rgb(231,64,39)" rx="2" ry="2" />
<text  x="219.82" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="186.7" y="1925" width="0.6" height="15.0" fill="rgb(235,173,53)" rx="2" ry="2" />
<text  x="189.69" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="187.4" y="1957" width="0.1" height="15.0" fill="rgb(220,51,13)" rx="2" ry="2" />
<text  x="190.40" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1189" width="0.2" height="15.0" fill="rgb(209,88,1)" rx="2" ry="2" />
<text  x="219.93" y="1199.5" ></text>
</g>
<g >
<title>generic_exec_single (2 samples, 0.01%)</title><rect x="521.3" y="1813" width="0.1" height="15.0" fill="rgb(235,148,18)" rx="2" ry="2" />
<text  x="524.32" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1573" width="0.3" height="15.0" fill="rgb(230,164,47)" rx="2" ry="2" />
<text  x="219.46" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (372 samples, 1.86%)</title><rect x="55.2" y="1173" width="22.0" height="15.0" fill="rgb(241,45,27)" rx="2" ry="2" />
<text  x="58.22" y="1183.5" >[..</text>
</g>
<g >
<title>fasttext::Vector::norm (20 samples, 0.10%)</title><rect x="334.6" y="1989" width="1.2" height="15.0" fill="rgb(237,208,46)" rx="2" ry="2" />
<text  x="337.61" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="453" width="0.4" height="15.0" fill="rgb(218,183,36)" rx="2" ry="2" />
<text  x="1189.88" y="463.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1525" width="0.1" height="15.0" fill="rgb(251,148,29)" rx="2" ry="2" />
<text  x="57.98" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1141" width="0.2" height="15.0" fill="rgb(236,207,39)" rx="2" ry="2" />
<text  x="219.93" y="1151.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.01%)</title><rect x="1102.7" y="2021" width="0.2" height="15.0" fill="rgb(234,40,6)" rx="2" ry="2" />
<text  x="1105.75" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (74 samples, 0.37%)</title><rect x="181.3" y="1701" width="4.4" height="15.0" fill="rgb(205,201,2)" rx="2" ry="2" />
<text  x="184.33" y="1711.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.01%)</title><rect x="871.6" y="1941" width="0.2" height="15.0" fill="rgb(220,62,24)" rx="2" ry="2" />
<text  x="874.58" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="877.5" y="2005" width="0.2" height="15.0" fill="rgb(244,129,12)" rx="2" ry="2" />
<text  x="880.53" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1061" width="0.1" height="15.0" fill="rgb(209,137,31)" rx="2" ry="2" />
<text  x="57.98" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="91.4" y="2005" width="0.2" height="15.0" fill="rgb(243,110,11)" rx="2" ry="2" />
<text  x="94.36" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (8 samples, 0.04%)</title><rect x="767.2" y="2005" width="0.4" height="15.0" fill="rgb(250,15,22)" rx="2" ry="2" />
<text  x="770.17" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (98 samples, 0.49%)</title><rect x="165.3" y="1669" width="5.8" height="15.0" fill="rgb(232,48,13)" rx="2" ry="2" />
<text  x="168.35" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (359 samples, 1.79%)</title><rect x="55.2" y="1125" width="21.2" height="15.0" fill="rgb(225,223,20)" rx="2" ry="2" />
<text  x="58.22" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (480 samples, 2.40%)</title><rect x="55.2" y="1541" width="28.3" height="15.0" fill="rgb(239,92,14)" rx="2" ry="2" />
<text  x="58.16" y="1551.5" >[..</text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,225 samples, 6.12%)</title><rect x="242.2" y="1973" width="72.2" height="15.0" fill="rgb(209,186,25)" rx="2" ry="2" />
<text  x="245.23" y="1983.5" >fasttext..</text>
</g>
<g >
<title>do_page_fault (36 samples, 0.18%)</title><rect x="508.6" y="1941" width="2.1" height="15.0" fill="rgb(205,183,7)" rx="2" ry="2" />
<text  x="511.59" y="1951.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.01%)</title><rect x="1099.0" y="1989" width="0.1" height="15.0" fill="rgb(240,127,24)" rx="2" ry="2" />
<text  x="1101.97" y="1999.5" ></text>
</g>
<g >
<title>do_group_exit (8 samples, 0.04%)</title><rect x="1102.0" y="2005" width="0.5" height="15.0" fill="rgb(207,90,52)" rx="2" ry="2" />
<text  x="1104.98" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (43 samples, 0.21%)</title><rect x="190.9" y="1573" width="2.6" height="15.0" fill="rgb(251,125,16)" rx="2" ry="2" />
<text  x="193.94" y="1583.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="1023.4" y="1941" width="0.2" height="15.0" fill="rgb(238,222,19)" rx="2" ry="2" />
<text  x="1026.45" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;char const  (3 samples, 0.01%)</title><rect x="515.6" y="2005" width="0.2" height="15.0" fill="rgb(235,48,11)" rx="2" ry="2" />
<text  x="518.60" y="2015.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="84.1" y="1541" width="0.1" height="15.0" fill="rgb(233,55,45)" rx="2" ry="2" />
<text  x="87.11" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::reserve (4 samples, 0.02%)</title><rect x="694.4" y="1861" width="0.3" height="15.0" fill="rgb(216,92,7)" rx="2" ry="2" />
<text  x="697.42" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1429" width="0.3" height="15.0" fill="rgb(220,119,52)" rx="2" ry="2" />
<text  x="219.46" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1701" width="0.4" height="15.0" fill="rgb(208,17,31)" rx="2" ry="2" />
<text  x="1189.88" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.01%)</title><rect x="77.4" y="1189" width="0.2" height="15.0" fill="rgb(221,160,22)" rx="2" ry="2" />
<text  x="80.45" y="1199.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="324.4" y="1941" width="0.1" height="15.0" fill="rgb(219,51,25)" rx="2" ry="2" />
<text  x="327.35" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.01%)</title><rect x="321.7" y="1941" width="0.2" height="15.0" fill="rgb(245,107,5)" rx="2" ry="2" />
<text  x="324.70" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (15 samples, 0.07%)</title><rect x="1177.3" y="2037" width="0.9" height="15.0" fill="rgb(221,184,28)" rx="2" ry="2" />
<text  x="1180.32" y="2047.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (4 samples, 0.02%)</title><rect x="518.6" y="2037" width="0.2" height="15.0" fill="rgb(235,228,50)" rx="2" ry="2" />
<text  x="521.55" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (3 samples, 0.01%)</title><rect x="515.9" y="1893" width="0.2" height="15.0" fill="rgb(220,167,31)" rx="2" ry="2" />
<text  x="518.90" y="1903.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="203.1" y="1605" width="0.2" height="15.0" fill="rgb(228,225,48)" rx="2" ry="2" />
<text  x="206.14" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (566 samples, 2.83%)</title><rect x="55.2" y="1877" width="33.3" height="15.0" fill="rgb(232,54,36)" rx="2" ry="2" />
<text  x="58.16" y="1887.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1717" width="0.4" height="15.0" fill="rgb(217,207,38)" rx="2" ry="2" />
<text  x="1189.40" y="1727.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.02%)</title><rect x="1121.1" y="2037" width="0.2" height="15.0" fill="rgb(233,181,29)" rx="2" ry="2" />
<text  x="1124.08" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1685" width="0.3" height="15.0" fill="rgb(244,169,15)" rx="2" ry="2" />
<text  x="219.76" y="1695.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.01%)</title><rect x="652.9" y="1749" width="0.1" height="15.0" fill="rgb(215,17,28)" rx="2" ry="2" />
<text  x="655.85" y="1759.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.01%)</title><rect x="499.9" y="1829" width="0.2" height="15.0" fill="rgb(206,13,16)" rx="2" ry="2" />
<text  x="502.92" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (86 samples, 0.43%)</title><rect x="171.4" y="1637" width="5.0" height="15.0" fill="rgb(219,57,46)" rx="2" ry="2" />
<text  x="174.36" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="186.9" y="1477" width="0.1" height="15.0" fill="rgb(228,221,25)" rx="2" ry="2" />
<text  x="189.87" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (91 samples, 0.45%)</title><rect x="146.6" y="1733" width="5.4" height="15.0" fill="rgb(215,162,49)" rx="2" ry="2" />
<text  x="149.60" y="1743.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (3,908 samples, 19.53%)</title><rect x="524.5" y="2005" width="230.4" height="15.0" fill="rgb(249,163,1)" rx="2" ry="2" />
<text  x="527.51" y="2015.5" >std::_Function_handler&lt;std::un..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.01%)</title><rect x="215.1" y="1813" width="0.2" height="15.0" fill="rgb(206,179,36)" rx="2" ry="2" />
<text  x="218.11" y="1823.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (4 samples, 0.02%)</title><rect x="188.5" y="1989" width="0.2" height="15.0" fill="rgb(211,136,53)" rx="2" ry="2" />
<text  x="191.46" y="1999.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (11 samples, 0.05%)</title><rect x="29.9" y="1877" width="0.7" height="15.0" fill="rgb(246,146,53)" rx="2" ry="2" />
<text  x="32.93" y="1887.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="93.6" y="2021" width="0.2" height="15.0" fill="rgb(229,129,3)" rx="2" ry="2" />
<text  x="96.60" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (91 samples, 0.45%)</title><rect x="146.6" y="1717" width="5.4" height="15.0" fill="rgb(229,122,16)" rx="2" ry="2" />
<text  x="149.60" y="1727.5" ></text>
</g>
<g >
<title>do_page_fault (8 samples, 0.04%)</title><rect x="656.2" y="1845" width="0.5" height="15.0" fill="rgb(216,118,52)" rx="2" ry="2" />
<text  x="659.21" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (2 samples, 0.01%)</title><rect x="214.9" y="1877" width="0.1" height="15.0" fill="rgb(216,91,53)" rx="2" ry="2" />
<text  x="217.87" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.05%)</title><rect x="818.6" y="1989" width="0.6" height="15.0" fill="rgb(208,208,13)" rx="2" ry="2" />
<text  x="821.58" y="1999.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="90.8" y="1941" width="0.1" height="15.0" fill="rgb(213,55,15)" rx="2" ry="2" />
<text  x="93.83" y="1951.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="82.3" y="1413" width="0.1" height="15.0" fill="rgb(221,225,36)" rx="2" ry="2" />
<text  x="85.28" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (84 samples, 0.42%)</title><rect x="189.3" y="1717" width="4.9" height="15.0" fill="rgb(209,194,12)" rx="2" ry="2" />
<text  x="192.28" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="187.2" y="1045" width="0.1" height="15.0" fill="rgb(238,30,8)" rx="2" ry="2" />
<text  x="190.16" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (411 samples, 2.05%)</title><rect x="55.2" y="1333" width="24.2" height="15.0" fill="rgb(218,175,27)" rx="2" ry="2" />
<text  x="58.22" y="1343.5" >[..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1989" width="0.2" height="15.0" fill="rgb(244,60,2)" rx="2" ry="2" />
<text  x="57.98" y="1999.5" ></text>
</g>
<g >
<title>operator delete[] (4 samples, 0.02%)</title><rect x="1110.3" y="2053" width="0.2" height="15.0" fill="rgb(238,217,7)" rx="2" ry="2" />
<text  x="1113.29" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (77 samples, 0.38%)</title><rect x="189.6" y="1669" width="4.5" height="15.0" fill="rgb(206,15,15)" rx="2" ry="2" />
<text  x="192.58" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="69" width="19.3" height="15.0" fill="rgb(227,175,3)" rx="2" ry="2" />
<text  x="58.22" y="79.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="142.8" y="1621" width="0.1" height="15.0" fill="rgb(252,35,51)" rx="2" ry="2" />
<text  x="145.83" y="1631.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="200.9" y="1605" width="0.1" height="15.0" fill="rgb(234,37,19)" rx="2" ry="2" />
<text  x="203.90" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (4 samples, 0.02%)</title><rect x="517.2" y="1861" width="0.2" height="15.0" fill="rgb(221,52,9)" rx="2" ry="2" />
<text  x="520.20" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="152.1" y="1749" width="0.1" height="15.0" fill="rgb(214,69,28)" rx="2" ry="2" />
<text  x="155.08" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="618.5" y="1845" width="0.1" height="15.0" fill="rgb(240,109,8)" rx="2" ry="2" />
<text  x="621.48" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1861" width="0.4" height="15.0" fill="rgb(237,48,46)" rx="2" ry="2" />
<text  x="1189.88" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="191.3" y="1557" width="0.2" height="15.0" fill="rgb(248,126,8)" rx="2" ry="2" />
<text  x="194.35" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1861" width="0.2" height="15.0" fill="rgb(254,189,41)" rx="2" ry="2" />
<text  x="1190.29" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="154.7" y="1669" width="0.2" height="15.0" fill="rgb(226,94,18)" rx="2" ry="2" />
<text  x="157.74" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="2005" width="0.1" height="15.0" fill="rgb(235,211,23)" rx="2" ry="2" />
<text  x="1189.17" y="2015.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.01%)</title><rect x="209.1" y="1669" width="0.2" height="15.0" fill="rgb(211,229,0)" rx="2" ry="2" />
<text  x="212.09" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.70%)</title><rect x="55.2" y="693" width="20.1" height="15.0" fill="rgb(213,209,7)" rx="2" ry="2" />
<text  x="58.22" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="158.9" y="1925" width="0.2" height="15.0" fill="rgb(234,23,14)" rx="2" ry="2" />
<text  x="161.92" y="1935.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.01%)</title><rect x="180.4" y="1637" width="0.2" height="15.0" fill="rgb(244,161,14)" rx="2" ry="2" />
<text  x="183.44" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.06%)</title><rect x="216.3" y="1813" width="0.8" height="15.0" fill="rgb(244,159,18)" rx="2" ry="2" />
<text  x="219.35" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1653" width="0.1" height="15.0" fill="rgb(235,64,15)" rx="2" ry="2" />
<text  x="189.87" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1413" width="0.3" height="15.0" fill="rgb(227,4,22)" rx="2" ry="2" />
<text  x="190.04" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="789" width="0.3" height="15.0" fill="rgb(239,39,36)" rx="2" ry="2" />
<text  x="1189.52" y="799.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.01%)</title><rect x="521.3" y="1765" width="0.1" height="15.0" fill="rgb(207,58,46)" rx="2" ry="2" />
<text  x="524.32" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (22 samples, 0.11%)</title><rect x="1175.0" y="2037" width="1.3" height="15.0" fill="rgb(236,0,0)" rx="2" ry="2" />
<text  x="1178.03" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (8 samples, 0.04%)</title><rect x="515.1" y="2005" width="0.5" height="15.0" fill="rgb(226,226,11)" rx="2" ry="2" />
<text  x="518.13" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 1.70%)</title><rect x="55.2" y="645" width="20.1" height="15.0" fill="rgb(242,106,16)" rx="2" ry="2" />
<text  x="58.22" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="325" width="0.3" height="15.0" fill="rgb(230,217,41)" rx="2" ry="2" />
<text  x="1189.52" y="335.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.01%)</title><rect x="521.6" y="1957" width="0.1" height="15.0" fill="rgb(215,143,20)" rx="2" ry="2" />
<text  x="524.56" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="89.2" y="1909" width="0.2" height="15.0" fill="rgb(241,163,47)" rx="2" ry="2" />
<text  x="92.24" y="1919.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="54.1" y="1909" width="0.2" height="15.0" fill="rgb(215,227,4)" rx="2" ry="2" />
<text  x="57.10" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1205" width="0.3" height="15.0" fill="rgb(254,197,27)" rx="2" ry="2" />
<text  x="1189.52" y="1215.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (35 samples, 0.17%)</title><rect x="816.5" y="2005" width="2.1" height="15.0" fill="rgb(241,228,40)" rx="2" ry="2" />
<text  x="819.52" y="2015.5" ></text>
</g>
<g >
<title>smp_call_function_many (5 samples, 0.02%)</title><rect x="54.6" y="1829" width="0.3" height="15.0" fill="rgb(254,68,38)" rx="2" ry="2" />
<text  x="57.63" y="1839.5" ></text>
</g>
<g >
<title>unmap_vmas (5 samples, 0.02%)</title><rect x="1101.0" y="1893" width="0.3" height="15.0" fill="rgb(232,226,3)" rx="2" ry="2" />
<text  x="1103.98" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.69%)</title><rect x="55.2" y="613" width="20.0" height="15.0" fill="rgb(243,104,14)" rx="2" ry="2" />
<text  x="58.22" y="623.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (5 samples, 0.02%)</title><rect x="1100.7" y="1893" width="0.3" height="15.0" fill="rgb(224,125,7)" rx="2" ry="2" />
<text  x="1103.68" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (2 samples, 0.01%)</title><rect x="1119.2" y="2053" width="0.1" height="15.0" fill="rgb(236,169,42)" rx="2" ry="2" />
<text  x="1122.19" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="709" width="0.2" height="15.0" fill="rgb(219,227,45)" rx="2" ry="2" />
<text  x="1190.29" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.01%)</title><rect x="215.1" y="1781" width="0.2" height="15.0" fill="rgb(252,77,41)" rx="2" ry="2" />
<text  x="218.11" y="1791.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="82.3" y="1317" width="0.1" height="15.0" fill="rgb(247,134,28)" rx="2" ry="2" />
<text  x="85.28" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (98 samples, 0.49%)</title><rect x="203.6" y="1749" width="5.8" height="15.0" fill="rgb(221,204,11)" rx="2" ry="2" />
<text  x="206.61" y="1759.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (14 samples, 0.07%)</title><rect x="486.8" y="1925" width="0.8" height="15.0" fill="rgb(216,5,16)" rx="2" ry="2" />
<text  x="489.78" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="79.9" y="1349" width="0.2" height="15.0" fill="rgb(242,112,37)" rx="2" ry="2" />
<text  x="82.86" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1397" width="0.3" height="15.0" fill="rgb(233,11,9)" rx="2" ry="2" />
<text  x="190.04" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="309" width="0.4" height="15.0" fill="rgb(243,219,54)" rx="2" ry="2" />
<text  x="1189.88" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_read (4 samples, 0.02%)</title><rect x="1110.9" y="1989" width="0.3" height="15.0" fill="rgb(214,57,41)" rx="2" ry="2" />
<text  x="1113.94" y="1999.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (5 samples, 0.02%)</title><rect x="1102.2" y="1893" width="0.3" height="15.0" fill="rgb(217,145,30)" rx="2" ry="2" />
<text  x="1105.16" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="187.1" y="1189" width="0.2" height="15.0" fill="rgb(244,74,12)" rx="2" ry="2" />
<text  x="190.10" y="1199.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (2 samples, 0.01%)</title><rect x="767.1" y="2037" width="0.1" height="15.0" fill="rgb(223,153,18)" rx="2" ry="2" />
<text  x="770.05" y="2047.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (3 samples, 0.01%)</title><rect x="93.9" y="2021" width="0.2" height="15.0" fill="rgb(254,100,38)" rx="2" ry="2" />
<text  x="96.89" y="2031.5" ></text>
</g>
<g >
<title>try_to_wake_up (11 samples, 0.05%)</title><rect x="29.9" y="1893" width="0.7" height="15.0" fill="rgb(248,29,50)" rx="2" ry="2" />
<text  x="32.93" y="1903.5" ></text>
</g>
<g >
<title>std::locale::operator= (2 samples, 0.01%)</title><rect x="29.0" y="2021" width="0.2" height="15.0" fill="rgb(239,58,33)" rx="2" ry="2" />
<text  x="32.04" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (3 samples, 0.01%)</title><rect x="517.3" y="1765" width="0.1" height="15.0" fill="rgb(221,151,23)" rx="2" ry="2" />
<text  x="520.26" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1909" width="0.2" height="15.0" fill="rgb(229,96,32)" rx="2" ry="2" />
<text  x="1190.29" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="933" width="0.4" height="15.0" fill="rgb(246,125,3)" rx="2" ry="2" />
<text  x="1189.88" y="943.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="337.4" y="2005" width="0.2" height="15.0" fill="rgb(239,126,37)" rx="2" ry="2" />
<text  x="340.44" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="341" width="19.6" height="15.0" fill="rgb(217,147,52)" rx="2" ry="2" />
<text  x="58.22" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="2005" width="0.2" height="15.0" fill="rgb(216,221,11)" rx="2" ry="2" />
<text  x="1190.29" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.73%)</title><rect x="55.2" y="885" width="20.4" height="15.0" fill="rgb(213,155,28)" rx="2" ry="2" />
<text  x="58.22" y="895.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="88.4" y="1861" width="0.1" height="15.0" fill="rgb(233,119,22)" rx="2" ry="2" />
<text  x="91.35" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1909" width="0.4" height="15.0" fill="rgb(230,28,26)" rx="2" ry="2" />
<text  x="1189.88" y="1919.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (10 samples, 0.05%)</title><rect x="768.6" y="2037" width="0.6" height="15.0" fill="rgb(250,166,4)" rx="2" ry="2" />
<text  x="771.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.4" y="1701" width="0.4" height="15.0" fill="rgb(219,159,50)" rx="2" ry="2" />
<text  x="1189.40" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (5 samples, 0.02%)</title><rect x="141.2" y="1733" width="0.3" height="15.0" fill="rgb(242,76,49)" rx="2" ry="2" />
<text  x="144.24" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1525" width="0.2" height="15.0" fill="rgb(230,56,47)" rx="2" ry="2" />
<text  x="1190.29" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (98 samples, 0.49%)</title><rect x="159.5" y="1717" width="5.7" height="15.0" fill="rgb(209,143,22)" rx="2" ry="2" />
<text  x="162.45" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="357" width="0.2" height="15.0" fill="rgb(246,118,31)" rx="2" ry="2" />
<text  x="1190.35" y="367.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (8 samples, 0.04%)</title><rect x="802.7" y="2037" width="0.4" height="15.0" fill="rgb(241,131,11)" rx="2" ry="2" />
<text  x="805.66" y="2047.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.02%)</title><rect x="693.3" y="1733" width="0.2" height="15.0" fill="rgb(244,145,0)" rx="2" ry="2" />
<text  x="696.30" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (26 samples, 0.13%)</title><rect x="1188.2" y="2053" width="1.6" height="15.0" fill="rgb(249,165,31)" rx="2" ry="2" />
<text  x="1191.23" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (96 samples, 0.48%)</title><rect x="165.5" y="1621" width="5.6" height="15.0" fill="rgb(211,149,4)" rx="2" ry="2" />
<text  x="168.47" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1589" width="0.3" height="15.0" fill="rgb(215,134,40)" rx="2" ry="2" />
<text  x="219.46" y="1599.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (9 samples, 0.04%)</title><rect x="516.5" y="1989" width="0.5" height="15.0" fill="rgb(252,175,10)" rx="2" ry="2" />
<text  x="519.49" y="1999.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="139.6" y="1589" width="0.3" height="15.0" fill="rgb(210,144,47)" rx="2" ry="2" />
<text  x="142.58" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="187.0" y="1589" width="0.3" height="15.0" fill="rgb(247,62,50)" rx="2" ry="2" />
<text  x="190.04" y="1599.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="152.6" y="1701" width="0.1" height="15.0" fill="rgb(213,133,33)" rx="2" ry="2" />
<text  x="155.56" y="1711.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="175.6" y="1605" width="0.1" height="15.0" fill="rgb(211,180,41)" rx="2" ry="2" />
<text  x="178.61" y="1615.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="82.3" y="1445" width="0.1" height="15.0" fill="rgb(228,186,7)" rx="2" ry="2" />
<text  x="85.28" y="1455.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.01%)</title><rect x="1102.7" y="2005" width="0.2" height="15.0" fill="rgb(205,78,52)" rx="2" ry="2" />
<text  x="1105.75" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="341" width="0.2" height="15.0" fill="rgb(206,31,9)" rx="2" ry="2" />
<text  x="1190.35" y="351.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.15%)</title><rect x="875.8" y="2021" width="1.7" height="15.0" fill="rgb(232,99,28)" rx="2" ry="2" />
<text  x="878.77" y="2031.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.01%)</title><rect x="765.8" y="1861" width="0.1" height="15.0" fill="rgb(226,184,34)" rx="2" ry="2" />
<text  x="768.75" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.01%)</title><rect x="517.3" y="1781" width="0.1" height="15.0" fill="rgb(207,160,38)" rx="2" ry="2" />
<text  x="520.26" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="89.6" y="1925" width="0.2" height="15.0" fill="rgb(209,36,19)" rx="2" ry="2" />
<text  x="92.59" y="1935.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (95 samples, 0.47%)</title><rect x="105.0" y="2037" width="5.6" height="15.0" fill="rgb(236,101,38)" rx="2" ry="2" />
<text  x="107.98" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (50 samples, 0.25%)</title><rect x="1003.3" y="2053" width="2.9" height="15.0" fill="rgb(208,75,7)" rx="2" ry="2" />
<text  x="1006.29" y="2063.5" ></text>
</g>
<g >
<title>TDocument::operator= (2 samples, 0.01%)</title><rect x="518.0" y="1957" width="0.1" height="15.0" fill="rgb(218,220,24)" rx="2" ry="2" />
<text  x="520.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="741" width="0.4" height="15.0" fill="rgb(244,214,21)" rx="2" ry="2" />
<text  x="1189.88" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.01%)</title><rect x="193.2" y="1557" width="0.1" height="15.0" fill="rgb(249,141,37)" rx="2" ry="2" />
<text  x="196.18" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1429" width="0.3" height="15.0" fill="rgb(211,54,23)" rx="2" ry="2" />
<text  x="190.04" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (98 samples, 0.49%)</title><rect x="165.3" y="1637" width="5.8" height="15.0" fill="rgb(220,214,20)" rx="2" ry="2" />
<text  x="168.35" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="158.9" y="1941" width="0.2" height="15.0" fill="rgb(249,121,51)" rx="2" ry="2" />
<text  x="161.92" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1813" width="0.4" height="15.0" fill="rgb(226,34,31)" rx="2" ry="2" />
<text  x="1189.88" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="85" width="0.3" height="15.0" fill="rgb(232,99,8)" rx="2" ry="2" />
<text  x="1189.52" y="95.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="802.2" y="1973" width="0.1" height="15.0" fill="rgb(243,11,46)" rx="2" ry="2" />
<text  x="805.19" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1989" width="0.2" height="15.0" fill="rgb(230,10,4)" rx="2" ry="2" />
<text  x="1190.29" y="1999.5" ></text>
</g>
<g >
<title>fasttext::FastText::predictLine (518 samples, 2.59%)</title><rect x="541.2" y="1941" width="30.5" height="15.0" fill="rgb(220,205,12)" rx="2" ry="2" />
<text  x="544.19" y="1951.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="341" width="0.4" height="15.0" fill="rgb(237,119,50)" rx="2" ry="2" />
<text  x="1189.88" y="351.5" ></text>
</g>
<g >
<title>[unknown] (337 samples, 1.68%)</title><rect x="55.2" y="533" width="19.9" height="15.0" fill="rgb(215,141,29)" rx="2" ry="2" />
<text  x="58.22" y="543.5" ></text>
</g>
<g >
<title>cap_vm_enough_memory (2 samples, 0.01%)</title><rect x="1101.3" y="1925" width="0.1" height="15.0" fill="rgb(226,220,54)" rx="2" ry="2" />
<text  x="1104.27" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (6 samples, 0.03%)</title><rect x="209.4" y="1749" width="0.4" height="15.0" fill="rgb(230,89,38)" rx="2" ry="2" />
<text  x="212.45" y="1759.5" ></text>
</g>
<g >
<title>smp_call_function_many (2 samples, 0.01%)</title><rect x="1100.7" y="1781" width="0.2" height="15.0" fill="rgb(223,80,10)" rx="2" ry="2" />
<text  x="1103.74" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1221" width="0.3" height="15.0" fill="rgb(220,210,6)" rx="2" ry="2" />
<text  x="190.04" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="186.5" y="1813" width="0.1" height="15.0" fill="rgb(215,155,51)" rx="2" ry="2" />
<text  x="189.51" y="1823.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (61 samples, 0.30%)</title><rect x="1106.3" y="2053" width="3.6" height="15.0" fill="rgb(240,102,3)" rx="2" ry="2" />
<text  x="1109.34" y="2063.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="593.1" y="1877" width="0.1" height="15.0" fill="rgb(249,186,45)" rx="2" ry="2" />
<text  x="596.13" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1333" width="0.1" height="15.0" fill="rgb(232,150,41)" rx="2" ry="2" />
<text  x="57.98" y="1343.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (22 samples, 0.11%)</title><rect x="582.8" y="1893" width="1.3" height="15.0" fill="rgb(223,200,50)" rx="2" ry="2" />
<text  x="585.76" y="1903.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (3 samples, 0.01%)</title><rect x="946.8" y="1893" width="0.2" height="15.0" fill="rgb(237,9,52)" rx="2" ry="2" />
<text  x="949.81" y="1903.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (5 samples, 0.02%)</title><rect x="331.9" y="1957" width="0.3" height="15.0" fill="rgb(242,97,23)" rx="2" ry="2" />
<text  x="334.90" y="1967.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="802.2" y="2005" width="0.1" height="15.0" fill="rgb(252,11,54)" rx="2" ry="2" />
<text  x="805.19" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1605" width="0.3" height="15.0" fill="rgb(240,137,9)" rx="2" ry="2" />
<text  x="219.46" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.6" y="1141" width="0.2" height="15.0" fill="rgb(205,61,18)" rx="2" ry="2" />
<text  x="219.64" y="1151.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (5 samples, 0.02%)</title><rect x="539.8" y="1925" width="0.3" height="15.0" fill="rgb(221,90,37)" rx="2" ry="2" />
<text  x="542.78" y="1935.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (26 samples, 0.13%)</title><rect x="764.8" y="2021" width="1.5" height="15.0" fill="rgb(206,124,29)" rx="2" ry="2" />
<text  x="767.75" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="277" width="0.4" height="15.0" fill="rgb(228,170,18)" rx="2" ry="2" />
<text  x="1189.88" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="709" width="0.3" height="15.0" fill="rgb(222,137,21)" rx="2" ry="2" />
<text  x="1189.52" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1941" width="0.4" height="15.0" fill="rgb(212,10,14)" rx="2" ry="2" />
<text  x="1189.88" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1125" width="0.1" height="15.0" fill="rgb(234,228,3)" rx="2" ry="2" />
<text  x="57.98" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="565" width="0.4" height="15.0" fill="rgb(229,7,51)" rx="2" ry="2" />
<text  x="1189.88" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="216.6" y="1205" width="0.2" height="15.0" fill="rgb(253,200,35)" rx="2" ry="2" />
<text  x="219.64" y="1215.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="571.6" y="1877" width="0.1" height="15.0" fill="rgb(238,105,28)" rx="2" ry="2" />
<text  x="574.55" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="869" width="0.4" height="15.0" fill="rgb(229,148,15)" rx="2" ry="2" />
<text  x="1189.88" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1029" width="0.2" height="15.0" fill="rgb(207,52,51)" rx="2" ry="2" />
<text  x="1190.29" y="1039.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (883 samples, 4.41%)</title><rect x="819.7" y="2005" width="52.1" height="15.0" fill="rgb(244,126,48)" rx="2" ry="2" />
<text  x="822.70" y="2015.5" >__san..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="84.1" y="1557" width="0.1" height="15.0" fill="rgb(253,229,9)" rx="2" ry="2" />
<text  x="87.11" y="1567.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="79.3" y="1285" width="0.1" height="15.0" fill="rgb(211,172,19)" rx="2" ry="2" />
<text  x="82.33" y="1295.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (3 samples, 0.01%)</title><rect x="1188.1" y="2053" width="0.1" height="15.0" fill="rgb(232,19,31)" rx="2" ry="2" />
<text  x="1191.05" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 1.65%)</title><rect x="55.2" y="245" width="19.5" height="15.0" fill="rgb(206,16,54)" rx="2" ry="2" />
<text  x="58.22" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.6" y="37" width="0.2" height="15.0" fill="rgb(215,175,23)" rx="2" ry="2" />
<text  x="1189.58" y="47.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.70%)</title><rect x="55.2" y="661" width="20.1" height="15.0" fill="rgb(244,14,15)" rx="2" ry="2" />
<text  x="58.22" y="671.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (25 samples, 0.12%)</title><rect x="493.9" y="1957" width="1.4" height="15.0" fill="rgb(233,128,17)" rx="2" ry="2" />
<text  x="496.85" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13 samples, 0.06%)</title><rect x="216.3" y="1909" width="0.8" height="15.0" fill="rgb(227,1,31)" rx="2" ry="2" />
<text  x="219.29" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="186.8" y="1733" width="0.5" height="15.0" fill="rgb(226,185,27)" rx="2" ry="2" />
<text  x="189.81" y="1743.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (7 samples, 0.03%)</title><rect x="999.3" y="2053" width="0.4" height="15.0" fill="rgb(207,162,23)" rx="2" ry="2" />
<text  x="1002.28" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1797" width="0.2" height="15.0" fill="rgb(206,86,49)" rx="2" ry="2" />
<text  x="57.98" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1317" width="0.3" height="15.0" fill="rgb(237,65,33)" rx="2" ry="2" />
<text  x="190.04" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (403 samples, 2.01%)</title><rect x="55.2" y="1301" width="23.8" height="15.0" fill="rgb(207,92,47)" rx="2" ry="2" />
<text  x="58.22" y="1311.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1925" width="0.4" height="15.0" fill="rgb(237,105,24)" rx="2" ry="2" />
<text  x="1189.88" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (30 samples, 0.15%)</title><rect x="813.8" y="2037" width="1.8" height="15.0" fill="rgb(226,111,40)" rx="2" ry="2" />
<text  x="816.80" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="216.5" y="1637" width="0.3" height="15.0" fill="rgb(228,84,30)" rx="2" ry="2" />
<text  x="219.46" y="1647.5" ></text>
</g>
<g >
<title>__do_page_fault (5 samples, 0.02%)</title><rect x="1023.3" y="2005" width="0.3" height="15.0" fill="rgb(225,100,27)" rx="2" ry="2" />
<text  x="1026.33" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1301" width="0.1" height="15.0" fill="rgb(238,16,32)" rx="2" ry="2" />
<text  x="57.98" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1461" width="0.1" height="15.0" fill="rgb(219,156,19)" rx="2" ry="2" />
<text  x="57.98" y="1471.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (317 samples, 1.58%)</title><rect x="10.1" y="2053" width="18.6" height="15.0" fill="rgb(223,62,2)" rx="2" ry="2" />
<text  x="13.06" y="2063.5" ></text>
</g>
<g >
<title>page_fault (25 samples, 0.12%)</title><rect x="499.2" y="1925" width="1.5" height="15.0" fill="rgb(226,40,8)" rx="2" ry="2" />
<text  x="502.22" y="1935.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::should_preserve (2 samples, 0.01%)</title><rect x="574.0" y="1909" width="0.1" height="15.0" fill="rgb(243,146,50)" rx="2" ry="2" />
<text  x="577.03" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="117" width="0.4" height="15.0" fill="rgb(245,147,16)" rx="2" ry="2" />
<text  x="1189.93" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="216.9" y="1221" width="0.2" height="15.0" fill="rgb(233,21,9)" rx="2" ry="2" />
<text  x="219.93" y="1231.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, 0&gt; (3 samples, 0.01%)</title><rect x="121.7" y="1925" width="0.2" height="15.0" fill="rgb(220,91,7)" rx="2" ry="2" />
<text  x="124.72" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (75 samples, 0.37%)</title><rect x="176.4" y="1685" width="4.5" height="15.0" fill="rgb(219,172,24)" rx="2" ry="2" />
<text  x="179.43" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (167 samples, 0.83%)</title><rect x="189.3" y="1749" width="9.8" height="15.0" fill="rgb(233,136,30)" rx="2" ry="2" />
<text  x="192.28" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.8" y="2005" width="0.5" height="15.0" fill="rgb(234,200,27)" rx="2" ry="2" />
<text  x="1189.82" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="181" width="0.3" height="15.0" fill="rgb(235,45,14)" rx="2" ry="2" />
<text  x="1189.52" y="191.5" ></text>
</g>
<g >
<title>__pthread_getspecific (46 samples, 0.23%)</title><rect x="521.7" y="2037" width="2.7" height="15.0" fill="rgb(215,122,13)" rx="2" ry="2" />
<text  x="524.68" y="2047.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="155.9" y="1669" width="0.3" height="15.0" fill="rgb(248,80,1)" rx="2" ry="2" />
<text  x="158.86" y="1679.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (871 samples, 4.35%)</title><rect x="584.2" y="1893" width="51.4" height="15.0" fill="rgb(254,8,16)" rx="2" ry="2" />
<text  x="587.23" y="1903.5" >onmt:..</text>
</g>
<g >
<title>[unknown] (347 samples, 1.73%)</title><rect x="55.2" y="1013" width="20.5" height="15.0" fill="rgb(211,81,17)" rx="2" ry="2" />
<text  x="58.22" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.01%)</title><rect x="158.5" y="1829" width="0.2" height="15.0" fill="rgb(248,175,36)" rx="2" ry="2" />
<text  x="161.51" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1189" width="0.2" height="15.0" fill="rgb(216,136,33)" rx="2" ry="2" />
<text  x="1190.29" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (356 samples, 1.78%)</title><rect x="131.1" y="1797" width="21.0" height="15.0" fill="rgb(208,106,0)" rx="2" ry="2" />
<text  x="134.10" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="661" width="0.2" height="15.0" fill="rgb(227,197,50)" rx="2" ry="2" />
<text  x="1190.29" y="671.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.01%)</title><rect x="1102.8" y="1973" width="0.1" height="15.0" fill="rgb(231,219,3)" rx="2" ry="2" />
<text  x="1105.80" y="1983.5" ></text>
</g>
<g >
<title>__asan_memcpy (17 samples, 0.08%)</title><rect x="615.8" y="1845" width="1.0" height="15.0" fill="rgb(234,94,3)" rx="2" ry="2" />
<text  x="618.77" y="1855.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (181 samples, 0.90%)</title><rect x="316.6" y="1957" width="10.7" height="15.0" fill="rgb(247,188,54)" rx="2" ry="2" />
<text  x="319.63" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="1925" width="0.1" height="15.0" fill="rgb(230,100,53)" rx="2" ry="2" />
<text  x="1189.17" y="1935.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="82.3" y="1381" width="0.1" height="15.0" fill="rgb(222,138,22)" rx="2" ry="2" />
<text  x="85.28" y="1391.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (50 samples, 0.25%)</title><rect x="968.1" y="2053" width="2.9" height="15.0" fill="rgb(254,211,54)" rx="2" ry="2" />
<text  x="971.09" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (382 samples, 1.91%)</title><rect x="55.2" y="1221" width="22.5" height="15.0" fill="rgb(243,35,32)" rx="2" ry="2" />
<text  x="58.22" y="1231.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="805" width="0.4" height="15.0" fill="rgb(224,19,53)" rx="2" ry="2" />
<text  x="1189.88" y="815.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 0.17%)</title><rect x="816.5" y="2021" width="2.1" height="15.0" fill="rgb(246,103,18)" rx="2" ry="2" />
<text  x="819.52" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (82 samples, 0.41%)</title><rect x="209.8" y="1813" width="4.8" height="15.0" fill="rgb(228,126,12)" rx="2" ry="2" />
<text  x="212.80" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (31 samples, 0.15%)</title><rect x="810.9" y="2005" width="1.8" height="15.0" fill="rgb(214,164,8)" rx="2" ry="2" />
<text  x="813.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (171 samples, 0.85%)</title><rect x="131.1" y="1749" width="10.1" height="15.0" fill="rgb(239,43,17)" rx="2" ry="2" />
<text  x="134.10" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1621" width="0.4" height="15.0" fill="rgb(249,29,8)" rx="2" ry="2" />
<text  x="1189.88" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="186.9" y="1621" width="0.1" height="15.0" fill="rgb(234,204,42)" rx="2" ry="2" />
<text  x="189.87" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="186.9" y="1429" width="0.1" height="15.0" fill="rgb(239,139,30)" rx="2" ry="2" />
<text  x="189.87" y="1439.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="212.7" y="1669" width="0.2" height="15.0" fill="rgb(254,144,49)" rx="2" ry="2" />
<text  x="215.69" y="1679.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="1989" width="0.4" height="15.0" fill="rgb(243,117,38)" rx="2" ry="2" />
<text  x="518.84" y="1999.5" ></text>
</g>
<g >
<title>__lsan::ResetTagsCb (2 samples, 0.01%)</title><rect x="521.0" y="2037" width="0.1" height="15.0" fill="rgb(211,131,7)" rx="2" ry="2" />
<text  x="523.97" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="186.1" y="1781" width="0.1" height="15.0" fill="rgb(209,80,15)" rx="2" ry="2" />
<text  x="189.10" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.0" y="1589" width="0.1" height="15.0" fill="rgb(229,75,36)" rx="2" ry="2" />
<text  x="161.98" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19 samples, 0.09%)</title><rect x="1186.2" y="2053" width="1.1" height="15.0" fill="rgb(222,20,34)" rx="2" ry="2" />
<text  x="1189.17" y="2063.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.02%)</title><rect x="163.8" y="1541" width="0.3" height="15.0" fill="rgb(254,108,27)" rx="2" ry="2" />
<text  x="166.82" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1205" width="0.1" height="15.0" fill="rgb(207,73,49)" rx="2" ry="2" />
<text  x="57.98" y="1215.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (668 samples, 3.34%)</title><rect x="1146.8" y="2053" width="39.4" height="15.0" fill="rgb(222,86,17)" rx="2" ry="2" />
<text  x="1149.79" y="2063.5" >std..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="185.7" y="1701" width="0.2" height="15.0" fill="rgb(231,126,28)" rx="2" ry="2" />
<text  x="188.75" y="1711.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10 samples, 0.05%)</title><rect x="678.3" y="1749" width="0.6" height="15.0" fill="rgb(240,90,16)" rx="2" ry="2" />
<text  x="681.32" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="965" width="0.2" height="15.0" fill="rgb(211,19,5)" rx="2" ry="2" />
<text  x="1190.29" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="2021" width="0.2" height="15.0" fill="rgb(245,178,29)" rx="2" ry="2" />
<text  x="1190.29" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (7 samples, 0.03%)</title><rect x="196.7" y="1589" width="0.4" height="15.0" fill="rgb(229,204,11)" rx="2" ry="2" />
<text  x="199.71" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="1989" width="0.1" height="15.0" fill="rgb(218,198,3)" rx="2" ry="2" />
<text  x="1189.17" y="1999.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (11 samples, 0.05%)</title><rect x="92.4" y="2021" width="0.6" height="15.0" fill="rgb(230,182,25)" rx="2" ry="2" />
<text  x="95.36" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="101" width="0.4" height="15.0" fill="rgb(241,211,20)" rx="2" ry="2" />
<text  x="1189.93" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="216.9" y="1157" width="0.2" height="15.0" fill="rgb(215,45,30)" rx="2" ry="2" />
<text  x="219.93" y="1167.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::next_byte_in_range (41 samples, 0.20%)</title><rect x="127.1" y="1925" width="2.4" height="15.0" fill="rgb(220,121,1)" rx="2" ry="2" />
<text  x="130.09" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (6 samples, 0.03%)</title><rect x="157.9" y="1829" width="0.3" height="15.0" fill="rgb(252,109,42)" rx="2" ry="2" />
<text  x="160.86" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="757" width="0.4" height="15.0" fill="rgb(225,52,46)" rx="2" ry="2" />
<text  x="1189.88" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1653" width="0.1" height="15.0" fill="rgb(249,166,48)" rx="2" ry="2" />
<text  x="161.98" y="1663.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.03%)</title><rect x="162.6" y="1541" width="0.4" height="15.0" fill="rgb(248,9,0)" rx="2" ry="2" />
<text  x="165.64" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1797" width="0.2" height="15.0" fill="rgb(246,168,32)" rx="2" ry="2" />
<text  x="1190.29" y="1807.5" ></text>
</g>
<g >
<title>handle_mm_fault (32 samples, 0.16%)</title><rect x="508.8" y="1909" width="1.9" height="15.0" fill="rgb(228,79,26)" rx="2" ry="2" />
<text  x="511.82" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (360 samples, 1.80%)</title><rect x="131.1" y="1813" width="21.2" height="15.0" fill="rgb(252,169,16)" rx="2" ry="2" />
<text  x="134.10" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="309" width="0.3" height="15.0" fill="rgb(229,94,34)" rx="2" ry="2" />
<text  x="1189.52" y="319.5" ></text>
</g>
<g >
<title>unmap_vmas (8 samples, 0.04%)</title><rect x="1102.0" y="1941" width="0.5" height="15.0" fill="rgb(250,129,15)" rx="2" ry="2" />
<text  x="1104.98" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="645" width="0.4" height="15.0" fill="rgb(219,16,13)" rx="2" ry="2" />
<text  x="1189.88" y="655.5" ></text>
</g>
<g >
<title>[unknown] (329 samples, 1.64%)</title><rect x="55.2" y="197" width="19.4" height="15.0" fill="rgb(206,8,15)" rx="2" ry="2" />
<text  x="58.22" y="207.5" ></text>
</g>
<g >
<title>[unknown] (462 samples, 2.31%)</title><rect x="55.2" y="1477" width="27.2" height="15.0" fill="rgb(229,42,11)" rx="2" ry="2" />
<text  x="58.16" y="1487.5" >[..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="83.6" y="1557" width="0.2" height="15.0" fill="rgb(213,104,50)" rx="2" ry="2" />
<text  x="86.58" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (431 samples, 2.15%)</title><rect x="189.2" y="1829" width="25.4" height="15.0" fill="rgb(249,198,32)" rx="2" ry="2" />
<text  x="192.23" y="1839.5" >s..</text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (5 samples, 0.02%)</title><rect x="193.8" y="1589" width="0.3" height="15.0" fill="rgb(236,201,48)" rx="2" ry="2" />
<text  x="196.77" y="1599.5" ></text>
</g>
<g >
<title>__clock_gettime (7 samples, 0.03%)</title><rect x="119.3" y="2037" width="0.4" height="15.0" fill="rgb(246,129,49)" rx="2" ry="2" />
<text  x="122.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="853" width="0.4" height="15.0" fill="rgb(252,198,42)" rx="2" ry="2" />
<text  x="1189.88" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.4" y="85" width="0.1" height="15.0" fill="rgb(205,164,29)" rx="2" ry="2" />
<text  x="1190.41" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (433 samples, 2.16%)</title><rect x="189.2" y="1861" width="25.6" height="15.0" fill="rgb(214,203,12)" rx="2" ry="2" />
<text  x="192.23" y="1871.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="725" width="0.2" height="15.0" fill="rgb(220,206,28)" rx="2" ry="2" />
<text  x="1190.29" y="735.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::setConstant (2 samples, 0.01%)</title><rect x="224.2" y="1957" width="0.1" height="15.0" fill="rgb(248,85,16)" rx="2" ry="2" />
<text  x="227.19" y="1967.5" ></text>
</g>
<g >
<title>Annotate (181 samples, 0.90%)</title><rect x="120.0" y="2005" width="10.7" height="15.0" fill="rgb(232,12,10)" rx="2" ry="2" />
<text  x="123.01" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (398 samples, 1.99%)</title><rect x="55.2" y="1285" width="23.5" height="15.0" fill="rgb(226,134,20)" rx="2" ry="2" />
<text  x="58.22" y="1295.5" >[..</text>
</g>
<g >
<title>[unknown] (345 samples, 1.72%)</title><rect x="55.2" y="773" width="20.4" height="15.0" fill="rgb(234,51,29)" rx="2" ry="2" />
<text  x="58.22" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="1797" width="0.4" height="15.0" fill="rgb(249,221,25)" rx="2" ry="2" />
<text  x="1189.88" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="277" width="0.2" height="15.0" fill="rgb(247,121,50)" rx="2" ry="2" />
<text  x="1190.35" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.04%)</title><rect x="1186.3" y="1973" width="0.5" height="15.0" fill="rgb(210,200,41)" rx="2" ry="2" />
<text  x="1189.29" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (71 samples, 0.35%)</title><rect x="131.7" y="1637" width="4.2" height="15.0" fill="rgb(233,29,38)" rx="2" ry="2" />
<text  x="134.74" y="1647.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (93 samples, 0.46%)</title><rect x="724.6" y="1877" width="5.5" height="15.0" fill="rgb(245,222,49)" rx="2" ry="2" />
<text  x="727.60" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1237" width="0.3" height="15.0" fill="rgb(247,138,9)" rx="2" ry="2" />
<text  x="1189.52" y="1247.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="86.1" y="1685" width="0.1" height="15.0" fill="rgb(212,25,46)" rx="2" ry="2" />
<text  x="89.05" y="1695.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.8" y="1973" width="0.4" height="15.0" fill="rgb(226,116,36)" rx="2" ry="2" />
<text  x="518.84" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1573" width="0.1" height="15.0" fill="rgb(213,121,52)" rx="2" ry="2" />
<text  x="161.98" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="293" width="0.2" height="15.0" fill="rgb(233,38,17)" rx="2" ry="2" />
<text  x="1190.35" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (98 samples, 0.49%)</title><rect x="203.6" y="1765" width="5.8" height="15.0" fill="rgb(217,15,38)" rx="2" ry="2" />
<text  x="206.61" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (374 samples, 1.87%)</title><rect x="55.2" y="1189" width="22.1" height="15.0" fill="rgb(248,141,41)" rx="2" ry="2" />
<text  x="58.22" y="1199.5" >[..</text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="99.2" y="2021" width="0.1" height="15.0" fill="rgb(250,20,34)" rx="2" ry="2" />
<text  x="102.20" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="216.6" y="1157" width="0.2" height="15.0" fill="rgb(226,229,6)" rx="2" ry="2" />
<text  x="219.64" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (61 samples, 0.30%)</title><rect x="807.0" y="2021" width="3.6" height="15.0" fill="rgb(248,31,39)" rx="2" ry="2" />
<text  x="810.02" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1765" width="0.2" height="15.0" fill="rgb(229,1,28)" rx="2" ry="2" />
<text  x="1190.29" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="186.7" y="1861" width="0.6" height="15.0" fill="rgb(223,36,54)" rx="2" ry="2" />
<text  x="189.75" y="1871.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9 samples, 0.04%)</title><rect x="91.8" y="2005" width="0.6" height="15.0" fill="rgb(214,134,44)" rx="2" ry="2" />
<text  x="94.83" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (7 samples, 0.03%)</title><rect x="159.5" y="1669" width="0.4" height="15.0" fill="rgb(213,146,14)" rx="2" ry="2" />
<text  x="162.45" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="79.1" y="1317" width="0.1" height="15.0" fill="rgb(223,134,13)" rx="2" ry="2" />
<text  x="82.10" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1733" width="0.2" height="15.0" fill="rgb(207,152,36)" rx="2" ry="2" />
<text  x="57.98" y="1743.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="188.8" y="1957" width="0.1" height="15.0" fill="rgb(237,58,35)" rx="2" ry="2" />
<text  x="191.81" y="1967.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="606.2" y="1861" width="0.2" height="15.0" fill="rgb(221,145,34)" rx="2" ry="2" />
<text  x="609.22" y="1871.5" ></text>
</g>
<g >
<title>get_vma_policy.part.36 (2 samples, 0.01%)</title><rect x="26.7" y="1957" width="0.1" height="15.0" fill="rgb(207,194,31)" rx="2" ry="2" />
<text  x="29.68" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (87 samples, 0.43%)</title><rect x="146.6" y="1685" width="5.1" height="15.0" fill="rgb(228,34,43)" rx="2" ry="2" />
<text  x="149.60" y="1695.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.01%)</title><rect x="679.0" y="1765" width="0.1" height="15.0" fill="rgb(247,37,3)" rx="2" ry="2" />
<text  x="681.97" y="1775.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="653.1" y="1765" width="0.1" height="15.0" fill="rgb(223,191,27)" rx="2" ry="2" />
<text  x="656.09" y="1775.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (1,951 samples, 9.75%)</title><rect x="217.3" y="1989" width="115.1" height="15.0" fill="rgb(220,64,4)" rx="2" ry="2" />
<text  x="220.35" y="1999.5" >TFastTextEmbed..</text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (46 samples, 0.23%)</title><rect x="965.4" y="2053" width="2.7" height="15.0" fill="rgb(220,219,30)" rx="2" ry="2" />
<text  x="968.38" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.4" y="1685" width="0.4" height="15.0" fill="rgb(249,138,35)" rx="2" ry="2" />
<text  x="1189.40" y="1695.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.01%)</title><rect x="26.8" y="1909" width="0.2" height="15.0" fill="rgb(224,210,4)" rx="2" ry="2" />
<text  x="29.80" y="1919.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.01%)</title><rect x="130.6" y="1829" width="0.1" height="15.0" fill="rgb(223,17,19)" rx="2" ry="2" />
<text  x="133.56" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (30 samples, 0.15%)</title><rect x="875.8" y="2037" width="1.7" height="15.0" fill="rgb(221,123,39)" rx="2" ry="2" />
<text  x="878.77" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (30 samples, 0.15%)</title><rect x="329.7" y="1973" width="1.8" height="15.0" fill="rgb(236,64,12)" rx="2" ry="2" />
<text  x="332.72" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (71 samples, 0.35%)</title><rect x="199.4" y="1765" width="4.2" height="15.0" fill="rgb(243,103,12)" rx="2" ry="2" />
<text  x="202.37" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="78.8" y="1285" width="0.1" height="15.0" fill="rgb(212,183,19)" rx="2" ry="2" />
<text  x="81.80" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (198 samples, 0.99%)</title><rect x="159.5" y="1733" width="11.6" height="15.0" fill="rgb(222,133,46)" rx="2" ry="2" />
<text  x="162.45" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1397" width="0.3" height="15.0" fill="rgb(233,63,26)" rx="2" ry="2" />
<text  x="1189.52" y="1407.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.01%)</title><rect x="174.0" y="1589" width="0.1" height="15.0" fill="rgb(232,41,16)" rx="2" ry="2" />
<text  x="176.96" y="1599.5" ></text>
</g>
<g >
<title>__pthread_getspecific (6 samples, 0.03%)</title><rect x="144.5" y="1605" width="0.4" height="15.0" fill="rgb(241,113,50)" rx="2" ry="2" />
<text  x="147.54" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MaybeReleaseToOS (2 samples, 0.01%)</title><rect x="1026.0" y="2053" width="0.2" height="15.0" fill="rgb(220,29,24)" rx="2" ry="2" />
<text  x="1029.04" y="2063.5" ></text>
</g>
<g >
<title>__asan_memset@plt (2 samples, 0.01%)</title><rect x="580.8" y="1893" width="0.1" height="15.0" fill="rgb(220,65,26)" rx="2" ry="2" />
<text  x="583.81" y="1903.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.01%)</title><rect x="213.5" y="1669" width="0.1" height="15.0" fill="rgb(216,35,48)" rx="2" ry="2" />
<text  x="216.46" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="173.7" y="1589" width="0.3" height="15.0" fill="rgb(209,110,14)" rx="2" ry="2" />
<text  x="176.72" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="74.9" y="485" width="0.1" height="15.0" fill="rgb(224,13,42)" rx="2" ry="2" />
<text  x="77.85" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.04%)</title><rect x="1186.3" y="1909" width="0.5" height="15.0" fill="rgb(233,197,18)" rx="2" ry="2" />
<text  x="1189.29" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (70 samples, 0.35%)</title><rect x="199.4" y="1717" width="4.2" height="15.0" fill="rgb(208,21,23)" rx="2" ry="2" />
<text  x="202.42" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="565" width="0.2" height="15.0" fill="rgb(227,106,52)" rx="2" ry="2" />
<text  x="1190.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1445" width="0.3" height="15.0" fill="rgb(243,44,40)" rx="2" ry="2" />
<text  x="1189.52" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1397" width="0.1" height="15.0" fill="rgb(224,1,27)" rx="2" ry="2" />
<text  x="189.87" y="1407.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="206.7" y="1637" width="0.1" height="15.0" fill="rgb(217,86,1)" rx="2" ry="2" />
<text  x="209.68" y="1647.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="184.7" y="1653" width="0.2" height="15.0" fill="rgb(240,200,52)" rx="2" ry="2" />
<text  x="187.69" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1781" width="0.2" height="15.0" fill="rgb(224,122,34)" rx="2" ry="2" />
<text  x="1190.29" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (86 samples, 0.43%)</title><rect x="136.1" y="1701" width="5.1" height="15.0" fill="rgb(228,11,23)" rx="2" ry="2" />
<text  x="139.11" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="917" width="0.3" height="15.0" fill="rgb(251,171,51)" rx="2" ry="2" />
<text  x="1189.52" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1413" width="0.2" height="15.0" fill="rgb(242,168,20)" rx="2" ry="2" />
<text  x="1190.29" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1733" width="0.1" height="15.0" fill="rgb(222,121,14)" rx="2" ry="2" />
<text  x="161.98" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="709" width="0.4" height="15.0" fill="rgb(235,44,28)" rx="2" ry="2" />
<text  x="1189.88" y="719.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="85" width="19.3" height="15.0" fill="rgb(251,70,24)" rx="2" ry="2" />
<text  x="58.22" y="95.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.02%)</title><rect x="198.1" y="1589" width="0.3" height="15.0" fill="rgb(248,229,41)" rx="2" ry="2" />
<text  x="201.07" y="1599.5" ></text>
</g>
<g >
<title>syscall (18 samples, 0.09%)</title><rect x="29.6" y="2005" width="1.0" height="15.0" fill="rgb(220,128,4)" rx="2" ry="2" />
<text  x="32.57" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.0" y="1045" width="0.1" height="15.0" fill="rgb(233,167,18)" rx="2" ry="2" />
<text  x="57.98" y="1055.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (3 samples, 0.01%)</title><rect x="130.2" y="1973" width="0.1" height="15.0" fill="rgb(230,206,33)" rx="2" ry="2" />
<text  x="133.15" y="1983.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (5 samples, 0.02%)</title><rect x="521.2" y="1893" width="0.3" height="15.0" fill="rgb(218,136,24)" rx="2" ry="2" />
<text  x="524.21" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (2 samples, 0.01%)</title><rect x="129.4" y="1893" width="0.1" height="15.0" fill="rgb(206,51,48)" rx="2" ry="2" />
<text  x="132.39" y="1903.5" ></text>
</g>
<g >
<title>do_mmap (19 samples, 0.09%)</title><rect x="764.9" y="1941" width="1.1" height="15.0" fill="rgb(251,193,19)" rx="2" ry="2" />
<text  x="767.87" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (424 samples, 2.12%)</title><rect x="55.2" y="1365" width="25.0" height="15.0" fill="rgb(215,202,34)" rx="2" ry="2" />
<text  x="58.22" y="1375.5" >[..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (5 samples, 0.02%)</title><rect x="180.9" y="1749" width="0.3" height="15.0" fill="rgb(218,129,37)" rx="2" ry="2" />
<text  x="183.91" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="186.9" y="1445" width="0.1" height="15.0" fill="rgb(245,80,43)" rx="2" ry="2" />
<text  x="189.87" y="1455.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="499.9" y="1813" width="0.1" height="15.0" fill="rgb(242,223,3)" rx="2" ry="2" />
<text  x="502.92" y="1823.5" ></text>
</g>
<g >
<title>Preprocess (2 samples, 0.01%)</title><rect x="43.7" y="2037" width="0.1" height="15.0" fill="rgb(242,101,10)" rx="2" ry="2" />
<text  x="46.72" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (90 samples, 0.45%)</title><rect x="159.9" y="1605" width="5.3" height="15.0" fill="rgb(240,216,43)" rx="2" ry="2" />
<text  x="162.87" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.01%)</title><rect x="169.7" y="1573" width="0.2" height="15.0" fill="rgb(246,64,29)" rx="2" ry="2" />
<text  x="172.71" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (94 samples, 0.47%)</title><rect x="152.3" y="1781" width="5.6" height="15.0" fill="rgb(224,202,22)" rx="2" ry="2" />
<text  x="155.32" y="1791.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (6 samples, 0.03%)</title><rect x="517.1" y="2005" width="0.3" height="15.0" fill="rgb(249,114,42)" rx="2" ry="2" />
<text  x="520.08" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (426 samples, 2.13%)</title><rect x="55.2" y="1381" width="25.1" height="15.0" fill="rgb(234,20,35)" rx="2" ry="2" />
<text  x="58.22" y="1391.5" >[..</text>
</g>
<g >
<title>ComputeClusterWeight (969 samples, 4.84%)</title><rect x="130.7" y="1989" width="57.2" height="15.0" fill="rgb(254,198,26)" rx="2" ry="2" />
<text  x="133.74" y="1999.5" >Comput..</text>
</g>
<g >
<title>__asan::PoisonShadow (34 samples, 0.17%)</title><rect x="116.9" y="2037" width="2.1" height="15.0" fill="rgb(231,2,28)" rx="2" ry="2" />
<text  x="119.95" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (9 samples, 0.04%)</title><rect x="215.1" y="1861" width="0.5" height="15.0" fill="rgb(241,127,0)" rx="2" ry="2" />
<text  x="218.11" y="1871.5" ></text>
</g>
<g >
<title>Summarize (2,528 samples, 12.63%)</title><rect x="188.0" y="2005" width="149.1" height="15.0" fill="rgb(224,82,31)" rx="2" ry="2" />
<text  x="191.05" y="2015.5" >Summarize</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="597" width="0.4" height="15.0" fill="rgb(239,110,20)" rx="2" ry="2" />
<text  x="1189.88" y="607.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (9 samples, 0.04%)</title><rect x="591.6" y="1877" width="0.5" height="15.0" fill="rgb(207,11,6)" rx="2" ry="2" />
<text  x="594.60" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="216.6" y="1253" width="0.2" height="15.0" fill="rgb(241,16,48)" rx="2" ry="2" />
<text  x="219.58" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="146.4" y="1717" width="0.1" height="15.0" fill="rgb(223,219,3)" rx="2" ry="2" />
<text  x="149.42" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.38%)</title><rect x="189.6" y="1653" width="4.5" height="15.0" fill="rgb(213,64,46)" rx="2" ry="2" />
<text  x="192.58" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="373" width="19.6" height="15.0" fill="rgb(227,104,2)" rx="2" ry="2" />
<text  x="58.22" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1141" width="0.4" height="15.0" fill="rgb(251,110,48)" rx="2" ry="2" />
<text  x="1189.88" y="1151.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::setConstant (4 samples, 0.02%)</title><rect x="382.9" y="1941" width="0.2" height="15.0" fill="rgb(245,40,49)" rx="2" ry="2" />
<text  x="385.90" y="1951.5" ></text>
</g>
<g >
<title>page_fault (8 samples, 0.04%)</title><rect x="656.2" y="1861" width="0.5" height="15.0" fill="rgb(214,64,23)" rx="2" ry="2" />
<text  x="659.21" y="1871.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (3 samples, 0.01%)</title><rect x="766.3" y="1989" width="0.2" height="15.0" fill="rgb(241,87,14)" rx="2" ry="2" />
<text  x="769.28" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4 samples, 0.02%)</title><rect x="752.1" y="1893" width="0.3" height="15.0" fill="rgb(229,190,38)" rx="2" ry="2" />
<text  x="755.14" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (6 samples, 0.03%)</title><rect x="490.9" y="1909" width="0.4" height="15.0" fill="rgb(223,170,8)" rx="2" ry="2" />
<text  x="493.90" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1013" width="0.4" height="15.0" fill="rgb(250,26,27)" rx="2" ry="2" />
<text  x="1189.88" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="437" width="0.2" height="15.0" fill="rgb(245,198,54)" rx="2" ry="2" />
<text  x="1190.35" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (197 samples, 0.98%)</title><rect x="30.6" y="2037" width="11.6" height="15.0" fill="rgb(249,106,22)" rx="2" ry="2" />
<text  x="33.63" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.01%)</title><rect x="80.9" y="1397" width="0.1" height="15.0" fill="rgb(232,53,48)" rx="2" ry="2" />
<text  x="83.86" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="187.0" y="1685" width="0.3" height="15.0" fill="rgb(216,168,0)" rx="2" ry="2" />
<text  x="189.99" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="152.1" y="1765" width="0.1" height="15.0" fill="rgb(254,151,52)" rx="2" ry="2" />
<text  x="155.08" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="117" width="0.3" height="15.0" fill="rgb(231,79,28)" rx="2" ry="2" />
<text  x="1189.52" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (7 samples, 0.03%)</title><rect x="186.1" y="1813" width="0.4" height="15.0" fill="rgb(243,206,51)" rx="2" ry="2" />
<text  x="189.10" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1749" width="0.2" height="15.0" fill="rgb(220,227,34)" rx="2" ry="2" />
<text  x="1190.29" y="1759.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (1,690 samples, 8.44%)</title><rect x="635.6" y="1893" width="99.6" height="15.0" fill="rgb(235,112,9)" rx="2" ry="2" />
<text  x="638.58" y="1903.5" >onmt::Tokeni..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1461" width="0.3" height="15.0" fill="rgb(215,225,3)" rx="2" ry="2" />
<text  x="219.46" y="1471.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (6 samples, 0.03%)</title><rect x="500.2" y="1845" width="0.3" height="15.0" fill="rgb(214,171,4)" rx="2" ry="2" />
<text  x="503.16" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="813.3" y="2021" width="0.1" height="15.0" fill="rgb(215,59,16)" rx="2" ry="2" />
<text  x="816.33" y="2031.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="140.5" y="1589" width="0.1" height="15.0" fill="rgb(240,98,47)" rx="2" ry="2" />
<text  x="143.47" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (433 samples, 2.16%)</title><rect x="189.2" y="1845" width="25.6" height="15.0" fill="rgb(249,91,27)" rx="2" ry="2" />
<text  x="192.23" y="1855.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (454 samples, 2.27%)</title><rect x="131.1" y="1829" width="26.8" height="15.0" fill="rgb(247,89,30)" rx="2" ry="2" />
<text  x="134.10" y="1839.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3 samples, 0.01%)</title><rect x="43.2" y="2021" width="0.2" height="15.0" fill="rgb(212,131,39)" rx="2" ry="2" />
<text  x="46.19" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="517.3" y="1749" width="0.1" height="15.0" fill="rgb(214,41,27)" rx="2" ry="2" />
<text  x="520.31" y="1759.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, 0&gt; (2 samples, 0.01%)</title><rect x="540.5" y="1957" width="0.2" height="15.0" fill="rgb(240,87,52)" rx="2" ry="2" />
<text  x="543.54" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="94.2" y="2021" width="0.2" height="15.0" fill="rgb(225,50,6)" rx="2" ry="2" />
<text  x="97.25" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="145.5" y="1605" width="0.5" height="15.0" fill="rgb(234,17,40)" rx="2" ry="2" />
<text  x="148.54" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="187.0" y="1285" width="0.3" height="15.0" fill="rgb(217,30,7)" rx="2" ry="2" />
<text  x="190.04" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="187.0" y="1701" width="0.3" height="15.0" fill="rgb(229,95,36)" rx="2" ry="2" />
<text  x="189.99" y="1711.5" ></text>
</g>
<g >
<title>smp_call_function_single (2 samples, 0.01%)</title><rect x="84.1" y="1365" width="0.1" height="15.0" fill="rgb(207,96,35)" rx="2" ry="2" />
<text  x="87.11" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (332 samples, 1.66%)</title><rect x="55.2" y="309" width="19.6" height="15.0" fill="rgb(209,148,38)" rx="2" ry="2" />
<text  x="58.22" y="319.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.01%)</title><rect x="207.4" y="1637" width="0.2" height="15.0" fill="rgb(231,169,34)" rx="2" ry="2" />
<text  x="210.44" y="1647.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (23 samples, 0.11%)</title><rect x="538.4" y="1909" width="1.3" height="15.0" fill="rgb(206,131,21)" rx="2" ry="2" />
<text  x="541.36" y="1919.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.02%)</title><rect x="174.8" y="1589" width="0.3" height="15.0" fill="rgb(245,71,51)" rx="2" ry="2" />
<text  x="177.78" y="1599.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (8 samples, 0.04%)</title><rect x="54.5" y="1893" width="0.4" height="15.0" fill="rgb(209,143,39)" rx="2" ry="2" />
<text  x="57.45" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (21 samples, 0.10%)</title><rect x="872.6" y="1973" width="1.3" height="15.0" fill="rgb(221,198,28)" rx="2" ry="2" />
<text  x="875.64" y="1983.5" ></text>
</g>
<g >
<title>new_sync_read (2 samples, 0.01%)</title><rect x="119.8" y="1925" width="0.1" height="15.0" fill="rgb(216,125,40)" rx="2" ry="2" />
<text  x="122.78" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (509 samples, 2.54%)</title><rect x="55.2" y="1637" width="30.0" height="15.0" fill="rgb(207,195,54)" rx="2" ry="2" />
<text  x="58.16" y="1647.5" >[u..</text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.01%)</title><rect x="314.3" y="1909" width="0.1" height="15.0" fill="rgb(253,83,52)" rx="2" ry="2" />
<text  x="317.27" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (460 samples, 2.30%)</title><rect x="189.0" y="1941" width="27.2" height="15.0" fill="rgb(213,98,35)" rx="2" ry="2" />
<text  x="192.05" y="1951.5" >s..</text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (8 samples, 0.04%)</title><rect x="93.0" y="2021" width="0.5" height="15.0" fill="rgb(235,181,54)" rx="2" ry="2" />
<text  x="96.01" y="2031.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="594.6" y="1877" width="0.1" height="15.0" fill="rgb(230,165,28)" rx="2" ry="2" />
<text  x="597.61" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::external_constructor&lt; (3 samples, 0.01%)</title><rect x="121.7" y="1909" width="0.2" height="15.0" fill="rgb(211,226,40)" rx="2" ry="2" />
<text  x="124.72" y="1919.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.02%)</title><rect x="121.4" y="1973" width="0.3" height="15.0" fill="rgb(212,156,49)" rx="2" ry="2" />
<text  x="124.37" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (349 samples, 1.74%)</title><rect x="55.2" y="1045" width="20.6" height="15.0" fill="rgb(205,197,33)" rx="2" ry="2" />
<text  x="58.22" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1541" width="0.3" height="15.0" fill="rgb(228,106,4)" rx="2" ry="2" />
<text  x="219.82" y="1551.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="85.0" y="1509" width="0.1" height="15.0" fill="rgb(225,216,34)" rx="2" ry="2" />
<text  x="87.99" y="1519.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="152.0" y="1733" width="0.1" height="15.0" fill="rgb(223,74,40)" rx="2" ry="2" />
<text  x="154.97" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.8" y="1637" width="0.3" height="15.0" fill="rgb(220,19,2)" rx="2" ry="2" />
<text  x="219.76" y="1647.5" ></text>
</g>
<g >
<title>__do_page_fault (5 samples, 0.02%)</title><rect x="730.1" y="1845" width="0.3" height="15.0" fill="rgb(211,37,42)" rx="2" ry="2" />
<text  x="733.09" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (4 samples, 0.02%)</title><rect x="1119.4" y="2053" width="0.3" height="15.0" fill="rgb(253,126,52)" rx="2" ry="2" />
<text  x="1122.43" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1733" width="0.2" height="15.0" fill="rgb(218,147,9)" rx="2" ry="2" />
<text  x="1190.29" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="613" width="0.3" height="15.0" fill="rgb(227,125,38)" rx="2" ry="2" />
<text  x="1189.52" y="623.5" ></text>
</g>
<g >
<title>handle_mm_fault (21 samples, 0.10%)</title><rect x="53.7" y="1973" width="1.3" height="15.0" fill="rgb(212,121,15)" rx="2" ry="2" />
<text  x="56.75" y="1983.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (6 samples, 0.03%)</title><rect x="693.9" y="1765" width="0.4" height="15.0" fill="rgb(229,184,6)" rx="2" ry="2" />
<text  x="696.95" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (82 samples, 0.41%)</title><rect x="194.3" y="1717" width="4.8" height="15.0" fill="rgb(209,175,54)" rx="2" ry="2" />
<text  x="197.30" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (6 samples, 0.03%)</title><rect x="76.4" y="1125" width="0.3" height="15.0" fill="rgb(252,170,23)" rx="2" ry="2" />
<text  x="79.38" y="1135.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="53.9" y="1941" width="0.2" height="15.0" fill="rgb(240,167,15)" rx="2" ry="2" />
<text  x="56.86" y="1951.5" ></text>
</g>
<g >
<title>do_mmap (19 samples, 0.09%)</title><rect x="1100.5" y="1957" width="1.1" height="15.0" fill="rgb(233,94,2)" rx="2" ry="2" />
<text  x="1103.51" y="1967.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (8 samples, 0.04%)</title><rect x="1102.0" y="2021" width="0.5" height="15.0" fill="rgb(220,147,34)" rx="2" ry="2" />
<text  x="1104.98" y="2031.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (3 samples, 0.01%)</title><rect x="332.4" y="1989" width="0.1" height="15.0" fill="rgb(214,142,39)" rx="2" ry="2" />
<text  x="335.37" y="1999.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (293 samples, 1.46%)</title><rect x="224.7" y="1957" width="17.2" height="15.0" fill="rgb(225,149,13)" rx="2" ry="2" />
<text  x="227.66" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char const  (3 samples, 0.01%)</title><rect x="515.6" y="1989" width="0.2" height="15.0" fill="rgb(250,36,9)" rx="2" ry="2" />
<text  x="518.60" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.0" y="1701" width="0.1" height="15.0" fill="rgb(243,179,53)" rx="2" ry="2" />
<text  x="161.98" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="216.8" y="1557" width="0.3" height="15.0" fill="rgb(230,164,28)" rx="2" ry="2" />
<text  x="219.82" y="1567.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="1102.2" y="1845" width="0.1" height="15.0" fill="rgb(249,153,42)" rx="2" ry="2" />
<text  x="1105.21" y="1855.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="195.9" y="1605" width="0.2" height="15.0" fill="rgb(240,14,34)" rx="2" ry="2" />
<text  x="198.95" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (242 samples, 1.21%)</title><rect x="189.3" y="1781" width="14.3" height="15.0" fill="rgb(225,199,41)" rx="2" ry="2" />
<text  x="192.28" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="216.5" y="1477" width="0.3" height="15.0" fill="rgb(215,74,37)" rx="2" ry="2" />
<text  x="219.46" y="1487.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1845" width="0.2" height="15.0" fill="rgb(206,42,47)" rx="2" ry="2" />
<text  x="57.98" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.3" y="1957" width="0.2" height="15.0" fill="rgb(237,64,2)" rx="2" ry="2" />
<text  x="1190.29" y="1967.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="580.6" y="1893" width="0.2" height="15.0" fill="rgb(250,100,30)" rx="2" ry="2" />
<text  x="583.57" y="1903.5" ></text>
</g>
<g >
<title>TDocument::TDocument (6 samples, 0.03%)</title><rect x="337.1" y="2005" width="0.3" height="15.0" fill="rgb(250,185,31)" rx="2" ry="2" />
<text  x="340.09" y="2015.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.01%)</title><rect x="478.2" y="1893" width="0.1" height="15.0" fill="rgb(235,200,18)" rx="2" ry="2" />
<text  x="481.17" y="1903.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (73 samples, 0.36%)</title><rect x="100.7" y="2037" width="4.3" height="15.0" fill="rgb(219,181,34)" rx="2" ry="2" />
<text  x="103.67" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.01%)</title><rect x="1187.3" y="309" width="0.2" height="15.0" fill="rgb(232,221,3)" rx="2" ry="2" />
<text  x="1190.35" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="1573" width="0.4" height="15.0" fill="rgb(254,22,6)" rx="2" ry="2" />
<text  x="1189.88" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="216.8" y="1333" width="0.3" height="15.0" fill="rgb(254,206,10)" rx="2" ry="2" />
<text  x="219.82" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.63%)</title><rect x="55.2" y="53" width="19.3" height="15.0" fill="rgb(251,125,41)" rx="2" ry="2" />
<text  x="58.22" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.4" y="1733" width="0.4" height="15.0" fill="rgb(251,179,35)" rx="2" ry="2" />
<text  x="1189.40" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (17 samples, 0.08%)</title><rect x="214.8" y="1893" width="1.0" height="15.0" fill="rgb(245,112,47)" rx="2" ry="2" />
<text  x="217.81" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="136.4" y="1621" width="0.1" height="15.0" fill="rgb(224,26,40)" rx="2" ry="2" />
<text  x="139.40" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (49 samples, 0.24%)</title><rect x="137.8" y="1605" width="2.8" height="15.0" fill="rgb(215,216,2)" rx="2" ry="2" />
<text  x="140.76" y="1615.5" ></text>
</g>
<g >
<title>__strxfrm_l (2 samples, 0.01%)</title><rect x="1178.7" y="2037" width="0.2" height="15.0" fill="rgb(218,50,44)" rx="2" ry="2" />
<text  x="1181.74" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="187.2" y="1061" width="0.1" height="15.0" fill="rgb(235,214,23)" rx="2" ry="2" />
<text  x="190.16" y="1071.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.01%)</title><rect x="478.2" y="1941" width="0.1" height="15.0" fill="rgb(254,173,24)" rx="2" ry="2" />
<text  x="481.17" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="1119.1" y="2053" width="0.1" height="15.0" fill="rgb(227,56,35)" rx="2" ry="2" />
<text  x="1122.08" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (68 samples, 0.34%)</title><rect x="33.5" y="2021" width="4.0" height="15.0" fill="rgb(234,205,13)" rx="2" ry="2" />
<text  x="36.46" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.02%)</title><rect x="1186.5" y="1349" width="0.3" height="15.0" fill="rgb(244,6,45)" rx="2" ry="2" />
<text  x="1189.52" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (92 samples, 0.46%)</title><rect x="152.3" y="1765" width="5.4" height="15.0" fill="rgb(231,31,51)" rx="2" ry="2" />
<text  x="155.32" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.01%)</title><rect x="149.0" y="1637" width="0.1" height="15.0" fill="rgb(236,198,4)" rx="2" ry="2" />
<text  x="151.96" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="437" width="0.4" height="15.0" fill="rgb(246,180,10)" rx="2" ry="2" />
<text  x="1189.88" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="629" width="0.4" height="15.0" fill="rgb(246,181,16)" rx="2" ry="2" />
<text  x="1189.88" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.8" y="2037" width="0.5" height="15.0" fill="rgb(225,34,34)" rx="2" ry="2" />
<text  x="1189.82" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (3 samples, 0.01%)</title><rect x="121.7" y="1893" width="0.2" height="15.0" fill="rgb(222,137,30)" rx="2" ry="2" />
<text  x="124.72" y="1903.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="682.7" y="1861" width="0.1" height="15.0" fill="rgb(226,151,43)" rx="2" ry="2" />
<text  x="685.69" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (4 samples, 0.02%)</title><rect x="593.2" y="1877" width="0.3" height="15.0" fill="rgb(210,219,20)" rx="2" ry="2" />
<text  x="596.25" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;ENewsCategory, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (3 samples, 0.01%)</title><rect x="540.4" y="1941" width="0.1" height="15.0" fill="rgb(217,93,33)" rx="2" ry="2" />
<text  x="543.37" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (463 samples, 2.31%)</title><rect x="131.1" y="1893" width="27.3" height="15.0" fill="rgb(222,131,54)" rx="2" ry="2" />
<text  x="134.10" y="1903.5" >s..</text>
</g>
<g >
<title>__lsan::MarkIndirectlyLeakedCb (4 samples, 0.02%)</title><rect x="520.5" y="2037" width="0.2" height="15.0" fill="rgb(232,130,38)" rx="2" ry="2" />
<text  x="523.50" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="171.0" y="1605" width="0.1" height="15.0" fill="rgb(250,202,26)" rx="2" ry="2" />
<text  x="174.01" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="901" width="0.3" height="15.0" fill="rgb(220,4,3)" rx="2" ry="2" />
<text  x="1189.52" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.04%)</title><rect x="1186.3" y="2021" width="0.5" height="15.0" fill="rgb(247,11,9)" rx="2" ry="2" />
<text  x="1189.29" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="181" width="0.4" height="15.0" fill="rgb(251,225,8)" rx="2" ry="2" />
<text  x="1189.93" y="191.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="437" width="19.7" height="15.0" fill="rgb(254,206,26)" rx="2" ry="2" />
<text  x="58.22" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.23%)</title><rect x="200.6" y="1621" width="2.7" height="15.0" fill="rgb(206,104,4)" rx="2" ry="2" />
<text  x="203.60" y="1631.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="802.2" y="1989" width="0.1" height="15.0" fill="rgb(219,160,44)" rx="2" ry="2" />
<text  x="805.19" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (246 samples, 1.23%)</title><rect x="525.3" y="1925" width="14.5" height="15.0" fill="rgb(224,137,43)" rx="2" ry="2" />
<text  x="528.27" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (344 samples, 1.72%)</title><rect x="55.2" y="741" width="20.3" height="15.0" fill="rgb(253,146,54)" rx="2" ry="2" />
<text  x="58.22" y="751.5" ></text>
</g>
<g >
<title>__asan_memcpy (6 samples, 0.03%)</title><rect x="168.5" y="1573" width="0.4" height="15.0" fill="rgb(225,116,4)" rx="2" ry="2" />
<text  x="171.53" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="133" width="0.3" height="15.0" fill="rgb(230,29,29)" rx="2" ry="2" />
<text  x="1189.52" y="143.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="143.9" y="1605" width="0.2" height="15.0" fill="rgb(209,194,30)" rx="2" ry="2" />
<text  x="146.95" y="1615.5" ></text>
</g>
<g >
<title>page_fault (34 samples, 0.17%)</title><rect x="692.4" y="1845" width="2.0" height="15.0" fill="rgb(222,69,33)" rx="2" ry="2" />
<text  x="695.41" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="213" width="0.4" height="15.0" fill="rgb(242,65,2)" rx="2" ry="2" />
<text  x="1189.93" y="223.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="83.9" y="1557" width="0.1" height="15.0" fill="rgb(234,43,32)" rx="2" ry="2" />
<text  x="86.87" y="1567.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.02%)</title><rect x="130.4" y="1941" width="0.3" height="15.0" fill="rgb(232,179,3)" rx="2" ry="2" />
<text  x="133.45" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (74 samples, 0.37%)</title><rect x="141.8" y="1637" width="4.4" height="15.0" fill="rgb(214,134,19)" rx="2" ry="2" />
<text  x="144.83" y="1647.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (4 samples, 0.02%)</title><rect x="383.1" y="1941" width="0.3" height="15.0" fill="rgb(230,34,24)" rx="2" ry="2" />
<text  x="386.13" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.01%)</title><rect x="55.0" y="1653" width="0.2" height="15.0" fill="rgb(213,99,27)" rx="2" ry="2" />
<text  x="57.98" y="1663.5" ></text>
</g>
<g >
<title>RunFasttextClf (263 samples, 1.31%)</title><rect x="524.7" y="1957" width="15.5" height="15.0" fill="rgb(237,49,41)" rx="2" ry="2" />
<text  x="527.74" y="1967.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.01%)</title><rect x="680.7" y="1861" width="0.2" height="15.0" fill="rgb(237,178,41)" rx="2" ry="2" />
<text  x="683.68" y="1871.5" ></text>
</g>
<g >
<title>unmap_region (3 samples, 0.01%)</title><rect x="766.3" y="1941" width="0.2" height="15.0" fill="rgb(216,82,27)" rx="2" ry="2" />
<text  x="769.28" y="1951.5" ></text>
</g>
<g >
<title>__asan_memcpy (4 samples, 0.02%)</title><rect x="197.2" y="1589" width="0.2" height="15.0" fill="rgb(209,68,6)" rx="2" ry="2" />
<text  x="200.18" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (125 samples, 0.62%)</title><rect x="609.5" y="1861" width="7.3" height="15.0" fill="rgb(207,112,28)" rx="2" ry="2" />
<text  x="612.46" y="1871.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.02%)</title><rect x="150.4" y="1637" width="0.3" height="15.0" fill="rgb(247,104,40)" rx="2" ry="2" />
<text  x="153.43" y="1647.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (7 samples, 0.03%)</title><rect x="521.1" y="1957" width="0.5" height="15.0" fill="rgb(218,114,47)" rx="2" ry="2" />
<text  x="524.15" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.03%)</title><rect x="1186.9" y="677" width="0.4" height="15.0" fill="rgb(230,15,0)" rx="2" ry="2" />
<text  x="1189.88" y="687.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.02%)</title><rect x="162.0" y="1541" width="0.3" height="15.0" fill="rgb(213,158,13)" rx="2" ry="2" />
<text  x="164.99" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (333 samples, 1.66%)</title><rect x="55.2" y="421" width="19.7" height="15.0" fill="rgb(227,111,24)" rx="2" ry="2" />
<text  x="58.22" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (66 samples, 0.33%)</title><rect x="166.8" y="1589" width="3.9" height="15.0" fill="rgb(241,35,7)" rx="2" ry="2" />
<text  x="169.82" y="1599.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="84.1" y="1573" width="0.1" height="15.0" fill="rgb(230,25,53)" rx="2" ry="2" />
<text  x="87.11" y="1583.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.2" y="1973" width="0.2" height="15.0" fill="rgb(205,215,8)" rx="2" ry="2" />
<text  x="520.20" y="1983.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (10 samples, 0.05%)</title><rect x="592.5" y="1877" width="0.6" height="15.0" fill="rgb(253,111,41)" rx="2" ry="2" />
<text  x="595.54" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (51 samples, 0.25%)</title><rect x="815.6" y="2037" width="3.0" height="15.0" fill="rgb(223,98,4)" rx="2" ry="2" />
<text  x="818.57" y="2047.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.01%)</title><rect x="316.2" y="1957" width="0.2" height="15.0" fill="rgb(238,10,38)" rx="2" ry="2" />
<text  x="319.22" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.3" y="1797" width="0.5" height="15.0" fill="rgb(206,17,34)" rx="2" ry="2" />
<text  x="1189.34" y="1807.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="81.6" y="1429" width="0.1" height="15.0" fill="rgb(254,85,35)" rx="2" ry="2" />
<text  x="84.57" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.01%)</title><rect x="517.4" y="2005" width="0.2" height="15.0" fill="rgb(213,100,40)" rx="2" ry="2" />
<text  x="520.43" y="2015.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.02%)</title><rect x="104.7" y="1989" width="0.3" height="15.0" fill="rgb(220,146,21)" rx="2" ry="2" />
<text  x="107.74" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (20 samples, 0.10%)</title><rect x="874.6" y="2037" width="1.2" height="15.0" fill="rgb(220,104,40)" rx="2" ry="2" />
<text  x="877.59" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.2" y="1973" width="0.1" height="15.0" fill="rgb(233,43,53)" rx="2" ry="2" />
<text  x="1189.17" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="186.3" y="1765" width="0.1" height="15.0" fill="rgb(222,79,3)" rx="2" ry="2" />
<text  x="189.28" y="1775.5" ></text>
</g>
<g >
<title>try_charge (3 samples, 0.01%)</title><rect x="694.1" y="1733" width="0.2" height="15.0" fill="rgb(213,111,22)" rx="2" ry="2" />
<text  x="697.12" y="1743.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (15 samples, 0.07%)</title><rect x="536.2" y="1909" width="0.9" height="15.0" fill="rgb(250,69,25)" rx="2" ry="2" />
<text  x="539.18" y="1919.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.02%)</title><rect x="1110.9" y="2005" width="0.3" height="15.0" fill="rgb(227,227,25)" rx="2" ry="2" />
<text  x="1113.94" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="87.0" y="1749" width="0.1" height="15.0" fill="rgb(206,128,23)" rx="2" ry="2" />
<text  x="90.00" y="1759.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="164.8" y="1573" width="0.2" height="15.0" fill="rgb(250,184,0)" rx="2" ry="2" />
<text  x="167.76" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.01%)</title><rect x="1187.3" y="469" width="0.2" height="15.0" fill="rgb(254,108,23)" rx="2" ry="2" />
<text  x="1190.35" y="479.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.01%)</title><rect x="1189.5" y="2037" width="0.2" height="15.0" fill="rgb(250,144,13)" rx="2" ry="2" />
<text  x="1192.53" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.4" y="1637" width="0.4" height="15.0" fill="rgb(213,138,16)" rx="2" ry="2" />
<text  x="1189.40" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.02%)</title><rect x="1186.5" y="1045" width="0.3" height="15.0" fill="rgb(239,72,21)" rx="2" ry="2" />
<text  x="1189.52" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="149" width="0.4" height="15.0" fill="rgb(220,156,3)" rx="2" ry="2" />
<text  x="1189.93" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.3" y="1205" width="0.2" height="15.0" fill="rgb(239,13,4)" rx="2" ry="2" />
<text  x="1190.29" y="1215.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.01%)</title><rect x="183.6" y="1653" width="0.1" height="15.0" fill="rgb(213,68,44)" rx="2" ry="2" />
<text  x="186.57" y="1663.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (21 samples, 0.10%)</title><rect x="1100.5" y="1973" width="1.2" height="15.0" fill="rgb(241,28,36)" rx="2" ry="2" />
<text  x="1103.51" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.03%)</title><rect x="1186.9" y="693" width="0.4" height="15.0" fill="rgb(206,188,41)" rx="2" ry="2" />
<text  x="1189.88" y="703.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (154 samples, 0.77%)</title><rect x="1128.2" y="2037" width="9.1" height="15.0" fill="rgb(226,190,1)" rx="2" ry="2" />
<text  x="1131.21" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.70%)</title><rect x="55.2" y="677" width="20.1" height="15.0" fill="rgb(236,96,9)" rx="2" ry="2" />
<text  x="58.22" y="687.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="1027.3" y="2037" width="0.1" height="15.0" fill="rgb(254,58,39)" rx="2" ry="2" />
<text  x="1030.28" y="2047.5" ></text>
</g>
</g>
</svg>
