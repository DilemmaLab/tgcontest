<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (76 samples, 0.38%)</title><rect x="165.1" y="1685" width="4.5" height="15.0" fill="rgb(240,105,34)" rx="2" ry="2" />
<text  x="168.12" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="88.7" y="1861" width="0.1" height="15.0" fill="rgb(230,93,44)" rx="2" ry="2" />
<text  x="91.69" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (5 samples, 0.03%)</title><rect x="161.5" y="1541" width="0.3" height="15.0" fill="rgb(245,105,28)" rx="2" ry="2" />
<text  x="164.50" y="1551.5" ></text>
</g>
<g >
<title>do_mmap (16 samples, 0.08%)</title><rect x="759.0" y="1941" width="1.0" height="15.0" fill="rgb(211,220,1)" rx="2" ry="2" />
<text  x="762.01" y="1951.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="54.4" y="1941" width="0.1" height="15.0" fill="rgb(230,120,46)" rx="2" ry="2" />
<text  x="57.36" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (441 samples, 2.22%)</title><rect x="56.0" y="1493" width="26.2" height="15.0" fill="rgb(246,94,13)" rx="2" ry="2" />
<text  x="59.03" y="1503.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="215.8" y="1093" width="0.2" height="15.0" fill="rgb(253,47,47)" rx="2" ry="2" />
<text  x="218.84" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="518.1" y="2005" width="0.1" height="15.0" fill="rgb(250,38,30)" rx="2" ry="2" />
<text  x="521.07" y="2015.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.01%)</title><rect x="179.1" y="1637" width="0.1" height="15.0" fill="rgb(232,78,46)" rx="2" ry="2" />
<text  x="182.08" y="1647.5" ></text>
</g>
<g >
<title>unmap_vmas (4 samples, 0.02%)</title><rect x="760.4" y="1925" width="0.2" height="15.0" fill="rgb(213,166,29)" rx="2" ry="2" />
<text  x="763.38" y="1935.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.01%)</title><rect x="794.5" y="2005" width="0.1" height="15.0" fill="rgb(251,201,45)" rx="2" ry="2" />
<text  x="797.47" y="2015.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (2 samples, 0.01%)</title><rect x="42.3" y="2037" width="0.1" height="15.0" fill="rgb(218,218,7)" rx="2" ry="2" />
<text  x="45.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1445" width="0.1" height="15.0" fill="rgb(224,149,49)" rx="2" ry="2" />
<text  x="161.00" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (65 samples, 0.33%)</title><rect x="170.0" y="1621" width="3.9" height="15.0" fill="rgb(248,224,44)" rx="2" ry="2" />
<text  x="172.99" y="1631.5" ></text>
</g>
<g >
<title>smp_call_function_single (4 samples, 0.02%)</title><rect x="55.4" y="1813" width="0.3" height="15.0" fill="rgb(224,23,20)" rx="2" ry="2" />
<text  x="58.43" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (5 samples, 0.03%)</title><rect x="179.6" y="1717" width="0.3" height="15.0" fill="rgb(245,21,46)" rx="2" ry="2" />
<text  x="182.61" y="1727.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (5 samples, 0.03%)</title><rect x="535.8" y="1909" width="0.3" height="15.0" fill="rgb(252,200,6)" rx="2" ry="2" />
<text  x="538.83" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (3 samples, 0.02%)</title><rect x="156.5" y="1813" width="0.2" height="15.0" fill="rgb(236,148,22)" rx="2" ry="2" />
<text  x="159.51" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1813" width="0.6" height="15.0" fill="rgb(232,130,47)" rx="2" ry="2" />
<text  x="218.43" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1477" width="0.2" height="15.0" fill="rgb(212,23,33)" rx="2" ry="2" />
<text  x="160.76" y="1487.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (19 samples, 0.10%)</title><rect x="938.4" y="1781" width="1.1" height="15.0" fill="rgb(248,119,38)" rx="2" ry="2" />
<text  x="941.37" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (65 samples, 0.33%)</title><rect x="137.4" y="1621" width="3.8" height="15.0" fill="rgb(227,59,53)" rx="2" ry="2" />
<text  x="140.39" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1493" width="0.2" height="15.0" fill="rgb(222,125,4)" rx="2" ry="2" />
<text  x="188.44" y="1503.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (3 samples, 0.02%)</title><rect x="1095.4" y="1813" width="0.2" height="15.0" fill="rgb(215,195,37)" rx="2" ry="2" />
<text  x="1098.39" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (73 samples, 0.37%)</title><rect x="169.6" y="1685" width="4.4" height="15.0" fill="rgb(251,2,54)" rx="2" ry="2" />
<text  x="172.64" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="437" width="0.1" height="15.0" fill="rgb(235,116,8)" rx="2" ry="2" />
<text  x="160.82" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="517.4" y="1781" width="0.2" height="15.0" fill="rgb(250,164,9)" rx="2" ry="2" />
<text  x="520.42" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1493" width="0.2" height="15.0" fill="rgb(231,100,22)" rx="2" ry="2" />
<text  x="160.76" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="157.6" y="1861" width="0.5" height="15.0" fill="rgb(225,76,50)" rx="2" ry="2" />
<text  x="160.64" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (77 samples, 0.39%)</title><rect x="141.8" y="1685" width="4.6" height="15.0" fill="rgb(233,91,50)" rx="2" ry="2" />
<text  x="144.84" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1733" width="0.1" height="15.0" fill="rgb(227,151,7)" rx="2" ry="2" />
<text  x="161.00" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1061" width="0.4" height="15.0" fill="rgb(235,135,49)" rx="2" ry="2" />
<text  x="1189.20" y="1071.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="178.5" y="1621" width="0.5" height="15.0" fill="rgb(243,55,5)" rx="2" ry="2" />
<text  x="181.55" y="1631.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="868.5" y="2021" width="0.2" height="15.0" fill="rgb(227,100,40)" rx="2" ry="2" />
<text  x="871.53" y="2031.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="155.3" y="1669" width="0.1" height="15.0" fill="rgb(230,221,14)" rx="2" ry="2" />
<text  x="158.32" y="1679.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="189.8" y="1557" width="0.1" height="15.0" fill="rgb(225,8,30)" rx="2" ry="2" />
<text  x="192.77" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="805" width="0.1" height="15.0" fill="rgb(254,105,25)" rx="2" ry="2" />
<text  x="160.82" y="815.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (9 samples, 0.05%)</title><rect x="519.1" y="2037" width="0.6" height="15.0" fill="rgb(223,38,41)" rx="2" ry="2" />
<text  x="522.14" y="2047.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="1189.5" y="1957" width="0.2" height="15.0" fill="rgb(251,20,15)" rx="2" ry="2" />
<text  x="1192.52" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (24 samples, 0.12%)</title><rect x="1119.8" y="2053" width="1.4" height="15.0" fill="rgb(208,125,48)" rx="2" ry="2" />
<text  x="1122.80" y="2063.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.01%)</title><rect x="1187.7" y="2053" width="0.2" height="15.0" fill="rgb(253,56,3)" rx="2" ry="2" />
<text  x="1190.74" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.06%)</title><rect x="1186.0" y="2037" width="0.6" height="15.0" fill="rgb(233,58,46)" rx="2" ry="2" />
<text  x="1188.96" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (71 samples, 0.36%)</title><rect x="187.0" y="1637" width="4.2" height="15.0" fill="rgb(219,52,50)" rx="2" ry="2" />
<text  x="189.98" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1221" width="0.3" height="15.0" fill="rgb(236,171,24)" rx="2" ry="2" />
<text  x="1189.79" y="1231.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (6 samples, 0.03%)</title><rect x="1098.7" y="2053" width="0.4" height="15.0" fill="rgb(252,112,1)" rx="2" ry="2" />
<text  x="1101.72" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="156.8" y="1813" width="0.2" height="15.0" fill="rgb(224,185,22)" rx="2" ry="2" />
<text  x="159.81" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (9 samples, 0.05%)</title><rect x="576.7" y="1893" width="0.6" height="15.0" fill="rgb(247,52,39)" rx="2" ry="2" />
<text  x="579.75" y="1903.5" ></text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache (2 samples, 0.01%)</title><rect x="864.8" y="2037" width="0.1" height="15.0" fill="rgb(217,73,8)" rx="2" ry="2" />
<text  x="867.79" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="214.5" y="1797" width="0.1" height="15.0" fill="rgb(214,179,13)" rx="2" ry="2" />
<text  x="217.48" y="1807.5" ></text>
</g>
<g >
<title>page_remove_rmap (2 samples, 0.01%)</title><rect x="1097.1" y="1893" width="0.1" height="15.0" fill="rgb(233,88,49)" rx="2" ry="2" />
<text  x="1100.06" y="1903.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.05%)</title><rect x="652.8" y="1845" width="0.6" height="15.0" fill="rgb(239,175,19)" rx="2" ry="2" />
<text  x="655.83" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="155.2" y="1669" width="0.1" height="15.0" fill="rgb(232,114,40)" rx="2" ry="2" />
<text  x="158.21" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (5 samples, 0.03%)</title><rect x="746.7" y="1909" width="0.3" height="15.0" fill="rgb(210,3,51)" rx="2" ry="2" />
<text  x="749.72" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="517" width="0.4" height="15.0" fill="rgb(216,202,30)" rx="2" ry="2" />
<text  x="1189.20" y="527.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (17 samples, 0.09%)</title><rect x="865.3" y="1957" width="1.0" height="15.0" fill="rgb(214,122,40)" rx="2" ry="2" />
<text  x="868.32" y="1967.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (3 samples, 0.02%)</title><rect x="520.8" y="1781" width="0.2" height="15.0" fill="rgb(251,118,6)" rx="2" ry="2" />
<text  x="523.80" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1381" width="0.6" height="15.0" fill="rgb(243,76,14)" rx="2" ry="2" />
<text  x="1190.15" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="357" width="19.0" height="15.0" fill="rgb(214,123,33)" rx="2" ry="2" />
<text  x="59.03" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="184.6" y="1797" width="0.2" height="15.0" fill="rgb(246,164,2)" rx="2" ry="2" />
<text  x="187.60" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (81 samples, 0.41%)</title><rect x="186.4" y="1717" width="4.9" height="15.0" fill="rgb(230,141,6)" rx="2" ry="2" />
<text  x="189.44" y="1727.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 0.02%)</title><rect x="131.3" y="1925" width="0.3" height="15.0" fill="rgb(225,183,48)" rx="2" ry="2" />
<text  x="134.33" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 1.71%)</title><rect x="56.0" y="1125" width="20.2" height="15.0" fill="rgb(209,193,37)" rx="2" ry="2" />
<text  x="59.03" y="1135.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="175.4" y="1637" width="0.1" height="15.0" fill="rgb(245,160,37)" rx="2" ry="2" />
<text  x="178.40" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1013" width="0.5" height="15.0" fill="rgb(236,176,38)" rx="2" ry="2" />
<text  x="1190.21" y="1023.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Refill (3 samples, 0.02%)</title><rect x="1018.3" y="2053" width="0.2" height="15.0" fill="rgb(240,13,25)" rx="2" ry="2" />
<text  x="1021.31" y="2063.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="680.0" y="1845" width="0.1" height="15.0" fill="rgb(238,222,31)" rx="2" ry="2" />
<text  x="683.03" y="1855.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.02%)</title><rect x="493.4" y="1941" width="0.2" height="15.0" fill="rgb(218,168,39)" rx="2" ry="2" />
<text  x="496.37" y="1951.5" ></text>
</g>
<g >
<title>__interceptor_strlen (2 samples, 0.01%)</title><rect x="568.4" y="1941" width="0.1" height="15.0" fill="rgb(215,200,15)" rx="2" ry="2" />
<text  x="571.38" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="192.8" y="1605" width="0.1" height="15.0" fill="rgb(251,29,26)" rx="2" ry="2" />
<text  x="195.80" y="1615.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="122.4" y="1973" width="0.1" height="15.0" fill="rgb(205,169,38)" rx="2" ry="2" />
<text  x="125.42" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (51 samples, 0.26%)</title><rect x="203.8" y="1653" width="3.1" height="15.0" fill="rgb(241,77,38)" rx="2" ry="2" />
<text  x="206.85" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (100 samples, 0.50%)</title><rect x="207.6" y="1813" width="6.0" height="15.0" fill="rgb(225,140,5)" rx="2" ry="2" />
<text  x="210.65" y="1823.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="84.9" y="1605" width="0.1" height="15.0" fill="rgb(231,98,38)" rx="2" ry="2" />
<text  x="87.89" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (24 samples, 0.12%)</title><rect x="758.8" y="2037" width="1.5" height="15.0" fill="rgb(240,192,22)" rx="2" ry="2" />
<text  x="761.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1365" width="0.2" height="15.0" fill="rgb(222,47,50)" rx="2" ry="2" />
<text  x="188.44" y="1375.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (23 samples, 0.12%)</title><rect x="71.2" y="37" width="1.3" height="15.0" fill="rgb(237,185,3)" rx="2" ry="2" />
<text  x="74.17" y="47.5" ></text>
</g>
<g >
<title>smp_call_function_many (4 samples, 0.02%)</title><rect x="520.7" y="1845" width="0.3" height="15.0" fill="rgb(216,60,45)" rx="2" ry="2" />
<text  x="523.75" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="1141" width="0.5" height="15.0" fill="rgb(214,71,24)" rx="2" ry="2" />
<text  x="1190.21" y="1151.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="190.8" y="1573" width="0.2" height="15.0" fill="rgb(239,178,16)" rx="2" ry="2" />
<text  x="193.84" y="1583.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="189.2" y="1557" width="0.2" height="15.0" fill="rgb(207,117,14)" rx="2" ry="2" />
<text  x="192.24" y="1567.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (47 samples, 0.24%)</title><rect x="572.7" y="1893" width="2.8" height="15.0" fill="rgb(232,67,8)" rx="2" ry="2" />
<text  x="575.71" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="137.2" y="1621" width="0.2" height="15.0" fill="rgb(216,127,47)" rx="2" ry="2" />
<text  x="140.15" y="1631.5" ></text>
</g>
<g >
<title>call_rwsem_wake (2 samples, 0.01%)</title><rect x="760.1" y="1925" width="0.1" height="15.0" fill="rgb(235,182,4)" rx="2" ry="2" />
<text  x="763.08" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.9" y="1045" width="0.1" height="15.0" fill="rgb(236,227,22)" rx="2" ry="2" />
<text  x="218.90" y="1055.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::EnsureFreeArraySpace (2 samples, 0.01%)</title><rect x="1015.8" y="2053" width="0.1" height="15.0" fill="rgb(213,125,24)" rx="2" ry="2" />
<text  x="1018.75" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.03%)</title><rect x="193.4" y="1589" width="0.3" height="15.0" fill="rgb(222,191,13)" rx="2" ry="2" />
<text  x="196.39" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="140.4" y="1589" width="0.4" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="143.36" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1669" width="0.2" height="15.0" fill="rgb(236,117,54)" rx="2" ry="2" />
<text  x="188.44" y="1679.5" ></text>
</g>
<g >
<title>perf_event_mmap (2 samples, 0.01%)</title><rect x="1095.9" y="1925" width="0.1" height="15.0" fill="rgb(216,113,34)" rx="2" ry="2" />
<text  x="1098.87" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="597" width="0.1" height="15.0" fill="rgb(207,187,44)" rx="2" ry="2" />
<text  x="160.82" y="607.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (11 samples, 0.06%)</title><rect x="717.5" y="1877" width="0.7" height="15.0" fill="rgb(231,227,0)" rx="2" ry="2" />
<text  x="720.50" y="1887.5" ></text>
</g>
<g >
<title>TSlinkClustering::FillDistanceMatrix (243 samples, 1.22%)</title><rect x="493.9" y="1973" width="14.4" height="15.0" fill="rgb(250,74,1)" rx="2" ry="2" />
<text  x="496.90" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="156.5" y="1797" width="0.2" height="15.0" fill="rgb(245,37,50)" rx="2" ry="2" />
<text  x="159.51" y="1807.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="868.4" y="1989" width="0.1" height="15.0" fill="rgb(247,225,38)" rx="2" ry="2" />
<text  x="871.41" y="1999.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (43 samples, 0.22%)</title><rect x="654.7" y="1877" width="2.6" height="15.0" fill="rgb(239,56,48)" rx="2" ry="2" />
<text  x="657.73" y="1887.5" ></text>
</g>
<g >
<title>__do_page_fault (11 samples, 0.06%)</title><rect x="648.7" y="1829" width="0.6" height="15.0" fill="rgb(251,97,12)" rx="2" ry="2" />
<text  x="651.67" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="213" width="0.4" height="15.0" fill="rgb(249,205,31)" rx="2" ry="2" />
<text  x="1190.27" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="1017.5" y="2021" width="0.1" height="15.0" fill="rgb(231,133,16)" rx="2" ry="2" />
<text  x="1020.47" y="2031.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="399.4" y="1941" width="0.1" height="15.0" fill="rgb(232,105,31)" rx="2" ry="2" />
<text  x="402.35" y="1951.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="154.9" y="1669" width="0.1" height="15.0" fill="rgb(226,55,34)" rx="2" ry="2" />
<text  x="157.91" y="1679.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (3 samples, 0.02%)</title><rect x="173.7" y="1605" width="0.2" height="15.0" fill="rgb(240,195,26)" rx="2" ry="2" />
<text  x="176.68" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (431 samples, 2.17%)</title><rect x="131.9" y="1957" width="25.6" height="15.0" fill="rgb(231,68,3)" rx="2" ry="2" />
<text  x="134.87" y="1967.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1429" width="0.4" height="15.0" fill="rgb(215,120,32)" rx="2" ry="2" />
<text  x="1189.20" y="1439.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="91.8" y="2021" width="0.3" height="15.0" fill="rgb(245,104,42)" rx="2" ry="2" />
<text  x="94.84" y="2031.5" ></text>
</g>
<g >
<title>generic_file_read_iter (4 samples, 0.02%)</title><rect x="1107.1" y="1893" width="0.2" height="15.0" fill="rgb(206,124,27)" rx="2" ry="2" />
<text  x="1110.09" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="508.3" y="1973" width="0.3" height="15.0" fill="rgb(235,78,39)" rx="2" ry="2" />
<text  x="511.33" y="1983.5" ></text>
</g>
<g >
<title>do_page_fault (5 samples, 0.03%)</title><rect x="1093.1" y="2021" width="0.3" height="15.0" fill="rgb(228,181,48)" rx="2" ry="2" />
<text  x="1096.08" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (78 samples, 0.39%)</title><rect x="137.0" y="1733" width="4.7" height="15.0" fill="rgb(212,210,50)" rx="2" ry="2" />
<text  x="140.03" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (81 samples, 0.41%)</title><rect x="151.7" y="1813" width="4.8" height="15.0" fill="rgb(235,116,2)" rx="2" ry="2" />
<text  x="154.70" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1637" width="0.2" height="15.0" fill="rgb(252,13,41)" rx="2" ry="2" />
<text  x="188.44" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (94 samples, 0.47%)</title><rect x="159.4" y="1605" width="5.6" height="15.0" fill="rgb(221,83,54)" rx="2" ry="2" />
<text  x="162.42" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1125" width="0.1" height="15.0" fill="rgb(235,23,50)" rx="2" ry="2" />
<text  x="160.82" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (5 samples, 0.03%)</title><rect x="214.0" y="1845" width="0.3" height="15.0" fill="rgb(211,181,30)" rx="2" ry="2" />
<text  x="217.00" y="1855.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (4 samples, 0.02%)</title><rect x="570.4" y="1909" width="0.2" height="15.0" fill="rgb(230,145,4)" rx="2" ry="2" />
<text  x="573.39" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1333" width="0.2" height="15.0" fill="rgb(220,106,27)" rx="2" ry="2" />
<text  x="188.44" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="933" width="0.5" height="15.0" fill="rgb(217,214,52)" rx="2" ry="2" />
<text  x="1190.21" y="943.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.03%)</title><rect x="690.1" y="1749" width="0.3" height="15.0" fill="rgb(217,100,19)" rx="2" ry="2" />
<text  x="693.06" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (82 samples, 0.41%)</title><rect x="146.5" y="1781" width="4.9" height="15.0" fill="rgb(239,123,15)" rx="2" ry="2" />
<text  x="149.54" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (361 samples, 1.82%)</title><rect x="56.0" y="1237" width="21.5" height="15.0" fill="rgb(224,157,24)" rx="2" ry="2" />
<text  x="59.03" y="1247.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (71 samples, 0.36%)</title><rect x="187.0" y="1621" width="4.2" height="15.0" fill="rgb(222,3,44)" rx="2" ry="2" />
<text  x="189.98" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="1118.0" y="2037" width="0.2" height="15.0" fill="rgb(233,133,15)" rx="2" ry="2" />
<text  x="1121.02" y="2047.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (27 samples, 0.14%)</title><rect x="994.6" y="2053" width="1.6" height="15.0" fill="rgb(244,32,23)" rx="2" ry="2" />
<text  x="997.55" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1077" width="0.4" height="15.0" fill="rgb(206,101,19)" rx="2" ry="2" />
<text  x="1189.20" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1573" width="0.2" height="15.0" fill="rgb(238,194,44)" rx="2" ry="2" />
<text  x="188.44" y="1583.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.03%)</title><rect x="182.7" y="1653" width="0.4" height="15.0" fill="rgb(207,50,26)" rx="2" ry="2" />
<text  x="185.70" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (77 samples, 0.39%)</title><rect x="141.8" y="1669" width="4.6" height="15.0" fill="rgb(207,102,48)" rx="2" ry="2" />
<text  x="144.84" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (91 samples, 0.46%)</title><rect x="196.8" y="1733" width="5.4" height="15.0" fill="rgb(240,145,52)" rx="2" ry="2" />
<text  x="199.78" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1189" width="0.4" height="15.0" fill="rgb(233,23,11)" rx="2" ry="2" />
<text  x="1189.20" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (84 samples, 0.42%)</title><rect x="132.0" y="1717" width="5.0" height="15.0" fill="rgb(205,134,46)" rx="2" ry="2" />
<text  x="134.99" y="1727.5" ></text>
</g>
<g >
<title>find_vma (7 samples, 0.04%)</title><rect x="934.3" y="1989" width="0.4" height="15.0" fill="rgb(233,104,3)" rx="2" ry="2" />
<text  x="937.33" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="76.8" y="1189" width="0.3" height="15.0" fill="rgb(239,3,15)" rx="2" ry="2" />
<text  x="79.81" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="179.4" y="1669" width="0.2" height="15.0" fill="rgb(211,12,49)" rx="2" ry="2" />
<text  x="182.44" y="1679.5" ></text>
</g>
<g >
<title>get_unmapped_area (4 samples, 0.02%)</title><rect x="1095.0" y="1941" width="0.2" height="15.0" fill="rgb(206,47,52)" rx="2" ry="2" />
<text  x="1097.98" y="1951.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (3 samples, 0.02%)</title><rect x="521.0" y="1909" width="0.2" height="15.0" fill="rgb(223,107,34)" rx="2" ry="2" />
<text  x="523.98" y="1919.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="1189.7" y="2037" width="0.2" height="15.0" fill="rgb(236,203,38)" rx="2" ry="2" />
<text  x="1192.70" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="485" width="0.1" height="15.0" fill="rgb(245,125,9)" rx="2" ry="2" />
<text  x="160.82" y="495.5" ></text>
</g>
<g >
<title>[unknown] (316 samples, 1.59%)</title><rect x="56.0" y="245" width="18.8" height="15.0" fill="rgb(207,171,4)" rx="2" ry="2" />
<text  x="59.03" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (431 samples, 2.17%)</title><rect x="158.7" y="1877" width="25.6" height="15.0" fill="rgb(234,43,22)" rx="2" ry="2" />
<text  x="161.71" y="1887.5" >s..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::PopulateFreeArray (3 samples, 0.02%)</title><rect x="1016.2" y="2053" width="0.1" height="15.0" fill="rgb(237,29,24)" rx="2" ry="2" />
<text  x="1019.17" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="84.4" y="1621" width="0.1" height="15.0" fill="rgb(220,44,30)" rx="2" ry="2" />
<text  x="87.36" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="215.8" y="1141" width="0.2" height="15.0" fill="rgb(222,88,53)" rx="2" ry="2" />
<text  x="218.84" y="1151.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="649.1" y="1749" width="0.2" height="15.0" fill="rgb(236,181,30)" rx="2" ry="2" />
<text  x="652.14" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (497 samples, 2.50%)</title><rect x="56.0" y="1685" width="29.5" height="15.0" fill="rgb(206,60,35)" rx="2" ry="2" />
<text  x="58.97" y="1695.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1765" width="0.6" height="15.0" fill="rgb(233,201,40)" rx="2" ry="2" />
<text  x="218.43" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (5 samples, 0.03%)</title><rect x="516.4" y="1941" width="0.3" height="15.0" fill="rgb(209,151,10)" rx="2" ry="2" />
<text  x="519.41" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="885" width="0.5" height="15.0" fill="rgb(229,8,44)" rx="2" ry="2" />
<text  x="1190.21" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (4 samples, 0.02%)</title><rect x="213.6" y="1813" width="0.2" height="15.0" fill="rgb(206,85,22)" rx="2" ry="2" />
<text  x="216.59" y="1823.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="477.3" y="1941" width="0.1" height="15.0" fill="rgb(233,172,35)" rx="2" ry="2" />
<text  x="480.27" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="245" width="0.4" height="15.0" fill="rgb(207,226,34)" rx="2" ry="2" />
<text  x="1190.27" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="821" width="0.1" height="15.0" fill="rgb(227,4,34)" rx="2" ry="2" />
<text  x="160.82" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1589" width="0.4" height="15.0" fill="rgb(248,126,51)" rx="2" ry="2" />
<text  x="1189.73" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (73 samples, 0.37%)</title><rect x="169.6" y="1701" width="4.4" height="15.0" fill="rgb(223,64,3)" rx="2" ry="2" />
<text  x="172.64" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (457 samples, 2.30%)</title><rect x="186.4" y="1829" width="27.2" height="15.0" fill="rgb(251,115,8)" rx="2" ry="2" />
<text  x="189.44" y="1839.5" >s..</text>
</g>
<g >
<title>up_read (2 samples, 0.01%)</title><rect x="27.5" y="1989" width="0.1" height="15.0" fill="rgb(218,35,39)" rx="2" ry="2" />
<text  x="30.52" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="597" width="0.4" height="15.0" fill="rgb(206,133,10)" rx="2" ry="2" />
<text  x="1189.20" y="607.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (34 samples, 0.17%)</title><rect x="511.5" y="1973" width="2.1" height="15.0" fill="rgb(238,50,41)" rx="2" ry="2" />
<text  x="514.54" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1317" width="0.1" height="15.0" fill="rgb(224,25,32)" rx="2" ry="2" />
<text  x="161.00" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (93 samples, 0.47%)</title><rect x="196.7" y="1765" width="5.5" height="15.0" fill="rgb(241,188,9)" rx="2" ry="2" />
<text  x="199.72" y="1775.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.01%)</title><rect x="521.2" y="1941" width="0.1" height="15.0" fill="rgb(242,19,40)" rx="2" ry="2" />
<text  x="524.16" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="757" width="19.4" height="15.0" fill="rgb(226,80,39)" rx="2" ry="2" />
<text  x="59.03" y="767.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (38 samples, 0.19%)</title><rect x="579.3" y="1893" width="2.3" height="15.0" fill="rgb(249,155,36)" rx="2" ry="2" />
<text  x="582.30" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1541" width="0.2" height="15.0" fill="rgb(241,81,2)" rx="2" ry="2" />
<text  x="160.76" y="1551.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (2 samples, 0.01%)</title><rect x="518.5" y="1973" width="0.1" height="15.0" fill="rgb(242,173,42)" rx="2" ry="2" />
<text  x="521.49" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (27 samples, 0.14%)</title><rect x="803.1" y="2005" width="1.6" height="15.0" fill="rgb(249,57,29)" rx="2" ry="2" />
<text  x="806.14" y="2015.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.02%)</title><rect x="190.5" y="1573" width="0.2" height="15.0" fill="rgb(244,203,14)" rx="2" ry="2" />
<text  x="193.48" y="1583.5" ></text>
</g>
<g >
<title>native_write_msr (19 samples, 0.10%)</title><rect x="938.4" y="1765" width="1.1" height="15.0" fill="rgb(226,110,42)" rx="2" ry="2" />
<text  x="941.37" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.2" y="1205" width="0.1" height="15.0" fill="rgb(250,93,38)" rx="2" ry="2" />
<text  x="80.17" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1397" width="0.4" height="15.0" fill="rgb(249,72,46)" rx="2" ry="2" />
<text  x="1189.20" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1477" width="0.2" height="15.0" fill="rgb(216,199,40)" rx="2" ry="2" />
<text  x="188.44" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="709" width="0.5" height="15.0" fill="rgb(217,131,46)" rx="2" ry="2" />
<text  x="1190.21" y="719.5" ></text>
</g>
<g >
<title>[unknown] (325 samples, 1.64%)</title><rect x="56.0" y="661" width="19.3" height="15.0" fill="rgb(248,168,36)" rx="2" ry="2" />
<text  x="59.03" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1781" width="0.6" height="15.0" fill="rgb(225,124,1)" rx="2" ry="2" />
<text  x="218.43" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.3" y="53" width="0.3" height="15.0" fill="rgb(214,2,42)" rx="2" ry="2" />
<text  x="1189.26" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1525" width="0.6" height="15.0" fill="rgb(245,146,36)" rx="2" ry="2" />
<text  x="1190.15" y="1535.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6 samples, 0.03%)</title><rect x="1017.9" y="1973" width="0.3" height="15.0" fill="rgb(252,153,27)" rx="2" ry="2" />
<text  x="1020.89" y="1983.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="932.7" y="2037" width="0.1" height="15.0" fill="rgb(243,136,23)" rx="2" ry="2" />
<text  x="935.67" y="2047.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.05%)</title><rect x="652.8" y="1861" width="0.6" height="15.0" fill="rgb(233,43,18)" rx="2" ry="2" />
<text  x="655.83" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1797" width="0.4" height="15.0" fill="rgb(211,90,4)" rx="2" ry="2" />
<text  x="188.20" y="1807.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (5 samples, 0.03%)</title><rect x="513.9" y="1973" width="0.3" height="15.0" fill="rgb(226,176,26)" rx="2" ry="2" />
<text  x="516.86" y="1983.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (299 samples, 1.50%)</title><rect x="381.5" y="1925" width="17.8" height="15.0" fill="rgb(215,12,42)" rx="2" ry="2" />
<text  x="384.54" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1285" width="0.2" height="15.0" fill="rgb(214,26,27)" rx="2" ry="2" />
<text  x="188.44" y="1295.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::MergeBatches (16 samples, 0.08%)</title><rect x="756.6" y="2037" width="0.9" height="15.0" fill="rgb(212,104,18)" rx="2" ry="2" />
<text  x="759.58" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (400 samples, 2.01%)</title><rect x="56.0" y="1381" width="23.8" height="15.0" fill="rgb(230,39,7)" rx="2" ry="2" />
<text  x="59.03" y="1391.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (95 samples, 0.48%)</title><rect x="159.4" y="1669" width="5.7" height="15.0" fill="rgb(225,187,5)" rx="2" ry="2" />
<text  x="162.42" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (13 samples, 0.07%)</title><rect x="631.6" y="1877" width="0.7" height="15.0" fill="rgb(211,26,11)" rx="2" ry="2" />
<text  x="634.57" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (7 samples, 0.04%)</title><rect x="1116.0" y="2053" width="0.4" height="15.0" fill="rgb(215,115,25)" rx="2" ry="2" />
<text  x="1119.00" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (180 samples, 0.91%)</title><rect x="1124.4" y="2037" width="10.7" height="15.0" fill="rgb(236,180,40)" rx="2" ry="2" />
<text  x="1127.38" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (81 samples, 0.41%)</title><rect x="146.5" y="1717" width="4.8" height="15.0" fill="rgb(211,27,53)" rx="2" ry="2" />
<text  x="149.54" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="83.3" y="1557" width="0.2" height="15.0" fill="rgb(230,69,1)" rx="2" ry="2" />
<text  x="86.35" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="85" width="0.3" height="15.0" fill="rgb(237,194,28)" rx="2" ry="2" />
<text  x="1189.26" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1429" width="0.2" height="15.0" fill="rgb(219,226,7)" rx="2" ry="2" />
<text  x="160.76" y="1439.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (14 samples, 0.07%)</title><rect x="1153.4" y="2037" width="0.8" height="15.0" fill="rgb(239,21,18)" rx="2" ry="2" />
<text  x="1156.36" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="867.7" y="2021" width="0.1" height="15.0" fill="rgb(218,55,25)" rx="2" ry="2" />
<text  x="870.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1829" width="0.5" height="15.0" fill="rgb(240,120,6)" rx="2" ry="2" />
<text  x="1189.14" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.65%)</title><rect x="56.0" y="821" width="19.4" height="15.0" fill="rgb(205,188,8)" rx="2" ry="2" />
<text  x="59.03" y="831.5" ></text>
</g>
<g >
<title>[unknown] (577 samples, 2.90%)</title><rect x="56.0" y="2005" width="34.2" height="15.0" fill="rgb(211,123,50)" rx="2" ry="2" />
<text  x="58.97" y="2015.5" >[u..</text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="758.6" y="2021" width="0.2" height="15.0" fill="rgb(244,1,3)" rx="2" ry="2" />
<text  x="761.60" y="2031.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="513.6" y="1973" width="0.1" height="15.0" fill="rgb(242,107,12)" rx="2" ry="2" />
<text  x="516.56" y="1983.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (9 samples, 0.05%)</title><rect x="996.9" y="2053" width="0.5" height="15.0" fill="rgb(242,212,1)" rx="2" ry="2" />
<text  x="999.87" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="74.8" y="261" width="0.1" height="15.0" fill="rgb(251,70,26)" rx="2" ry="2" />
<text  x="77.79" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="183.8" y="1749" width="0.2" height="15.0" fill="rgb(218,84,33)" rx="2" ry="2" />
<text  x="186.83" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="42.3" y="2021" width="0.1" height="15.0" fill="rgb(222,209,20)" rx="2" ry="2" />
<text  x="45.31" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.05%)</title><rect x="810.8" y="1989" width="0.6" height="15.0" fill="rgb(251,149,14)" rx="2" ry="2" />
<text  x="813.80" y="1999.5" ></text>
</g>
<g >
<title>vma_merge (2 samples, 0.01%)</title><rect x="1096.0" y="1925" width="0.2" height="15.0" fill="rgb(206,80,15)" rx="2" ry="2" />
<text  x="1099.05" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="569.4" y="1925" width="0.2" height="15.0" fill="rgb(246,225,44)" rx="2" ry="2" />
<text  x="572.38" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="37" width="0.2" height="15.0" fill="rgb(224,168,51)" rx="2" ry="2" />
<text  x="1189.91" y="47.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="135.1" y="1557" width="0.2" height="15.0" fill="rgb(223,189,7)" rx="2" ry="2" />
<text  x="138.13" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1589" width="0.5" height="15.0" fill="rgb(205,106,23)" rx="2" ry="2" />
<text  x="218.55" y="1599.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::predict (9 samples, 0.05%)</title><rect x="567.1" y="1925" width="0.5" height="15.0" fill="rgb(212,48,48)" rx="2" ry="2" />
<text  x="570.07" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.4" y="1973" width="0.3" height="15.0" fill="rgb(248,95,30)" rx="2" ry="2" />
<text  x="520.42" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (48 samples, 0.24%)</title><rect x="1116.8" y="2053" width="2.8" height="15.0" fill="rgb(217,56,22)" rx="2" ry="2" />
<text  x="1119.77" y="2063.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.03%)</title><rect x="652.9" y="1781" width="0.3" height="15.0" fill="rgb(211,88,43)" rx="2" ry="2" />
<text  x="655.95" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="901" width="0.2" height="15.0" fill="rgb(252,46,8)" rx="2" ry="2" />
<text  x="1189.85" y="911.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::future&lt;std::result_of&lt;Annotate (3 samples, 0.02%)</title><rect x="28.8" y="2021" width="0.1" height="15.0" fill="rgb(224,122,51)" rx="2" ry="2" />
<text  x="31.77" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="1957" width="0.5" height="15.0" fill="rgb(240,69,17)" rx="2" ry="2" />
<text  x="1189.08" y="1967.5" ></text>
</g>
<g >
<title>__asan_memcpy (10 samples, 0.05%)</title><rect x="613.2" y="1845" width="0.6" height="15.0" fill="rgb(240,193,1)" rx="2" ry="2" />
<text  x="616.21" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (314 samples, 1.58%)</title><rect x="56.0" y="149" width="18.7" height="15.0" fill="rgb(242,225,32)" rx="2" ry="2" />
<text  x="59.03" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1461" width="0.1" height="15.0" fill="rgb(224,224,24)" rx="2" ry="2" />
<text  x="188.26" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (72 samples, 0.36%)</title><rect x="187.0" y="1701" width="4.3" height="15.0" fill="rgb(212,54,50)" rx="2" ry="2" />
<text  x="189.98" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="87.7" y="1797" width="0.2" height="15.0" fill="rgb(209,166,42)" rx="2" ry="2" />
<text  x="90.68" y="1807.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (2 samples, 0.01%)</title><rect x="936.8" y="1925" width="0.1" height="15.0" fill="rgb(233,145,52)" rx="2" ry="2" />
<text  x="939.82" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1141" width="0.3" height="15.0" fill="rgb(214,196,27)" rx="2" ry="2" />
<text  x="1189.79" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="2021" width="0.5" height="15.0" fill="rgb(218,178,54)" rx="2" ry="2" />
<text  x="1189.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="741" width="0.2" height="15.0" fill="rgb(254,152,54)" rx="2" ry="2" />
<text  x="1189.85" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1589" width="0.1" height="15.0" fill="rgb(249,52,3)" rx="2" ry="2" />
<text  x="188.26" y="1599.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="89.3" y="1861" width="0.1" height="15.0" fill="rgb(223,218,38)" rx="2" ry="2" />
<text  x="92.28" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (13 samples, 0.07%)</title><rect x="184.3" y="1877" width="0.8" height="15.0" fill="rgb(238,19,40)" rx="2" ry="2" />
<text  x="187.31" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="171.6" y="1589" width="0.4" height="15.0" fill="rgb(250,106,42)" rx="2" ry="2" />
<text  x="174.60" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="90.1" y="1989" width="0.1" height="15.0" fill="rgb(233,74,26)" rx="2" ry="2" />
<text  x="93.06" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (7 samples, 0.04%)</title><rect x="42.4" y="2005" width="0.4" height="15.0" fill="rgb(242,56,44)" rx="2" ry="2" />
<text  x="45.43" y="2015.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (3 samples, 0.02%)</title><rect x="1118.7" y="2037" width="0.2" height="15.0" fill="rgb(221,165,21)" rx="2" ry="2" />
<text  x="1121.67" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.02%)</title><rect x="182.2" y="1653" width="0.1" height="15.0" fill="rgb(222,79,41)" rx="2" ry="2" />
<text  x="185.17" y="1663.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (192 samples, 0.97%)</title><rect x="694.0" y="1861" width="11.4" height="15.0" fill="rgb(207,171,10)" rx="2" ry="2" />
<text  x="696.98" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (78 samples, 0.39%)</title><rect x="137.0" y="1685" width="4.7" height="15.0" fill="rgb(234,17,40)" rx="2" ry="2" />
<text  x="140.03" y="1695.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (83 samples, 0.42%)</title><rect x="570.7" y="1909" width="4.9" height="15.0" fill="rgb(217,15,40)" rx="2" ry="2" />
<text  x="573.69" y="1919.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.02%)</title><rect x="1189.5" y="2021" width="0.2" height="15.0" fill="rgb(210,203,19)" rx="2" ry="2" />
<text  x="1192.47" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (55 samples, 0.28%)</title><rect x="807.5" y="2037" width="3.3" height="15.0" fill="rgb(224,180,4)" rx="2" ry="2" />
<text  x="810.53" y="2047.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="54.4" y="1925" width="0.1" height="15.0" fill="rgb(209,182,7)" rx="2" ry="2" />
<text  x="57.36" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="156.8" y="1797" width="0.1" height="15.0" fill="rgb(208,134,29)" rx="2" ry="2" />
<text  x="159.81" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1349" width="0.1" height="15.0" fill="rgb(232,18,5)" rx="2" ry="2" />
<text  x="188.26" y="1359.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.04%)</title><rect x="1144.6" y="2037" width="0.4" height="15.0" fill="rgb(221,226,17)" rx="2" ry="2" />
<text  x="1147.63" y="2047.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 0.06%)</title><rect x="936.1" y="1909" width="0.7" height="15.0" fill="rgb(248,213,23)" rx="2" ry="2" />
<text  x="939.11" y="1919.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="1018.0" y="1957" width="0.1" height="15.0" fill="rgb(244,178,16)" rx="2" ry="2" />
<text  x="1020.95" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1557" width="0.1" height="15.0" fill="rgb(240,5,12)" rx="2" ry="2" />
<text  x="218.43" y="1567.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="172.1" y="1589" width="0.1" height="15.0" fill="rgb(206,127,0)" rx="2" ry="2" />
<text  x="175.07" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1157" width="0.1" height="15.0" fill="rgb(247,26,5)" rx="2" ry="2" />
<text  x="160.82" y="1167.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (433 samples, 2.18%)</title><rect x="541.2" y="1909" width="25.7" height="15.0" fill="rgb(212,29,18)" rx="2" ry="2" />
<text  x="544.18" y="1919.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="693" width="0.2" height="15.0" fill="rgb(234,128,9)" rx="2" ry="2" />
<text  x="1189.85" y="703.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (14 samples, 0.07%)</title><rect x="1154.8" y="2037" width="0.9" height="15.0" fill="rgb(210,50,5)" rx="2" ry="2" />
<text  x="1157.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1173" width="0.1" height="15.0" fill="rgb(241,41,38)" rx="2" ry="2" />
<text  x="160.82" y="1183.5" ></text>
</g>
<g >
<title>__handle_mm_fault (8 samples, 0.04%)</title><rect x="652.9" y="1797" width="0.5" height="15.0" fill="rgb(246,22,15)" rx="2" ry="2" />
<text  x="655.95" y="1807.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="82.1" y="1365" width="0.1" height="15.0" fill="rgb(220,7,19)" rx="2" ry="2" />
<text  x="85.10" y="1375.5" ></text>
</g>
<g >
<title>alloc_pages_vma (9 samples, 0.05%)</title><rect x="496.9" y="1845" width="0.6" height="15.0" fill="rgb(252,208,33)" rx="2" ry="2" />
<text  x="499.93" y="1855.5" ></text>
</g>
<g >
<title>generic_exec_single (20 samples, 0.10%)</title><rect x="938.4" y="1813" width="1.2" height="15.0" fill="rgb(250,199,29)" rx="2" ry="2" />
<text  x="941.37" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (430 samples, 2.16%)</title><rect x="131.9" y="1941" width="25.5" height="15.0" fill="rgb(206,8,31)" rx="2" ry="2" />
<text  x="134.87" y="1951.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (94 samples, 0.47%)</title><rect x="174.0" y="1733" width="5.6" height="15.0" fill="rgb(207,225,22)" rx="2" ry="2" />
<text  x="177.03" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1461" width="0.6" height="15.0" fill="rgb(214,171,40)" rx="2" ry="2" />
<text  x="1190.15" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="517" width="0.2" height="15.0" fill="rgb(206,114,35)" rx="2" ry="2" />
<text  x="1189.85" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (66 samples, 0.33%)</title><rect x="179.9" y="1733" width="3.9" height="15.0" fill="rgb(254,35,5)" rx="2" ry="2" />
<text  x="182.91" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="389" width="0.5" height="15.0" fill="rgb(243,86,15)" rx="2" ry="2" />
<text  x="1190.21" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1589" width="0.6" height="15.0" fill="rgb(251,205,50)" rx="2" ry="2" />
<text  x="1190.15" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1445" width="0.3" height="15.0" fill="rgb(218,57,14)" rx="2" ry="2" />
<text  x="1189.79" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1669" width="0.1" height="15.0" fill="rgb(212,41,19)" rx="2" ry="2" />
<text  x="218.43" y="1679.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (7 samples, 0.04%)</title><rect x="1118.3" y="2037" width="0.4" height="15.0" fill="rgb(227,56,19)" rx="2" ry="2" />
<text  x="1121.26" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="207.5" y="1781" width="0.1" height="15.0" fill="rgb(224,172,8)" rx="2" ry="2" />
<text  x="210.47" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="185.0" y="1861" width="0.1" height="15.0" fill="rgb(218,196,13)" rx="2" ry="2" />
<text  x="187.96" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1829" width="0.6" height="15.0" fill="rgb(214,204,38)" rx="2" ry="2" />
<text  x="1190.15" y="1839.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (504 samples, 2.54%)</title><rect x="186.1" y="1989" width="30.0" height="15.0" fill="rgb(224,217,30)" rx="2" ry="2" />
<text  x="189.15" y="1999.5" >TA..</text>
</g>
<g >
<title>flush_tlb_mm_range (4 samples, 0.02%)</title><rect x="520.7" y="1909" width="0.3" height="15.0" fill="rgb(223,105,25)" rx="2" ry="2" />
<text  x="523.75" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="215.7" y="1189" width="0.3" height="15.0" fill="rgb(225,30,10)" rx="2" ry="2" />
<text  x="218.66" y="1199.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="1095.6" y="1813" width="0.1" height="15.0" fill="rgb(252,196,28)" rx="2" ry="2" />
<text  x="1098.57" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (22 samples, 0.11%)</title><rect x="485.4" y="1925" width="1.3" height="15.0" fill="rgb(230,57,11)" rx="2" ry="2" />
<text  x="488.41" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.9" y="1061" width="0.1" height="15.0" fill="rgb(225,188,13)" rx="2" ry="2" />
<text  x="218.90" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (4 samples, 0.02%)</title><rect x="144.5" y="1605" width="0.2" height="15.0" fill="rgb(211,119,49)" rx="2" ry="2" />
<text  x="147.46" y="1615.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.03%)</title><rect x="143.6" y="1605" width="0.3" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="146.57" y="1615.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="139.7" y="1589" width="0.2" height="15.0" fill="rgb(242,98,31)" rx="2" ry="2" />
<text  x="142.71" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (40 samples, 0.20%)</title><rect x="181.0" y="1669" width="2.4" height="15.0" fill="rgb(248,26,9)" rx="2" ry="2" />
<text  x="184.04" y="1679.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (84 samples, 0.42%)</title><rect x="32.5" y="2021" width="5.0" height="15.0" fill="rgb(253,163,35)" rx="2" ry="2" />
<text  x="35.51" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (6 samples, 0.03%)</title><rect x="132.0" y="1685" width="0.3" height="15.0" fill="rgb(253,164,45)" rx="2" ry="2" />
<text  x="134.99" y="1695.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.03%)</title><rect x="209.1" y="1685" width="0.4" height="15.0" fill="rgb(206,157,33)" rx="2" ry="2" />
<text  x="212.13" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="2021" width="0.6" height="15.0" fill="rgb(239,226,29)" rx="2" ry="2" />
<text  x="1190.15" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="215.8" y="1125" width="0.2" height="15.0" fill="rgb(240,42,20)" rx="2" ry="2" />
<text  x="218.84" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="207.5" y="1797" width="0.1" height="15.0" fill="rgb(236,80,11)" rx="2" ry="2" />
<text  x="210.47" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (7 samples, 0.04%)</title><rect x="184.4" y="1829" width="0.4" height="15.0" fill="rgb(233,43,38)" rx="2" ry="2" />
<text  x="187.37" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="42.8" y="2021" width="0.2" height="15.0" fill="rgb(224,123,29)" rx="2" ry="2" />
<text  x="45.84" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1909" width="0.5" height="15.0" fill="rgb(210,206,45)" rx="2" ry="2" />
<text  x="1189.61" y="1919.5" ></text>
</g>
<g >
<title>std::__create_task_state&lt;boost::optional&lt;TDocument&gt;  (2 samples, 0.01%)</title><rect x="130.9" y="1989" width="0.1" height="15.0" fill="rgb(214,33,22)" rx="2" ry="2" />
<text  x="133.86" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (78 samples, 0.39%)</title><rect x="141.8" y="1733" width="4.7" height="15.0" fill="rgb(246,92,29)" rx="2" ry="2" />
<text  x="144.84" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="261" width="0.2" height="15.0" fill="rgb(222,203,27)" rx="2" ry="2" />
<text  x="1189.85" y="271.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="932.7" y="2021" width="0.1" height="15.0" fill="rgb(252,102,7)" rx="2" ry="2" />
<text  x="935.67" y="2031.5" ></text>
</g>
<g >
<title>GetHost (444 samples, 2.23%)</title><rect x="131.9" y="1973" width="26.3" height="15.0" fill="rgb(238,216,30)" rx="2" ry="2" />
<text  x="134.87" y="1983.5" >G..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (75 samples, 0.38%)</title><rect x="1156.5" y="2037" width="4.5" height="15.0" fill="rgb(205,160,49)" rx="2" ry="2" />
<text  x="1159.50" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (5 samples, 0.03%)</title><rect x="595.1" y="1877" width="0.3" height="15.0" fill="rgb(241,146,31)" rx="2" ry="2" />
<text  x="598.10" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1797" width="0.5" height="15.0" fill="rgb(221,219,44)" rx="2" ry="2" />
<text  x="1189.14" y="1807.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (302 samples, 1.52%)</title><rect x="381.4" y="1941" width="17.9" height="15.0" fill="rgb(219,216,32)" rx="2" ry="2" />
<text  x="384.36" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="187.0" y="1589" width="0.2" height="15.0" fill="rgb(227,129,48)" rx="2" ry="2" />
<text  x="190.04" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_eat_escape_ecma (2 samples, 0.01%)</title><rect x="213.7" y="1717" width="0.1" height="15.0" fill="rgb(253,222,32)" rx="2" ry="2" />
<text  x="216.70" y="1727.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="167.2" y="1573" width="0.2" height="15.0" fill="rgb(206,44,4)" rx="2" ry="2" />
<text  x="170.20" y="1583.5" ></text>
</g>
<g >
<title>smp_call_function_single (21 samples, 0.11%)</title><rect x="938.3" y="1829" width="1.3" height="15.0" fill="rgb(223,176,3)" rx="2" ry="2" />
<text  x="941.31" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.65%)</title><rect x="56.0" y="853" width="19.4" height="15.0" fill="rgb(240,44,42)" rx="2" ry="2" />
<text  x="59.03" y="863.5" ></text>
</g>
<g >
<title>main (6,687 samples, 33.66%)</title><rect x="121.5" y="2021" width="397.2" height="15.0" fill="rgb(245,19,18)" rx="2" ry="2" />
<text  x="124.53" y="2031.5" >main</text>
</g>
<g >
<title>__libc_read (4 samples, 0.02%)</title><rect x="1107.1" y="2037" width="0.2" height="15.0" fill="rgb(219,142,42)" rx="2" ry="2" />
<text  x="1110.09" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="613" width="0.4" height="15.0" fill="rgb(247,92,15)" rx="2" ry="2" />
<text  x="1189.20" y="623.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="167.6" y="1573" width="0.1" height="15.0" fill="rgb(209,53,6)" rx="2" ry="2" />
<text  x="170.56" y="1583.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="760.3" y="1909" width="0.1" height="15.0" fill="rgb(237,208,44)" rx="2" ry="2" />
<text  x="763.26" y="1919.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (3 samples, 0.02%)</title><rect x="517.7" y="1989" width="0.2" height="15.0" fill="rgb(222,69,35)" rx="2" ry="2" />
<text  x="520.72" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (4 samples, 0.02%)</title><rect x="214.1" y="1829" width="0.2" height="15.0" fill="rgb(251,50,1)" rx="2" ry="2" />
<text  x="217.06" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (448 samples, 2.25%)</title><rect x="158.5" y="1925" width="26.6" height="15.0" fill="rgb(230,170,54)" rx="2" ry="2" />
<text  x="161.53" y="1935.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="725" width="0.2" height="15.0" fill="rgb(241,183,27)" rx="2" ry="2" />
<text  x="1189.85" y="735.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.02%)</title><rect x="866.2" y="1941" width="0.1" height="15.0" fill="rgb(252,71,35)" rx="2" ry="2" />
<text  x="869.15" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (245 samples, 1.23%)</title><rect x="132.0" y="1781" width="14.5" height="15.0" fill="rgb(207,175,45)" rx="2" ry="2" />
<text  x="134.99" y="1791.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (20 samples, 0.10%)</title><rect x="759.0" y="1957" width="1.2" height="15.0" fill="rgb(228,179,20)" rx="2" ry="2" />
<text  x="762.01" y="1967.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="84.9" y="1541" width="0.1" height="15.0" fill="rgb(228,12,20)" rx="2" ry="2" />
<text  x="87.89" y="1551.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (6 samples, 0.03%)</title><rect x="132.0" y="1653" width="0.3" height="15.0" fill="rgb(243,161,20)" rx="2" ry="2" />
<text  x="134.99" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="76.3" y="1141" width="0.2" height="15.0" fill="rgb(249,201,28)" rx="2" ry="2" />
<text  x="79.34" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="805" width="0.2" height="15.0" fill="rgb(231,58,48)" rx="2" ry="2" />
<text  x="1189.85" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1317" width="0.5" height="15.0" fill="rgb(252,165,47)" rx="2" ry="2" />
<text  x="218.55" y="1327.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="166.7" y="1573" width="0.1" height="15.0" fill="rgb(210,214,35)" rx="2" ry="2" />
<text  x="169.73" y="1583.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="200.5" y="1605" width="0.1" height="15.0" fill="rgb(229,33,49)" rx="2" ry="2" />
<text  x="203.46" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (121 samples, 0.61%)</title><rect x="606.8" y="1861" width="7.2" height="15.0" fill="rgb(224,163,16)" rx="2" ry="2" />
<text  x="609.80" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (417 samples, 2.10%)</title><rect x="56.0" y="1429" width="24.8" height="15.0" fill="rgb(213,112,4)" rx="2" ry="2" />
<text  x="59.03" y="1439.5" >[..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1957" width="0.3" height="15.0" fill="rgb(245,202,35)" rx="2" ry="2" />
<text  x="520.42" y="1967.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="1013.1" y="2037" width="0.2" height="15.0" fill="rgb(245,81,32)" rx="2" ry="2" />
<text  x="1016.08" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1669" width="0.5" height="15.0" fill="rgb(212,11,34)" rx="2" ry="2" />
<text  x="1189.14" y="1679.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.01%)</title><rect x="1107.2" y="1861" width="0.1" height="15.0" fill="rgb(223,78,25)" rx="2" ry="2" />
<text  x="1110.21" y="1871.5" ></text>
</g>
<g >
<title>__asan_memset (10 samples, 0.05%)</title><rect x="592.7" y="1877" width="0.6" height="15.0" fill="rgb(237,94,7)" rx="2" ry="2" />
<text  x="595.72" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1989" width="0.6" height="15.0" fill="rgb(245,17,10)" rx="2" ry="2" />
<text  x="1190.15" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (429 samples, 2.16%)</title><rect x="158.7" y="1845" width="25.5" height="15.0" fill="rgb(239,197,7)" rx="2" ry="2" />
<text  x="161.71" y="1855.5" >s..</text>
</g>
<g >
<title>fasttext::Matrix::size (3 samples, 0.02%)</title><rect x="762.3" y="2037" width="0.2" height="15.0" fill="rgb(249,68,24)" rx="2" ry="2" />
<text  x="765.28" y="2047.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (21 samples, 0.11%)</title><rect x="938.3" y="1861" width="1.3" height="15.0" fill="rgb(211,149,9)" rx="2" ry="2" />
<text  x="941.31" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (8 samples, 0.04%)</title><rect x="91.0" y="2021" width="0.5" height="15.0" fill="rgb(225,21,35)" rx="2" ry="2" />
<text  x="94.01" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="184.8" y="1813" width="0.2" height="15.0" fill="rgb(241,169,43)" rx="2" ry="2" />
<text  x="187.78" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="196.8" y="1701" width="5.3" height="15.0" fill="rgb(253,128,51)" rx="2" ry="2" />
<text  x="199.84" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3 samples, 0.02%)</title><rect x="97.0" y="2021" width="0.2" height="15.0" fill="rgb(214,18,12)" rx="2" ry="2" />
<text  x="100.00" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1813" width="0.4" height="15.0" fill="rgb(219,141,21)" rx="2" ry="2" />
<text  x="160.70" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (133 samples, 0.67%)</title><rect x="1005.1" y="2053" width="7.9" height="15.0" fill="rgb(229,199,7)" rx="2" ry="2" />
<text  x="1008.12" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="437" width="0.2" height="15.0" fill="rgb(236,217,33)" rx="2" ry="2" />
<text  x="1189.85" y="447.5" ></text>
</g>
<g >
<title>clear_page_erms (11 samples, 0.06%)</title><rect x="25.8" y="1925" width="0.7" height="15.0" fill="rgb(239,71,52)" rx="2" ry="2" />
<text  x="28.80" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1381" width="0.1" height="15.0" fill="rgb(224,191,12)" rx="2" ry="2" />
<text  x="161.00" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (396 samples, 1.99%)</title><rect x="56.0" y="1365" width="23.5" height="15.0" fill="rgb(239,208,3)" rx="2" ry="2" />
<text  x="59.03" y="1375.5" >[..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (2 samples, 0.01%)</title><rect x="157.1" y="1749" width="0.1" height="15.0" fill="rgb(222,3,2)" rx="2" ry="2" />
<text  x="160.11" y="1759.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="151.2" y="1669" width="0.1" height="15.0" fill="rgb(220,221,44)" rx="2" ry="2" />
<text  x="154.23" y="1679.5" ></text>
</g>
<g >
<title>__do_munmap (6 samples, 0.03%)</title><rect x="760.3" y="1957" width="0.3" height="15.0" fill="rgb(223,17,16)" rx="2" ry="2" />
<text  x="763.26" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.6" y="1765" width="0.1" height="15.0" fill="rgb(242,195,34)" rx="2" ry="2" />
<text  x="89.61" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1557" width="0.1" height="15.0" fill="rgb(231,7,16)" rx="2" ry="2" />
<text  x="188.26" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1125" width="0.3" height="15.0" fill="rgb(208,58,27)" rx="2" ry="2" />
<text  x="1189.79" y="1135.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (10 samples, 0.05%)</title><rect x="987.7" y="2053" width="0.6" height="15.0" fill="rgb(209,57,10)" rx="2" ry="2" />
<text  x="990.72" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="184.7" y="1765" width="0.1" height="15.0" fill="rgb(231,216,21)" rx="2" ry="2" />
<text  x="187.66" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="373" width="0.5" height="15.0" fill="rgb(224,160,7)" rx="2" ry="2" />
<text  x="1190.21" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.7" y="1701" width="0.4" height="15.0" fill="rgb(232,29,34)" rx="2" ry="2" />
<text  x="1189.67" y="1711.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number@plt (2 samples, 0.01%)</title><rect x="729.4" y="1893" width="0.1" height="15.0" fill="rgb(223,52,3)" rx="2" ry="2" />
<text  x="732.38" y="1903.5" ></text>
</g>
<g >
<title>Rank (913 samples, 4.60%)</title><rect x="131.8" y="2005" width="54.2" height="15.0" fill="rgb(216,185,26)" rx="2" ry="2" />
<text  x="134.81" y="2015.5" >Rank</text>
</g>
<g >
<title>try_to_wake_up (8 samples, 0.04%)</title><rect x="29.3" y="1893" width="0.5" height="15.0" fill="rgb(211,102,10)" rx="2" ry="2" />
<text  x="32.30" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (559 samples, 2.81%)</title><rect x="56.0" y="1909" width="33.2" height="15.0" fill="rgb(212,109,0)" rx="2" ry="2" />
<text  x="58.97" y="1919.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (80 samples, 0.40%)</title><rect x="146.6" y="1701" width="4.7" height="15.0" fill="rgb(254,125,39)" rx="2" ry="2" />
<text  x="149.59" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.06%)</title><rect x="761.1" y="2021" width="0.6" height="15.0" fill="rgb(234,167,9)" rx="2" ry="2" />
<text  x="764.09" y="2031.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="89.3" y="1845" width="0.1" height="15.0" fill="rgb(228,138,20)" rx="2" ry="2" />
<text  x="92.28" y="1855.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.02%)</title><rect x="131.3" y="1957" width="0.3" height="15.0" fill="rgb(241,76,44)" rx="2" ry="2" />
<text  x="134.33" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1685" width="0.1" height="15.0" fill="rgb(240,177,38)" rx="2" ry="2" />
<text  x="188.26" y="1695.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="477.4" y="1941" width="0.2" height="15.0" fill="rgb(232,7,10)" rx="2" ry="2" />
<text  x="480.39" y="1951.5" ></text>
</g>
<g >
<title>vma_merge (5 samples, 0.03%)</title><rect x="759.6" y="1909" width="0.3" height="15.0" fill="rgb(223,176,31)" rx="2" ry="2" />
<text  x="762.61" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="84.0" y="1589" width="0.1" height="15.0" fill="rgb(213,151,24)" rx="2" ry="2" />
<text  x="87.00" y="1599.5" ></text>
</g>
<g >
<title>generic_exec_single (3 samples, 0.02%)</title><rect x="55.5" y="1797" width="0.2" height="15.0" fill="rgb(241,98,20)" rx="2" ry="2" />
<text  x="58.49" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1685" width="0.2" height="15.0" fill="rgb(229,102,28)" rx="2" ry="2" />
<text  x="188.44" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="277" width="0.4" height="15.0" fill="rgb(212,39,49)" rx="2" ry="2" />
<text  x="1189.20" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="613" width="0.2" height="15.0" fill="rgb(210,144,53)" rx="2" ry="2" />
<text  x="1189.85" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1829" width="0.4" height="15.0" fill="rgb(246,138,40)" rx="2" ry="2" />
<text  x="188.20" y="1839.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5 samples, 0.03%)</title><rect x="756.3" y="1957" width="0.3" height="15.0" fill="rgb(245,36,34)" rx="2" ry="2" />
<text  x="759.28" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="516.4" y="1957" width="0.3" height="15.0" fill="rgb(247,221,36)" rx="2" ry="2" />
<text  x="519.35" y="1967.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (204 samples, 1.03%)</title><rect x="705.4" y="1877" width="12.1" height="15.0" fill="rgb(206,13,41)" rx="2" ry="2" />
<text  x="708.39" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1877" width="0.6" height="15.0" fill="rgb(221,61,8)" rx="2" ry="2" />
<text  x="1190.15" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (85 samples, 0.43%)</title><rect x="132.0" y="1733" width="5.0" height="15.0" fill="rgb(228,204,8)" rx="2" ry="2" />
<text  x="134.99" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="661" width="0.5" height="15.0" fill="rgb(235,201,43)" rx="2" ry="2" />
<text  x="1190.21" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (28 samples, 0.14%)</title><rect x="1188.3" y="2053" width="1.6" height="15.0" fill="rgb(243,172,13)" rx="2" ry="2" />
<text  x="1191.28" y="2063.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.04%)</title><rect x="163.8" y="1541" width="0.4" height="15.0" fill="rgb(227,80,51)" rx="2" ry="2" />
<text  x="166.82" y="1551.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.03%)</title><rect x="145.3" y="1605" width="0.3" height="15.0" fill="rgb(230,172,25)" rx="2" ry="2" />
<text  x="148.29" y="1615.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (25 samples, 0.13%)</title><rect x="1094.9" y="2005" width="1.5" height="15.0" fill="rgb(243,153,3)" rx="2" ry="2" />
<text  x="1097.92" y="2015.5" ></text>
</g>
<g >
<title>Eigen::internal::product_evaluator&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, 0&gt;, 8, Eigen::DenseShape, Eigen::DenseShape, float, float&gt;::product_evaluator (169 samples, 0.85%)</title><rect x="495.7" y="1957" width="10.0" height="15.0" fill="rgb(215,192,26)" rx="2" ry="2" />
<text  x="498.68" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (30 samples, 0.15%)</title><rect x="1014.0" y="2053" width="1.8" height="15.0" fill="rgb(231,161,37)" rx="2" ry="2" />
<text  x="1016.97" y="2063.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="322.0" y="1941" width="0.1" height="15.0" fill="rgb(218,200,4)" rx="2" ry="2" />
<text  x="324.97" y="1951.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.02%)</title><rect x="26.5" y="1925" width="0.1" height="15.0" fill="rgb(212,126,5)" rx="2" ry="2" />
<text  x="29.45" y="1935.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="151.0" y="1653" width="0.1" height="15.0" fill="rgb(217,154,12)" rx="2" ry="2" />
<text  x="153.99" y="1663.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.02%)</title><rect x="1097.2" y="1845" width="0.2" height="15.0" fill="rgb(242,85,6)" rx="2" ry="2" />
<text  x="1100.17" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (516 samples, 2.60%)</title><rect x="56.0" y="1765" width="30.6" height="15.0" fill="rgb(211,118,49)" rx="2" ry="2" />
<text  x="58.97" y="1775.5" >[u..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="205.7" y="1637" width="0.1" height="15.0" fill="rgb(216,217,22)" rx="2" ry="2" />
<text  x="208.69" y="1647.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="168.1" y="1573" width="0.2" height="15.0" fill="rgb(252,34,23)" rx="2" ry="2" />
<text  x="171.09" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="758.6" y="2005" width="0.2" height="15.0" fill="rgb(253,51,13)" rx="2" ry="2" />
<text  x="761.60" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1253" width="0.1" height="15.0" fill="rgb(237,11,24)" rx="2" ry="2" />
<text  x="188.26" y="1263.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.02%)</title><rect x="1107.1" y="2021" width="0.2" height="15.0" fill="rgb(215,37,11)" rx="2" ry="2" />
<text  x="1110.09" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="853" width="0.5" height="15.0" fill="rgb(253,57,15)" rx="2" ry="2" />
<text  x="1190.21" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (76 samples, 0.38%)</title><rect x="165.1" y="1701" width="4.5" height="15.0" fill="rgb(245,13,12)" rx="2" ry="2" />
<text  x="168.12" y="1711.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.04%)</title><rect x="1097.0" y="2053" width="0.5" height="15.0" fill="rgb(234,38,40)" rx="2" ry="2" />
<text  x="1100.00" y="2063.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="139.2" y="1589" width="0.3" height="15.0" fill="rgb(210,46,45)" rx="2" ry="2" />
<text  x="142.23" y="1599.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char (2 samples, 0.01%)</title><rect x="572.5" y="1893" width="0.2" height="15.0" fill="rgb(212,227,29)" rx="2" ry="2" />
<text  x="575.53" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="170.9" y="1605" width="0.1" height="15.0" fill="rgb(246,210,0)" rx="2" ry="2" />
<text  x="173.88" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1525" width="0.2" height="15.0" fill="rgb(221,103,20)" rx="2" ry="2" />
<text  x="188.44" y="1535.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (853 samples, 4.29%)</title><rect x="581.7" y="1893" width="50.7" height="15.0" fill="rgb(253,115,41)" rx="2" ry="2" />
<text  x="584.74" y="1903.5" >onmt:..</text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="868.4" y="1973" width="0.1" height="15.0" fill="rgb(241,106,0)" rx="2" ry="2" />
<text  x="871.41" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (62 samples, 0.31%)</title><rect x="124.7" y="1925" width="3.7" height="15.0" fill="rgb(211,47,6)" rx="2" ry="2" />
<text  x="127.68" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (8 samples, 0.04%)</title><rect x="158.9" y="1653" width="0.5" height="15.0" fill="rgb(237,166,12)" rx="2" ry="2" />
<text  x="161.89" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="421" width="0.5" height="15.0" fill="rgb(243,203,38)" rx="2" ry="2" />
<text  x="1190.21" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="885" width="0.4" height="15.0" fill="rgb(228,155,16)" rx="2" ry="2" />
<text  x="1189.20" y="895.5" ></text>
</g>
<g >
<title>fasttext::Loss::predict (12 samples, 0.06%)</title><rect x="1098.0" y="2053" width="0.7" height="15.0" fill="rgb(222,90,19)" rx="2" ry="2" />
<text  x="1101.01" y="2063.5" ></text>
</g>
<g >
<title>__handle_mm_fault (38 samples, 0.19%)</title><rect x="25.2" y="1973" width="2.3" height="15.0" fill="rgb(232,112,4)" rx="2" ry="2" />
<text  x="28.20" y="1983.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (5 samples, 0.03%)</title><rect x="802.8" y="2037" width="0.3" height="15.0" fill="rgb(230,135,48)" rx="2" ry="2" />
<text  x="805.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="229" width="0.2" height="15.0" fill="rgb(251,117,10)" rx="2" ry="2" />
<text  x="1189.85" y="239.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="200.0" y="1605" width="0.2" height="15.0" fill="rgb(235,163,53)" rx="2" ry="2" />
<text  x="203.04" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (64 samples, 0.32%)</title><rect x="132.8" y="1589" width="3.8" height="15.0" fill="rgb(220,195,47)" rx="2" ry="2" />
<text  x="135.76" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="214.7" y="1765" width="0.1" height="15.0" fill="rgb(241,176,12)" rx="2" ry="2" />
<text  x="217.71" y="1775.5" ></text>
</g>
<g >
<title>from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="538.4" y="1957" width="0.1" height="15.0" fill="rgb(220,139,24)" rx="2" ry="2" />
<text  x="541.38" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="154.1" y="1669" width="0.4" height="15.0" fill="rgb(208,187,19)" rx="2" ry="2" />
<text  x="157.14" y="1679.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="1093.0" y="2037" width="0.1" height="15.0" fill="rgb(231,169,53)" rx="2" ry="2" />
<text  x="1095.96" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="615.9" y="1845" width="0.2" height="15.0" fill="rgb(205,5,7)" rx="2" ry="2" />
<text  x="618.95" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="837" width="0.1" height="15.0" fill="rgb(219,198,13)" rx="2" ry="2" />
<text  x="160.82" y="847.5" ></text>
</g>
<g >
<title>[unknown] (360 samples, 1.81%)</title><rect x="56.0" y="1221" width="21.4" height="15.0" fill="rgb(229,138,18)" rx="2" ry="2" />
<text  x="59.03" y="1231.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="202.2" y="1781" width="5.3" height="15.0" fill="rgb(241,16,34)" rx="2" ry="2" />
<text  x="205.24" y="1791.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="1097.7" y="1925" width="0.1" height="15.0" fill="rgb(210,53,23)" rx="2" ry="2" />
<text  x="1100.71" y="1935.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (573 samples, 2.88%)</title><rect x="657.3" y="1877" width="34.0" height="15.0" fill="rgb(213,23,37)" rx="2" ry="2" />
<text  x="660.28" y="1887.5" >on..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="229" width="0.4" height="15.0" fill="rgb(226,138,31)" rx="2" ry="2" />
<text  x="1190.27" y="239.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 1.65%)</title><rect x="56.0" y="885" width="19.5" height="15.0" fill="rgb(240,229,5)" rx="2" ry="2" />
<text  x="59.03" y="895.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="80.5" y="1413" width="0.2" height="15.0" fill="rgb(252,45,7)" rx="2" ry="2" />
<text  x="83.49" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (325 samples, 1.64%)</title><rect x="56.0" y="645" width="19.3" height="15.0" fill="rgb(208,56,14)" rx="2" ry="2" />
<text  x="59.03" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (79 samples, 0.40%)</title><rect x="151.8" y="1733" width="4.7" height="15.0" fill="rgb(227,9,8)" rx="2" ry="2" />
<text  x="154.76" y="1743.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (30 samples, 0.15%)</title><rect x="864.9" y="1989" width="1.8" height="15.0" fill="rgb(217,91,23)" rx="2" ry="2" />
<text  x="867.90" y="1999.5" ></text>
</g>
<g >
<title>do_syscall_64 (26 samples, 0.13%)</title><rect x="1094.9" y="2021" width="1.6" height="15.0" fill="rgb(242,68,39)" rx="2" ry="2" />
<text  x="1097.92" y="2031.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="315.6" y="1957" width="0.1" height="15.0" fill="rgb(251,2,50)" rx="2" ry="2" />
<text  x="318.62" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (17 samples, 0.09%)</title><rect x="867.7" y="2037" width="1.0" height="15.0" fill="rgb(227,30,31)" rx="2" ry="2" />
<text  x="870.70" y="2047.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (325 samples, 1.64%)</title><rect x="221.8" y="1957" width="19.3" height="15.0" fill="rgb(242,93,31)" rx="2" ry="2" />
<text  x="224.84" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1621" width="0.5" height="15.0" fill="rgb(249,19,36)" rx="2" ry="2" />
<text  x="1189.14" y="1631.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (6 samples, 0.03%)</title><rect x="762.5" y="2037" width="0.3" height="15.0" fill="rgb(237,130,12)" rx="2" ry="2" />
<text  x="765.46" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (2 samples, 0.01%)</title><rect x="1116.4" y="2053" width="0.1" height="15.0" fill="rgb(236,101,40)" rx="2" ry="2" />
<text  x="1119.42" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (33 samples, 0.17%)</title><rect x="868.7" y="2037" width="2.0" height="15.0" fill="rgb(232,159,52)" rx="2" ry="2" />
<text  x="871.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1637" width="0.5" height="15.0" fill="rgb(252,77,29)" rx="2" ry="2" />
<text  x="1189.14" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1781" width="0.4" height="15.0" fill="rgb(207,45,50)" rx="2" ry="2" />
<text  x="160.70" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (447 samples, 2.25%)</title><rect x="56.0" y="1525" width="26.6" height="15.0" fill="rgb(240,131,2)" rx="2" ry="2" />
<text  x="59.03" y="1535.5" >[..</text>
</g>
<g >
<title>__madvise (13 samples, 0.07%)</title><rect x="520.5" y="2037" width="0.8" height="15.0" fill="rgb(217,56,12)" rx="2" ry="2" />
<text  x="523.51" y="2047.5" ></text>
</g>
<g >
<title>clear_page_erms (6 samples, 0.03%)</title><rect x="497.0" y="1813" width="0.3" height="15.0" fill="rgb(215,111,19)" rx="2" ry="2" />
<text  x="499.99" y="1823.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;char const  (4 samples, 0.02%)</title><rect x="516.1" y="2005" width="0.3" height="15.0" fill="rgb(207,208,13)" rx="2" ry="2" />
<text  x="519.11" y="2015.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="149.6" y="1637" width="0.1" height="15.0" fill="rgb(241,113,13)" rx="2" ry="2" />
<text  x="152.56" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="501" width="0.5" height="15.0" fill="rgb(227,120,4)" rx="2" ry="2" />
<text  x="1190.21" y="511.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="497.6" y="1813" width="0.2" height="15.0" fill="rgb(236,59,14)" rx="2" ry="2" />
<text  x="500.64" y="1823.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="161.4" y="1541" width="0.1" height="15.0" fill="rgb(209,12,16)" rx="2" ry="2" />
<text  x="164.38" y="1551.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="518.0" y="1973" width="0.1" height="15.0" fill="rgb(241,101,15)" rx="2" ry="2" />
<text  x="520.95" y="1983.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="759.3" y="1893" width="0.1" height="15.0" fill="rgb(225,228,41)" rx="2" ry="2" />
<text  x="762.25" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (313 samples, 1.58%)</title><rect x="56.0" y="69" width="18.6" height="15.0" fill="rgb(215,216,31)" rx="2" ry="2" />
<text  x="59.03" y="79.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="173.6" y="1605" width="0.1" height="15.0" fill="rgb(235,192,29)" rx="2" ry="2" />
<text  x="176.56" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1541" width="0.1" height="15.0" fill="rgb(252,96,33)" rx="2" ry="2" />
<text  x="188.26" y="1551.5" ></text>
</g>
<g >
<title>fasttext::FastText::createLoss (9 samples, 0.05%)</title><rect x="515.0" y="1973" width="0.5" height="15.0" fill="rgb(231,180,38)" rx="2" ry="2" />
<text  x="517.98" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="1893" width="0.5" height="15.0" fill="rgb(207,79,49)" rx="2" ry="2" />
<text  x="1189.61" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (418 samples, 2.10%)</title><rect x="131.9" y="1893" width="24.9" height="15.0" fill="rgb(223,170,9)" rx="2" ry="2" />
<text  x="134.93" y="1903.5" >s..</text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (8 samples, 0.04%)</title><rect x="936.9" y="1925" width="0.5" height="15.0" fill="rgb(226,84,19)" rx="2" ry="2" />
<text  x="939.94" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.14%)</title><rect x="805.9" y="2021" width="1.6" height="15.0" fill="rgb(241,176,16)" rx="2" ry="2" />
<text  x="808.93" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1013" width="0.4" height="15.0" fill="rgb(235,4,20)" rx="2" ry="2" />
<text  x="1189.20" y="1023.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="75.7" y="1029" width="0.2" height="15.0" fill="rgb(236,164,39)" rx="2" ry="2" />
<text  x="78.68" y="1039.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (320 samples, 1.61%)</title><rect x="380.8" y="1957" width="19.0" height="15.0" fill="rgb(247,33,5)" rx="2" ry="2" />
<text  x="383.77" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (345 samples, 1.74%)</title><rect x="56.0" y="1173" width="20.5" height="15.0" fill="rgb(252,83,18)" rx="2" ry="2" />
<text  x="59.03" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1605" width="0.2" height="15.0" fill="rgb(205,114,17)" rx="2" ry="2" />
<text  x="160.76" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1109" width="0.5" height="15.0" fill="rgb(215,42,25)" rx="2" ry="2" />
<text  x="1190.21" y="1119.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="138.2" y="1589" width="0.1" height="15.0" fill="rgb(227,209,8)" rx="2" ry="2" />
<text  x="141.16" y="1599.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="144.1" y="1605" width="0.1" height="15.0" fill="rgb(237,218,30)" rx="2" ry="2" />
<text  x="147.10" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6 samples, 0.03%)</title><rect x="805.5" y="2037" width="0.3" height="15.0" fill="rgb(215,90,42)" rx="2" ry="2" />
<text  x="808.46" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (81 samples, 0.41%)</title><rect x="22.9" y="2021" width="4.9" height="15.0" fill="rgb(243,207,30)" rx="2" ry="2" />
<text  x="25.95" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="485" width="0.5" height="15.0" fill="rgb(253,175,8)" rx="2" ry="2" />
<text  x="1190.21" y="495.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (27 samples, 0.14%)</title><rect x="487.0" y="1925" width="1.6" height="15.0" fill="rgb(218,107,17)" rx="2" ry="2" />
<text  x="489.95" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (574 samples, 2.89%)</title><rect x="56.0" y="1989" width="34.1" height="15.0" fill="rgb(231,50,49)" rx="2" ry="2" />
<text  x="58.97" y="1999.5" >[u..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="82.3" y="1493" width="0.2" height="15.0" fill="rgb(248,118,11)" rx="2" ry="2" />
<text  x="85.34" y="1503.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (121 samples, 0.61%)</title><rect x="123.1" y="1941" width="7.2" height="15.0" fill="rgb(245,7,46)" rx="2" ry="2" />
<text  x="126.14" y="1951.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="76.6" y="1173" width="0.1" height="15.0" fill="rgb(223,218,51)" rx="2" ry="2" />
<text  x="79.58" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (5 samples, 0.03%)</title><rect x="179.6" y="1765" width="0.3" height="15.0" fill="rgb(229,60,1)" rx="2" ry="2" />
<text  x="182.61" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1541" width="0.5" height="15.0" fill="rgb(230,77,37)" rx="2" ry="2" />
<text  x="218.55" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (428 samples, 2.15%)</title><rect x="131.9" y="1925" width="25.4" height="15.0" fill="rgb(231,197,12)" rx="2" ry="2" />
<text  x="134.93" y="1935.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (87 samples, 0.44%)</title><rect x="202.2" y="1701" width="5.2" height="15.0" fill="rgb(230,201,12)" rx="2" ry="2" />
<text  x="205.24" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1669" width="0.1" height="15.0" fill="rgb(231,188,21)" rx="2" ry="2" />
<text  x="161.00" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (87 samples, 0.44%)</title><rect x="202.2" y="1717" width="5.2" height="15.0" fill="rgb(213,45,34)" rx="2" ry="2" />
<text  x="205.24" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (9 samples, 0.05%)</title><rect x="186.4" y="1669" width="0.6" height="15.0" fill="rgb(227,63,19)" rx="2" ry="2" />
<text  x="189.44" y="1679.5" ></text>
</g>
<g >
<title>handle_mm_fault (9 samples, 0.05%)</title><rect x="652.9" y="1813" width="0.5" height="15.0" fill="rgb(248,110,9)" rx="2" ry="2" />
<text  x="655.89" y="1823.5" ></text>
</g>
<g >
<title>mmput (8 samples, 0.04%)</title><rect x="1097.0" y="1973" width="0.5" height="15.0" fill="rgb(213,148,40)" rx="2" ry="2" />
<text  x="1100.00" y="1983.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (24 samples, 0.12%)</title><rect x="938.3" y="1877" width="1.4" height="15.0" fill="rgb(239,126,40)" rx="2" ry="2" />
<text  x="941.25" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (313 samples, 1.58%)</title><rect x="56.0" y="101" width="18.6" height="15.0" fill="rgb(219,201,14)" rx="2" ry="2" />
<text  x="59.03" y="111.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.4" y="1829" width="0.3" height="15.0" fill="rgb(227,72,36)" rx="2" ry="2" />
<text  x="520.42" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="789" width="19.4" height="15.0" fill="rgb(251,82,30)" rx="2" ry="2" />
<text  x="59.03" y="799.5" ></text>
</g>
<g >
<title>GetHost (503 samples, 2.53%)</title><rect x="186.1" y="1973" width="29.9" height="15.0" fill="rgb(220,222,18)" rx="2" ry="2" />
<text  x="189.15" y="1983.5" >Ge..</text>
</g>
<g >
<title>[unknown] (330 samples, 1.66%)</title><rect x="56.0" y="981" width="19.6" height="15.0" fill="rgb(251,64,3)" rx="2" ry="2" />
<text  x="59.03" y="991.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (24 samples, 0.12%)</title><rect x="1175.0" y="2037" width="1.4" height="15.0" fill="rgb(254,144,26)" rx="2" ry="2" />
<text  x="1177.97" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1829" width="0.5" height="15.0" fill="rgb(207,160,33)" rx="2" ry="2" />
<text  x="1189.61" y="1839.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="653.3" y="1765" width="0.1" height="15.0" fill="rgb(209,172,14)" rx="2" ry="2" />
<text  x="656.30" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="661" width="0.1" height="15.0" fill="rgb(226,208,15)" rx="2" ry="2" />
<text  x="160.82" y="671.5" ></text>
</g>
<g >
<title>[unknown] (882 samples, 4.44%)</title><rect x="811.9" y="2021" width="52.4" height="15.0" fill="rgb(240,143,27)" rx="2" ry="2" />
<text  x="814.93" y="2031.5" >[unkn..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1717" width="0.1" height="15.0" fill="rgb(206,69,33)" rx="2" ry="2" />
<text  x="218.43" y="1727.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (2 samples, 0.01%)</title><rect x="567.0" y="1925" width="0.1" height="15.0" fill="rgb(244,67,17)" rx="2" ry="2" />
<text  x="569.95" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (49 samples, 0.25%)</title><rect x="138.0" y="1605" width="3.0" height="15.0" fill="rgb(224,138,27)" rx="2" ry="2" />
<text  x="141.04" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadContextBase::OnJoined (4 samples, 0.02%)</title><rect x="758.6" y="2037" width="0.2" height="15.0" fill="rgb(223,205,15)" rx="2" ry="2" />
<text  x="761.60" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt;@plt (2 samples, 0.01%)</title><rect x="173.4" y="1589" width="0.2" height="15.0" fill="rgb(213,147,8)" rx="2" ry="2" />
<text  x="176.44" y="1599.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="138.5" y="1589" width="0.1" height="15.0" fill="rgb(240,110,50)" rx="2" ry="2" />
<text  x="141.52" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (314 samples, 1.58%)</title><rect x="56.0" y="117" width="18.7" height="15.0" fill="rgb(254,185,22)" rx="2" ry="2" />
<text  x="59.03" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (23 samples, 0.12%)</title><rect x="758.9" y="2021" width="1.4" height="15.0" fill="rgb(251,217,15)" rx="2" ry="2" />
<text  x="761.90" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1861" width="0.5" height="15.0" fill="rgb(250,106,11)" rx="2" ry="2" />
<text  x="1189.14" y="1871.5" ></text>
</g>
<g >
<title>__handle_mm_fault (18 samples, 0.09%)</title><rect x="690.0" y="1781" width="1.1" height="15.0" fill="rgb(225,85,24)" rx="2" ry="2" />
<text  x="693.00" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (5 samples, 0.03%)</title><rect x="214.0" y="1861" width="0.3" height="15.0" fill="rgb(234,125,38)" rx="2" ry="2" />
<text  x="217.00" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_memcmp (9 samples, 0.05%)</title><rect x="1144.1" y="2037" width="0.5" height="15.0" fill="rgb(227,55,25)" rx="2" ry="2" />
<text  x="1147.09" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (6 samples, 0.03%)</title><rect x="132.0" y="1669" width="0.3" height="15.0" fill="rgb(213,206,6)" rx="2" ry="2" />
<text  x="134.99" y="1679.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::setConstant (2 samples, 0.01%)</title><rect x="381.0" y="1941" width="0.1" height="15.0" fill="rgb(240,22,3)" rx="2" ry="2" />
<text  x="384.00" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="965" width="0.1" height="15.0" fill="rgb(223,140,23)" rx="2" ry="2" />
<text  x="160.82" y="975.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="162.8" y="1541" width="0.3" height="15.0" fill="rgb(232,66,24)" rx="2" ry="2" />
<text  x="165.81" y="1551.5" ></text>
</g>
<g >
<title>finish_task_switch (3 samples, 0.02%)</title><rect x="131.4" y="1829" width="0.2" height="15.0" fill="rgb(229,155,51)" rx="2" ry="2" />
<text  x="134.39" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="195.4" y="1589" width="0.4" height="15.0" fill="rgb(231,61,16)" rx="2" ry="2" />
<text  x="198.35" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="79.2" y="1349" width="0.2" height="15.0" fill="rgb(237,162,43)" rx="2" ry="2" />
<text  x="82.19" y="1359.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="513.6" y="1957" width="0.1" height="15.0" fill="rgb(244,128,52)" rx="2" ry="2" />
<text  x="516.56" y="1967.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="866.4" y="1909" width="0.2" height="15.0" fill="rgb(251,227,48)" rx="2" ry="2" />
<text  x="869.45" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="691.1" y="1861" width="0.2" height="15.0" fill="rgb(247,89,10)" rx="2" ry="2" />
<text  x="694.13" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (315 samples, 1.59%)</title><rect x="56.0" y="197" width="18.7" height="15.0" fill="rgb(205,175,36)" rx="2" ry="2" />
<text  x="59.03" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (94 samples, 0.47%)</title><rect x="174.0" y="1749" width="5.6" height="15.0" fill="rgb(213,38,39)" rx="2" ry="2" />
<text  x="177.03" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="325" width="0.4" height="15.0" fill="rgb(225,135,3)" rx="2" ry="2" />
<text  x="1189.20" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1349" width="0.1" height="15.0" fill="rgb(239,80,39)" rx="2" ry="2" />
<text  x="160.82" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="677" width="0.4" height="15.0" fill="rgb(252,187,36)" rx="2" ry="2" />
<text  x="1189.20" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1221" width="0.4" height="15.0" fill="rgb(207,142,29)" rx="2" ry="2" />
<text  x="1189.20" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1301" width="0.1" height="15.0" fill="rgb(221,32,4)" rx="2" ry="2" />
<text  x="188.26" y="1311.5" ></text>
</g>
<g >
<title>__handle_mm_fault (19 samples, 0.10%)</title><rect x="496.6" y="1861" width="1.2" height="15.0" fill="rgb(236,124,52)" rx="2" ry="2" />
<text  x="499.63" y="1871.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="866.4" y="1941" width="0.2" height="15.0" fill="rgb(248,171,17)" rx="2" ry="2" />
<text  x="869.45" y="1951.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (7 samples, 0.04%)</title><rect x="520.7" y="1925" width="0.5" height="15.0" fill="rgb(254,158,28)" rx="2" ry="2" />
<text  x="523.75" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (71 samples, 0.36%)</title><rect x="737.6" y="1877" width="4.2" height="15.0" fill="rgb(214,86,54)" rx="2" ry="2" />
<text  x="740.57" y="1887.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (4 samples, 0.02%)</title><rect x="1107.1" y="1909" width="0.2" height="15.0" fill="rgb(222,224,24)" rx="2" ry="2" />
<text  x="1110.09" y="1919.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (3 samples, 0.02%)</title><rect x="866.9" y="2037" width="0.1" height="15.0" fill="rgb(247,72,49)" rx="2" ry="2" />
<text  x="869.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1909" width="0.6" height="15.0" fill="rgb(213,147,40)" rx="2" ry="2" />
<text  x="1190.15" y="1919.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, 0&gt; (2 samples, 0.01%)</title><rect x="122.8" y="1925" width="0.1" height="15.0" fill="rgb(236,195,12)" rx="2" ry="2" />
<text  x="125.78" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (73 samples, 0.37%)</title><rect x="132.5" y="1605" width="4.4" height="15.0" fill="rgb(222,216,12)" rx="2" ry="2" />
<text  x="135.52" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (56 samples, 0.28%)</title><rect x="180.4" y="1685" width="3.3" height="15.0" fill="rgb(233,217,24)" rx="2" ry="2" />
<text  x="183.39" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="188.8" y="1557" width="0.3" height="15.0" fill="rgb(243,140,17)" rx="2" ry="2" />
<text  x="191.82" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1093" width="0.4" height="15.0" fill="rgb(250,132,49)" rx="2" ry="2" />
<text  x="1189.20" y="1103.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="513.6" y="1909" width="0.1" height="15.0" fill="rgb(209,20,18)" rx="2" ry="2" />
<text  x="516.56" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="214.8" y="1813" width="0.2" height="15.0" fill="rgb(219,215,25)" rx="2" ry="2" />
<text  x="217.83" y="1823.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (71 samples, 0.36%)</title><rect x="981.5" y="2053" width="4.2" height="15.0" fill="rgb(236,189,11)" rx="2" ry="2" />
<text  x="984.49" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (9 samples, 0.05%)</title><rect x="186.4" y="1701" width="0.6" height="15.0" fill="rgb(207,165,53)" rx="2" ry="2" />
<text  x="189.44" y="1711.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (3 samples, 0.02%)</title><rect x="55.5" y="1765" width="0.2" height="15.0" fill="rgb(229,99,0)" rx="2" ry="2" />
<text  x="58.49" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="135.7" y="1557" width="0.4" height="15.0" fill="rgb(241,185,34)" rx="2" ry="2" />
<text  x="138.67" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="867.7" y="2005" width="0.1" height="15.0" fill="rgb(207,55,4)" rx="2" ry="2" />
<text  x="870.70" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (11 samples, 0.06%)</title><rect x="794.8" y="2037" width="0.7" height="15.0" fill="rgb(216,219,21)" rx="2" ry="2" />
<text  x="797.83" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="186.9" y="1621" width="0.1" height="15.0" fill="rgb(214,92,44)" rx="2" ry="2" />
<text  x="189.86" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="549" width="0.5" height="15.0" fill="rgb(254,70,45)" rx="2" ry="2" />
<text  x="1190.21" y="559.5" ></text>
</g>
<g >
<title>update_blocked_averages (2 samples, 0.01%)</title><rect x="680.0" y="1781" width="0.1" height="15.0" fill="rgb(213,42,46)" rx="2" ry="2" />
<text  x="683.03" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1701" width="0.6" height="15.0" fill="rgb(252,91,37)" rx="2" ry="2" />
<text  x="1190.15" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="199.5" y="1605" width="0.1" height="15.0" fill="rgb(239,5,50)" rx="2" ry="2" />
<text  x="202.45" y="1615.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.01%)</title><rect x="760.1" y="1877" width="0.1" height="15.0" fill="rgb(253,112,3)" rx="2" ry="2" />
<text  x="763.08" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="117" width="0.3" height="15.0" fill="rgb(238,184,39)" rx="2" ry="2" />
<text  x="1189.26" y="127.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="866.4" y="1957" width="0.2" height="15.0" fill="rgb(251,67,4)" rx="2" ry="2" />
<text  x="869.45" y="1967.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (5 samples, 0.03%)</title><rect x="1097.2" y="1877" width="0.3" height="15.0" fill="rgb(244,156,24)" rx="2" ry="2" />
<text  x="1100.17" y="1887.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.01%)</title><rect x="794.5" y="1973" width="0.1" height="15.0" fill="rgb(243,97,30)" rx="2" ry="2" />
<text  x="797.47" y="1983.5" ></text>
</g>
<g >
<title>handle_mm_fault (17 samples, 0.09%)</title><rect x="676.0" y="1797" width="1.0" height="15.0" fill="rgb(254,151,37)" rx="2" ry="2" />
<text  x="678.99" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1573" width="0.5" height="15.0" fill="rgb(214,10,24)" rx="2" ry="2" />
<text  x="218.55" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1333" width="0.1" height="15.0" fill="rgb(233,84,51)" rx="2" ry="2" />
<text  x="188.26" y="1343.5" ></text>
</g>
<g >
<title>handle_mm_fault (19 samples, 0.10%)</title><rect x="496.6" y="1877" width="1.2" height="15.0" fill="rgb(250,67,19)" rx="2" ry="2" />
<text  x="499.63" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="493.0" y="1941" width="0.1" height="15.0" fill="rgb(222,4,12)" rx="2" ry="2" />
<text  x="496.01" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1653" width="0.5" height="15.0" fill="rgb(219,15,20)" rx="2" ry="2" />
<text  x="1189.14" y="1663.5" ></text>
</g>
<g >
<title>all (19,869 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(231,219,18)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.14%)</title><rect x="803.1" y="2021" width="1.6" height="15.0" fill="rgb(235,136,52)" rx="2" ry="2" />
<text  x="806.14" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (13 samples, 0.07%)</title><rect x="215.2" y="1957" width="0.8" height="15.0" fill="rgb(234,70,13)" rx="2" ry="2" />
<text  x="218.25" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (2 samples, 0.01%)</title><rect x="132.4" y="1605" width="0.1" height="15.0" fill="rgb(247,170,37)" rx="2" ry="2" />
<text  x="135.40" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (9 samples, 0.05%)</title><rect x="156.8" y="1877" width="0.5" height="15.0" fill="rgb(226,3,0)" rx="2" ry="2" />
<text  x="159.75" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (27 samples, 0.14%)</title><rect x="803.1" y="2037" width="1.6" height="15.0" fill="rgb(250,70,39)" rx="2" ry="2" />
<text  x="806.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="981" width="0.4" height="15.0" fill="rgb(209,17,19)" rx="2" ry="2" />
<text  x="1189.20" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (90 samples, 0.45%)</title><rect x="207.9" y="1717" width="5.3" height="15.0" fill="rgb(247,88,27)" rx="2" ry="2" />
<text  x="210.88" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="214.1" y="1813" width="0.2" height="15.0" fill="rgb(220,77,0)" rx="2" ry="2" />
<text  x="217.06" y="1823.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 0.12%)</title><rect x="758.9" y="2005" width="1.4" height="15.0" fill="rgb(210,214,39)" rx="2" ry="2" />
<text  x="761.90" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1509" width="0.1" height="15.0" fill="rgb(247,174,20)" rx="2" ry="2" />
<text  x="218.43" y="1519.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="149.4" y="1637" width="0.2" height="15.0" fill="rgb(236,38,22)" rx="2" ry="2" />
<text  x="152.45" y="1647.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="159.7" y="1573" width="0.3" height="15.0" fill="rgb(243,194,23)" rx="2" ry="2" />
<text  x="162.72" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="215.8" y="1109" width="0.2" height="15.0" fill="rgb(206,155,26)" rx="2" ry="2" />
<text  x="218.84" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="885" width="0.1" height="15.0" fill="rgb(225,210,25)" rx="2" ry="2" />
<text  x="160.82" y="895.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="197.3" y="1637" width="0.1" height="15.0" fill="rgb(228,43,49)" rx="2" ry="2" />
<text  x="200.25" y="1647.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::next_byte_in_range (33 samples, 0.17%)</title><rect x="128.4" y="1925" width="1.9" height="15.0" fill="rgb(249,191,12)" rx="2" ry="2" />
<text  x="131.36" y="1935.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="195.0" y="1589" width="0.1" height="15.0" fill="rgb(248,129,45)" rx="2" ry="2" />
<text  x="198.00" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1253" width="0.4" height="15.0" fill="rgb(208,106,4)" rx="2" ry="2" />
<text  x="1189.20" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1781" width="0.6" height="15.0" fill="rgb(240,101,46)" rx="2" ry="2" />
<text  x="1190.15" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (12 samples, 0.06%)</title><rect x="535.1" y="1909" width="0.7" height="15.0" fill="rgb(207,208,43)" rx="2" ry="2" />
<text  x="538.12" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1397" width="0.1" height="15.0" fill="rgb(245,14,8)" rx="2" ry="2" />
<text  x="161.00" y="1407.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="42.8" y="2005" width="0.2" height="15.0" fill="rgb(241,211,35)" rx="2" ry="2" />
<text  x="45.84" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (6 samples, 0.03%)</title><rect x="593.8" y="1877" width="0.4" height="15.0" fill="rgb(245,90,0)" rx="2" ry="2" />
<text  x="596.79" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.65%)</title><rect x="56.0" y="869" width="19.4" height="15.0" fill="rgb(218,96,28)" rx="2" ry="2" />
<text  x="59.03" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.06%)</title><rect x="520.6" y="2021" width="0.7" height="15.0" fill="rgb(246,198,28)" rx="2" ry="2" />
<text  x="523.63" y="2031.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,276 samples, 6.42%)</title><rect x="399.8" y="1957" width="75.8" height="15.0" fill="rgb(247,92,3)" rx="2" ry="2" />
<text  x="402.77" y="1967.5" >fasttext..</text>
</g>
<g >
<title>unmap_vmas (7 samples, 0.04%)</title><rect x="1097.1" y="1941" width="0.4" height="15.0" fill="rgb(210,76,0)" rx="2" ry="2" />
<text  x="1100.06" y="1951.5" ></text>
</g>
<g >
<title>__handle_mm_fault (16 samples, 0.08%)</title><rect x="676.0" y="1781" width="0.9" height="15.0" fill="rgb(248,152,1)" rx="2" ry="2" />
<text  x="678.99" y="1791.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="76.6" y="1125" width="0.1" height="15.0" fill="rgb(209,165,28)" rx="2" ry="2" />
<text  x="79.58" y="1135.5" ></text>
</g>
<g >
<title>__asan_memset (5 samples, 0.03%)</title><rect x="577.3" y="1893" width="0.3" height="15.0" fill="rgb(208,134,29)" rx="2" ry="2" />
<text  x="580.28" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1157" width="0.5" height="15.0" fill="rgb(214,174,24)" rx="2" ry="2" />
<text  x="1190.21" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1813" width="0.5" height="15.0" fill="rgb(231,130,19)" rx="2" ry="2" />
<text  x="1189.14" y="1823.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (2 samples, 0.01%)</title><rect x="760.9" y="2037" width="0.1" height="15.0" fill="rgb(218,13,29)" rx="2" ry="2" />
<text  x="763.91" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (31 samples, 0.16%)</title><rect x="326.4" y="1973" width="1.9" height="15.0" fill="rgb(212,23,54)" rx="2" ry="2" />
<text  x="329.42" y="1983.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="176.4" y="1621" width="0.1" height="15.0" fill="rgb(248,213,3)" rx="2" ry="2" />
<text  x="179.41" y="1631.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (3 samples, 0.02%)</title><rect x="1095.4" y="1829" width="0.2" height="15.0" fill="rgb(227,111,9)" rx="2" ry="2" />
<text  x="1098.39" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="77.1" y="1189" width="0.1" height="15.0" fill="rgb(246,147,10)" rx="2" ry="2" />
<text  x="80.05" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1461" width="0.2" height="15.0" fill="rgb(230,111,35)" rx="2" ry="2" />
<text  x="188.44" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1013" width="0.1" height="15.0" fill="rgb(218,129,28)" rx="2" ry="2" />
<text  x="160.82" y="1023.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="151.4" y="1733" width="0.2" height="15.0" fill="rgb(231,134,26)" rx="2" ry="2" />
<text  x="154.41" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (13 samples, 0.07%)</title><rect x="214.4" y="1877" width="0.8" height="15.0" fill="rgb(210,195,12)" rx="2" ry="2" />
<text  x="217.42" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="169.2" y="1589" width="0.1" height="15.0" fill="rgb(245,84,54)" rx="2" ry="2" />
<text  x="172.16" y="1599.5" ></text>
</g>
<g >
<title>alloc_cpumask_var_node (2 samples, 0.01%)</title><rect x="939.6" y="1845" width="0.1" height="15.0" fill="rgb(231,166,21)" rx="2" ry="2" />
<text  x="942.56" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="204.4" y="1637" width="0.1" height="15.0" fill="rgb(211,59,32)" rx="2" ry="2" />
<text  x="207.38" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="156.5" y="1765" width="0.1" height="15.0" fill="rgb(219,55,7)" rx="2" ry="2" />
<text  x="159.51" y="1775.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (5 samples, 0.03%)</title><rect x="760.6" y="2037" width="0.3" height="15.0" fill="rgb(224,19,45)" rx="2" ry="2" />
<text  x="763.62" y="2047.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (5 samples, 0.03%)</title><rect x="508.0" y="1877" width="0.3" height="15.0" fill="rgb(247,100,29)" rx="2" ry="2" />
<text  x="510.98" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (87 samples, 0.44%)</title><rect x="196.9" y="1653" width="5.2" height="15.0" fill="rgb(213,24,44)" rx="2" ry="2" />
<text  x="199.90" y="1663.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (4 samples, 0.02%)</title><rect x="590.7" y="1877" width="0.2" height="15.0" fill="rgb(215,77,33)" rx="2" ry="2" />
<text  x="593.71" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="864.3" y="2037" width="0.1" height="15.0" fill="rgb(226,43,48)" rx="2" ry="2" />
<text  x="867.31" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="868.1" y="2021" width="0.2" height="15.0" fill="rgb(240,118,6)" rx="2" ry="2" />
<text  x="871.11" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1413" width="0.6" height="15.0" fill="rgb(212,1,38)" rx="2" ry="2" />
<text  x="1190.15" y="1423.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="520.8" y="1765" width="0.2" height="15.0" fill="rgb(248,171,52)" rx="2" ry="2" />
<text  x="523.80" y="1775.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.04%)</title><rect x="205.9" y="1637" width="0.4" height="15.0" fill="rgb(238,97,6)" rx="2" ry="2" />
<text  x="208.92" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="789" width="0.1" height="15.0" fill="rgb(227,143,2)" rx="2" ry="2" />
<text  x="160.82" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="629" width="0.1" height="15.0" fill="rgb(246,109,17)" rx="2" ry="2" />
<text  x="160.82" y="639.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (2 samples, 0.01%)</title><rect x="187.9" y="1573" width="0.1" height="15.0" fill="rgb(238,16,7)" rx="2" ry="2" />
<text  x="190.93" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1589" width="0.2" height="15.0" fill="rgb(231,126,52)" rx="2" ry="2" />
<text  x="188.44" y="1599.5" ></text>
</g>
<g >
<title>memcpy@plt (3 samples, 0.02%)</title><rect x="1106.3" y="2053" width="0.1" height="15.0" fill="rgb(239,107,53)" rx="2" ry="2" />
<text  x="1109.26" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (77 samples, 0.39%)</title><rect x="141.8" y="1701" width="4.6" height="15.0" fill="rgb(247,141,17)" rx="2" ry="2" />
<text  x="144.84" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="709" width="0.2" height="15.0" fill="rgb(210,131,51)" rx="2" ry="2" />
<text  x="1189.85" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="533" width="0.2" height="15.0" fill="rgb(239,111,10)" rx="2" ry="2" />
<text  x="1189.85" y="543.5" ></text>
</g>
<g >
<title>page_fault (120 samples, 0.60%)</title><rect x="932.8" y="2037" width="7.2" height="15.0" fill="rgb(239,140,18)" rx="2" ry="2" />
<text  x="935.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1237" width="0.4" height="15.0" fill="rgb(205,6,14)" rx="2" ry="2" />
<text  x="1189.20" y="1247.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (99 samples, 0.50%)</title><rect x="718.2" y="1877" width="5.8" height="15.0" fill="rgb(206,119,42)" rx="2" ry="2" />
<text  x="721.15" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (105 samples, 0.53%)</title><rect x="158.8" y="1701" width="6.3" height="15.0" fill="rgb(253,89,23)" rx="2" ry="2" />
<text  x="161.83" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="43.0" y="2005" width="0.1" height="15.0" fill="rgb(249,202,40)" rx="2" ry="2" />
<text  x="46.02" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1637" width="0.1" height="15.0" fill="rgb(216,2,17)" rx="2" ry="2" />
<text  x="188.26" y="1647.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 0.02%)</title><rect x="131.3" y="1909" width="0.3" height="15.0" fill="rgb(218,139,20)" rx="2" ry="2" />
<text  x="134.33" y="1919.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="143.9" y="1605" width="0.2" height="15.0" fill="rgb(232,83,36)" rx="2" ry="2" />
<text  x="146.92" y="1615.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (3 samples, 0.02%)</title><rect x="27.0" y="1941" width="0.2" height="15.0" fill="rgb(236,79,2)" rx="2" ry="2" />
<text  x="30.04" y="1951.5" ></text>
</g>
<g >
<title>__vma_adjust (2 samples, 0.01%)</title><rect x="1095.2" y="1893" width="0.1" height="15.0" fill="rgb(246,153,5)" rx="2" ry="2" />
<text  x="1098.22" y="1903.5" ></text>
</g>
<g >
<title>unmap_region (9 samples, 0.05%)</title><rect x="1095.3" y="1909" width="0.6" height="15.0" fill="rgb(210,135,35)" rx="2" ry="2" />
<text  x="1098.33" y="1919.5" ></text>
</g>
<g >
<title>__asan::asan_delete (7 samples, 0.04%)</title><rect x="1161.0" y="2037" width="0.4" height="15.0" fill="rgb(206,48,25)" rx="2" ry="2" />
<text  x="1163.96" y="2047.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDocument*, __gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (2 samples, 0.01%)</title><rect x="518.4" y="1973" width="0.1" height="15.0" fill="rgb(236,123,8)" rx="2" ry="2" />
<text  x="521.37" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (81 samples, 0.41%)</title><rect x="151.7" y="1797" width="4.8" height="15.0" fill="rgb(223,108,53)" rx="2" ry="2" />
<text  x="154.70" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1765" width="0.5" height="15.0" fill="rgb(254,57,1)" rx="2" ry="2" />
<text  x="1189.14" y="1775.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (204 samples, 1.03%)</title><rect x="29.8" y="2037" width="12.2" height="15.0" fill="rgb(250,183,43)" rx="2" ry="2" />
<text  x="32.84" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (9 samples, 0.05%)</title><rect x="515.5" y="2005" width="0.6" height="15.0" fill="rgb(239,109,54)" rx="2" ry="2" />
<text  x="518.52" y="2015.5" ></text>
</g>
<g >
<title>__asan_memset (4 samples, 0.02%)</title><rect x="493.1" y="1941" width="0.3" height="15.0" fill="rgb(217,176,25)" rx="2" ry="2" />
<text  x="496.13" y="1951.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="76.6" y="1077" width="0.1" height="15.0" fill="rgb(250,106,14)" rx="2" ry="2" />
<text  x="79.58" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1701" width="0.5" height="15.0" fill="rgb(246,197,25)" rx="2" ry="2" />
<text  x="218.55" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="89.4" y="1925" width="0.2" height="15.0" fill="rgb(216,4,25)" rx="2" ry="2" />
<text  x="92.40" y="1935.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="55.5" y="1749" width="0.2" height="15.0" fill="rgb(217,44,52)" rx="2" ry="2" />
<text  x="58.49" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1765" width="0.4" height="15.0" fill="rgb(223,191,22)" rx="2" ry="2" />
<text  x="160.70" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1445" width="0.2" height="15.0" fill="rgb(250,118,11)" rx="2" ry="2" />
<text  x="160.76" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1605" width="0.5" height="15.0" fill="rgb(220,166,50)" rx="2" ry="2" />
<text  x="218.55" y="1615.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="518.0" y="1989" width="0.1" height="15.0" fill="rgb(217,214,54)" rx="2" ry="2" />
<text  x="520.95" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="2037" width="0.5" height="15.0" fill="rgb(235,45,4)" rx="2" ry="2" />
<text  x="1189.61" y="2047.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="76.6" y="1141" width="0.1" height="15.0" fill="rgb(232,212,27)" rx="2" ry="2" />
<text  x="79.58" y="1151.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="83.5" y="1573" width="0.2" height="15.0" fill="rgb(237,50,3)" rx="2" ry="2" />
<text  x="86.52" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1845" width="0.6" height="15.0" fill="rgb(208,201,48)" rx="2" ry="2" />
<text  x="1190.15" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1733" width="0.4" height="15.0" fill="rgb(215,155,48)" rx="2" ry="2" />
<text  x="188.20" y="1743.5" ></text>
</g>
<g >
<title>memcpy (6 samples, 0.03%)</title><rect x="1115.6" y="2037" width="0.3" height="15.0" fill="rgb(236,12,45)" rx="2" ry="2" />
<text  x="1118.59" y="2047.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (7 samples, 0.04%)</title><rect x="27.8" y="2053" width="0.4" height="15.0" fill="rgb(206,30,35)" rx="2" ry="2" />
<text  x="30.82" y="2063.5" ></text>
</g>
<g >
<title>alloc_pages_vma (12 samples, 0.06%)</title><rect x="936.1" y="1925" width="0.7" height="15.0" fill="rgb(231,215,29)" rx="2" ry="2" />
<text  x="939.05" y="1935.5" ></text>
</g>
<g >
<title>wp_page_copy (67 samples, 0.34%)</title><rect x="935.7" y="1941" width="4.0" height="15.0" fill="rgb(245,4,8)" rx="2" ry="2" />
<text  x="938.70" y="1951.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="867.8" y="2021" width="0.2" height="15.0" fill="rgb(243,1,43)" rx="2" ry="2" />
<text  x="870.81" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="215.4" y="1589" width="0.1" height="15.0" fill="rgb(222,54,29)" rx="2" ry="2" />
<text  x="218.43" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="261" width="0.4" height="15.0" fill="rgb(210,114,10)" rx="2" ry="2" />
<text  x="1190.27" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (34 samples, 0.17%)</title><rect x="72.5" y="37" width="2.1" height="15.0" fill="rgb(253,215,48)" rx="2" ry="2" />
<text  x="75.54" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="1189" width="0.5" height="15.0" fill="rgb(239,85,50)" rx="2" ry="2" />
<text  x="1190.21" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="214.7" y="1781" width="0.1" height="15.0" fill="rgb(227,5,46)" rx="2" ry="2" />
<text  x="217.71" y="1791.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="320.2" y="1941" width="0.1" height="15.0" fill="rgb(236,221,39)" rx="2" ry="2" />
<text  x="323.19" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="789" width="0.2" height="15.0" fill="rgb(253,114,44)" rx="2" ry="2" />
<text  x="1189.85" y="799.5" ></text>
</g>
<g >
<title>__page_set_anon_rmap (2 samples, 0.01%)</title><rect x="937.5" y="1909" width="0.2" height="15.0" fill="rgb(253,163,15)" rx="2" ry="2" />
<text  x="940.54" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="389" width="0.1" height="15.0" fill="rgb(250,41,33)" rx="2" ry="2" />
<text  x="160.82" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="184.4" y="1813" width="0.2" height="15.0" fill="rgb(249,103,40)" rx="2" ry="2" />
<text  x="187.37" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="629" width="0.2" height="15.0" fill="rgb(247,202,39)" rx="2" ry="2" />
<text  x="1189.85" y="639.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (230 samples, 1.16%)</title><rect x="475.6" y="1957" width="13.6" height="15.0" fill="rgb(246,74,45)" rx="2" ry="2" />
<text  x="478.55" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (14 samples, 0.07%)</title><rect x="612.4" y="1845" width="0.8" height="15.0" fill="rgb(254,153,6)" rx="2" ry="2" />
<text  x="615.38" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (36 samples, 0.18%)</title><rect x="808.7" y="2005" width="2.1" height="15.0" fill="rgb(232,19,29)" rx="2" ry="2" />
<text  x="811.66" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="516.4" y="1989" width="0.3" height="15.0" fill="rgb(231,32,3)" rx="2" ry="2" />
<text  x="519.35" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (41 samples, 0.21%)</title><rect x="188.0" y="1573" width="2.5" height="15.0" fill="rgb(212,144,8)" rx="2" ry="2" />
<text  x="191.05" y="1583.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="206.3" y="1637" width="0.2" height="15.0" fill="rgb(225,140,38)" rx="2" ry="2" />
<text  x="209.34" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="277" width="0.4" height="15.0" fill="rgb(226,197,36)" rx="2" ry="2" />
<text  x="1190.27" y="287.5" ></text>
</g>
<g >
<title>[unknown] (312 samples, 1.57%)</title><rect x="56.0" y="53" width="18.6" height="15.0" fill="rgb(222,19,9)" rx="2" ry="2" />
<text  x="59.03" y="63.5" ></text>
</g>
<g >
<title>cpumask_any_but (2 samples, 0.01%)</title><rect x="937.8" y="1909" width="0.1" height="15.0" fill="rgb(248,103,22)" rx="2" ry="2" />
<text  x="940.77" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="533" width="0.5" height="15.0" fill="rgb(218,22,42)" rx="2" ry="2" />
<text  x="1190.21" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="773" width="0.4" height="15.0" fill="rgb(252,20,5)" rx="2" ry="2" />
<text  x="1189.20" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="373" width="0.4" height="15.0" fill="rgb(223,34,53)" rx="2" ry="2" />
<text  x="1189.20" y="383.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (4 samples, 0.02%)</title><rect x="516.4" y="1925" width="0.2" height="15.0" fill="rgb(232,213,16)" rx="2" ry="2" />
<text  x="519.41" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="2037" width="0.6" height="15.0" fill="rgb(211,80,54)" rx="2" ry="2" />
<text  x="1190.15" y="2047.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (6 samples, 0.03%)</title><rect x="1095.3" y="1877" width="0.4" height="15.0" fill="rgb(238,183,11)" rx="2" ry="2" />
<text  x="1098.33" y="1887.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="84.9" y="1637" width="0.1" height="15.0" fill="rgb(207,115,27)" rx="2" ry="2" />
<text  x="87.89" y="1647.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.05%)</title><rect x="488.6" y="1941" width="0.6" height="15.0" fill="rgb(229,9,49)" rx="2" ry="2" />
<text  x="491.62" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1813" width="0.3" height="15.0" fill="rgb(231,33,48)" rx="2" ry="2" />
<text  x="520.42" y="1823.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,162 samples, 5.85%)</title><rect x="871.0" y="2053" width="69.0" height="15.0" fill="rgb(219,129,35)" rx="2" ry="2" />
<text  x="874.02" y="2063.5" >__asan:..</text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="148.6" y="1637" width="0.1" height="15.0" fill="rgb(223,81,26)" rx="2" ry="2" />
<text  x="151.61" y="1647.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (15 samples, 0.08%)</title><rect x="322.1" y="1941" width="0.9" height="15.0" fill="rgb(240,63,29)" rx="2" ry="2" />
<text  x="325.09" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (6 samples, 0.03%)</title><rect x="325.7" y="1925" width="0.4" height="15.0" fill="rgb(253,206,42)" rx="2" ry="2" />
<text  x="328.71" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="149" width="0.2" height="15.0" fill="rgb(244,67,44)" rx="2" ry="2" />
<text  x="1189.91" y="159.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10 samples, 0.05%)</title><rect x="690.5" y="1765" width="0.6" height="15.0" fill="rgb(227,4,50)" rx="2" ry="2" />
<text  x="693.48" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (481 samples, 2.42%)</title><rect x="56.0" y="1637" width="28.5" height="15.0" fill="rgb(224,106,40)" rx="2" ry="2" />
<text  x="58.97" y="1647.5" >[u..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="515.8" y="1973" width="0.1" height="15.0" fill="rgb(236,150,33)" rx="2" ry="2" />
<text  x="518.76" y="1983.5" ></text>
</g>
<g >
<title>Annotate (173 samples, 0.87%)</title><rect x="121.5" y="2005" width="10.3" height="15.0" fill="rgb(245,164,38)" rx="2" ry="2" />
<text  x="124.53" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="79.5" y="1365" width="0.2" height="15.0" fill="rgb(228,121,20)" rx="2" ry="2" />
<text  x="82.54" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="156.5" y="1781" width="0.2" height="15.0" fill="rgb(208,188,20)" rx="2" ry="2" />
<text  x="159.51" y="1791.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="537.8" y="1909" width="0.2" height="15.0" fill="rgb(252,30,22)" rx="2" ry="2" />
<text  x="540.85" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="469" width="0.5" height="15.0" fill="rgb(221,214,1)" rx="2" ry="2" />
<text  x="1190.21" y="479.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="517.5" y="1749" width="0.1" height="15.0" fill="rgb(243,158,0)" rx="2" ry="2" />
<text  x="520.48" y="1759.5" ></text>
</g>
<g >
<title>std::locale::~locale (3 samples, 0.02%)</title><rect x="514.6" y="1973" width="0.1" height="15.0" fill="rgb(218,211,25)" rx="2" ry="2" />
<text  x="517.57" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1653" width="0.2" height="15.0" fill="rgb(238,204,38)" rx="2" ry="2" />
<text  x="160.76" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (334 samples, 1.68%)</title><rect x="56.0" y="1045" width="19.9" height="15.0" fill="rgb(250,58,39)" rx="2" ry="2" />
<text  x="59.03" y="1055.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="1119.5" y="2037" width="0.1" height="15.0" fill="rgb(248,106,50)" rx="2" ry="2" />
<text  x="1122.51" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (99 samples, 0.50%)</title><rect x="207.6" y="1781" width="5.9" height="15.0" fill="rgb(250,179,49)" rx="2" ry="2" />
<text  x="210.65" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="154.5" y="1669" width="0.3" height="15.0" fill="rgb(219,2,9)" rx="2" ry="2" />
<text  x="157.49" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (73 samples, 0.37%)</title><rect x="165.2" y="1653" width="4.4" height="15.0" fill="rgb(206,40,22)" rx="2" ry="2" />
<text  x="168.24" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="69" width="0.3" height="15.0" fill="rgb(229,72,20)" rx="2" ry="2" />
<text  x="1189.26" y="79.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;ENewsCategory, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="538.4" y="1941" width="0.1" height="15.0" fill="rgb(237,112,45)" rx="2" ry="2" />
<text  x="541.38" y="1951.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.08%)</title><rect x="616.2" y="1845" width="1.0" height="15.0" fill="rgb(237,103,50)" rx="2" ry="2" />
<text  x="619.24" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.02%)</title><rect x="517.7" y="2005" width="0.2" height="15.0" fill="rgb(212,97,1)" rx="2" ry="2" />
<text  x="520.72" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="802.8" y="2021" width="0.3" height="15.0" fill="rgb(225,58,54)" rx="2" ry="2" />
<text  x="805.84" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;, std::allocator&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt; &gt;,  (2 samples, 0.01%)</title><rect x="158.4" y="1941" width="0.1" height="15.0" fill="rgb(234,198,24)" rx="2" ry="2" />
<text  x="161.35" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.06%)</title><rect x="215.4" y="1941" width="0.6" height="15.0" fill="rgb(236,165,26)" rx="2" ry="2" />
<text  x="218.37" y="1951.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.02%)</title><rect x="496.8" y="1845" width="0.1" height="15.0" fill="rgb(233,173,54)" rx="2" ry="2" />
<text  x="499.75" y="1855.5" ></text>
</g>
<g >
<title>try_charge (3 samples, 0.02%)</title><rect x="508.1" y="1845" width="0.2" height="15.0" fill="rgb(245,131,44)" rx="2" ry="2" />
<text  x="511.10" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="595.7" y="1861" width="0.1" height="15.0" fill="rgb(234,71,48)" rx="2" ry="2" />
<text  x="598.69" y="1871.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="83.0" y="1477" width="0.1" height="15.0" fill="rgb(250,137,1)" rx="2" ry="2" />
<text  x="85.99" y="1487.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.03%)</title><rect x="652.9" y="1765" width="0.3" height="15.0" fill="rgb(219,86,14)" rx="2" ry="2" />
<text  x="655.95" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (93 samples, 0.47%)</title><rect x="174.1" y="1701" width="5.5" height="15.0" fill="rgb(205,126,15)" rx="2" ry="2" />
<text  x="177.09" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1893" width="0.6" height="15.0" fill="rgb(236,60,53)" rx="2" ry="2" />
<text  x="1190.15" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="215.6" y="1285" width="0.4" height="15.0" fill="rgb(228,86,54)" rx="2" ry="2" />
<text  x="218.60" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (464 samples, 2.34%)</title><rect x="186.4" y="1877" width="27.6" height="15.0" fill="rgb(233,215,34)" rx="2" ry="2" />
<text  x="189.44" y="1887.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1461" width="0.1" height="15.0" fill="rgb(248,78,24)" rx="2" ry="2" />
<text  x="161.00" y="1471.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="1093.0" y="2005" width="0.1" height="15.0" fill="rgb(246,218,52)" rx="2" ry="2" />
<text  x="1095.96" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="853" width="0.2" height="15.0" fill="rgb(214,117,25)" rx="2" ry="2" />
<text  x="1189.85" y="863.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="1097.7" y="2037" width="0.2" height="15.0" fill="rgb(250,1,38)" rx="2" ry="2" />
<text  x="1100.65" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (31 samples, 0.16%)</title><rect x="54.0" y="2005" width="1.8" height="15.0" fill="rgb(254,60,2)" rx="2" ry="2" />
<text  x="57.01" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="83.0" y="1525" width="0.1" height="15.0" fill="rgb(243,72,33)" rx="2" ry="2" />
<text  x="85.99" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (98 samples, 0.49%)</title><rect x="207.6" y="1749" width="5.9" height="15.0" fill="rgb(217,94,4)" rx="2" ry="2" />
<text  x="210.65" y="1759.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (2 samples, 0.01%)</title><rect x="186.9" y="1637" width="0.1" height="15.0" fill="rgb(246,190,1)" rx="2" ry="2" />
<text  x="189.86" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1573" width="0.5" height="15.0" fill="rgb(244,82,0)" rx="2" ry="2" />
<text  x="1189.14" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="997" width="0.5" height="15.0" fill="rgb(241,192,24)" rx="2" ry="2" />
<text  x="1190.21" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="215.4" y="1541" width="0.1" height="15.0" fill="rgb(246,19,10)" rx="2" ry="2" />
<text  x="218.43" y="1551.5" ></text>
</g>
<g >
<title>__interceptor_memchr (6 samples, 0.03%)</title><rect x="1145.4" y="2037" width="0.4" height="15.0" fill="rgb(221,142,9)" rx="2" ry="2" />
<text  x="1148.40" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="155.6" y="1669" width="0.4" height="15.0" fill="rgb(231,154,47)" rx="2" ry="2" />
<text  x="158.62" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (316 samples, 1.59%)</title><rect x="56.0" y="261" width="18.8" height="15.0" fill="rgb(246,30,49)" rx="2" ry="2" />
<text  x="59.03" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.02%)</title><rect x="1107.1" y="2005" width="0.2" height="15.0" fill="rgb(207,196,1)" rx="2" ry="2" />
<text  x="1110.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="181" width="0.4" height="15.0" fill="rgb(211,136,45)" rx="2" ry="2" />
<text  x="1190.27" y="191.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="136.7" y="1589" width="0.2" height="15.0" fill="rgb(207,139,16)" rx="2" ry="2" />
<text  x="139.68" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1333" width="0.1" height="15.0" fill="rgb(210,109,31)" rx="2" ry="2" />
<text  x="160.82" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1605" width="0.1" height="15.0" fill="rgb(229,213,36)" rx="2" ry="2" />
<text  x="188.26" y="1615.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="132.6" y="1589" width="0.2" height="15.0" fill="rgb(233,209,45)" rx="2" ry="2" />
<text  x="135.64" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1365" width="0.5" height="15.0" fill="rgb(223,112,4)" rx="2" ry="2" />
<text  x="218.55" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1413" width="0.2" height="15.0" fill="rgb(208,130,19)" rx="2" ry="2" />
<text  x="160.76" y="1423.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="1187.9" y="2037" width="0.1" height="15.0" fill="rgb(210,76,1)" rx="2" ry="2" />
<text  x="1190.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="645" width="0.2" height="15.0" fill="rgb(219,8,24)" rx="2" ry="2" />
<text  x="1189.85" y="655.5" ></text>
</g>
<g >
<title>[unknown] (319 samples, 1.61%)</title><rect x="56.0" y="309" width="19.0" height="15.0" fill="rgb(234,93,9)" rx="2" ry="2" />
<text  x="59.03" y="319.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (137 samples, 0.69%)</title><rect x="1161.8" y="2037" width="8.1" height="15.0" fill="rgb(211,132,17)" rx="2" ry="2" />
<text  x="1164.79" y="2047.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="760.3" y="1893" width="0.1" height="15.0" fill="rgb(240,170,41)" rx="2" ry="2" />
<text  x="763.26" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (2 samples, 0.01%)</title><rect x="868.4" y="2021" width="0.1" height="15.0" fill="rgb(254,70,22)" rx="2" ry="2" />
<text  x="871.41" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (11 samples, 0.06%)</title><rect x="761.1" y="2005" width="0.6" height="15.0" fill="rgb(215,177,46)" rx="2" ry="2" />
<text  x="764.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="1045" width="0.1" height="15.0" fill="rgb(214,173,35)" rx="2" ry="2" />
<text  x="160.82" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1749" width="0.4" height="15.0" fill="rgb(220,7,4)" rx="2" ry="2" />
<text  x="188.20" y="1759.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="121.9" y="1973" width="0.2" height="15.0" fill="rgb(231,172,17)" rx="2" ry="2" />
<text  x="124.95" y="1983.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="155.4" y="1669" width="0.2" height="15.0" fill="rgb(225,83,5)" rx="2" ry="2" />
<text  x="158.44" y="1679.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="335.9" y="1989" width="0.1" height="15.0" fill="rgb(237,226,37)" rx="2" ry="2" />
<text  x="338.87" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (380 samples, 1.91%)</title><rect x="56.0" y="1317" width="22.6" height="15.0" fill="rgb(251,180,30)" rx="2" ry="2" />
<text  x="59.03" y="1327.5" >[..</text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="104.3" y="2021" width="0.2" height="15.0" fill="rgb(252,184,15)" rx="2" ry="2" />
<text  x="107.31" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1509" width="0.4" height="15.0" fill="rgb(236,53,54)" rx="2" ry="2" />
<text  x="1189.20" y="1519.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (23 samples, 0.12%)</title><rect x="320.4" y="1941" width="1.4" height="15.0" fill="rgb(238,45,0)" rx="2" ry="2" />
<text  x="323.43" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1285" width="0.1" height="15.0" fill="rgb(210,202,1)" rx="2" ry="2" />
<text  x="161.00" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="933" width="0.4" height="15.0" fill="rgb(237,217,34)" rx="2" ry="2" />
<text  x="1189.20" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1029" width="0.4" height="15.0" fill="rgb(208,156,30)" rx="2" ry="2" />
<text  x="1189.20" y="1039.5" ></text>
</g>
<g >
<title>std::packaged_task&lt;boost::optional&lt;TDocument&gt;  (2 samples, 0.01%)</title><rect x="28.8" y="2005" width="0.1" height="15.0" fill="rgb(238,39,29)" rx="2" ry="2" />
<text  x="31.83" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="43.0" y="2021" width="0.1" height="15.0" fill="rgb(211,222,42)" rx="2" ry="2" />
<text  x="46.02" y="2031.5" ></text>
</g>
<g >
<title>[libOpenNMTTokenizer.so] (2 samples, 0.01%)</title><rect x="589.0" y="1877" width="0.2" height="15.0" fill="rgb(231,86,43)" rx="2" ry="2" />
<text  x="592.04" y="1887.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="932.7" y="2005" width="0.1" height="15.0" fill="rgb(228,152,13)" rx="2" ry="2" />
<text  x="935.67" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="309" width="0.5" height="15.0" fill="rgb(250,218,36)" rx="2" ry="2" />
<text  x="1190.21" y="319.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="152.2" y="1701" width="0.2" height="15.0" fill="rgb(210,21,22)" rx="2" ry="2" />
<text  x="155.18" y="1711.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::should_preserve (2 samples, 0.01%)</title><rect x="572.4" y="1893" width="0.1" height="15.0" fill="rgb(233,1,28)" rx="2" ry="2" />
<text  x="575.41" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (172 samples, 0.87%)</title><rect x="186.4" y="1749" width="10.3" height="15.0" fill="rgb(230,154,8)" rx="2" ry="2" />
<text  x="189.44" y="1759.5" ></text>
</g>
<g >
<title>fasttext::entry::entry (2 samples, 0.01%)</title><rect x="866.4" y="1973" width="0.2" height="15.0" fill="rgb(237,130,25)" rx="2" ry="2" />
<text  x="869.45" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (66 samples, 0.33%)</title><rect x="152.4" y="1701" width="3.9" height="15.0" fill="rgb(239,57,54)" rx="2" ry="2" />
<text  x="155.36" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="214.5" y="1813" width="0.2" height="15.0" fill="rgb(231,55,37)" rx="2" ry="2" />
<text  x="217.48" y="1823.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (3 samples, 0.02%)</title><rect x="1095.4" y="1797" width="0.2" height="15.0" fill="rgb(212,186,4)" rx="2" ry="2" />
<text  x="1098.39" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (8 samples, 0.04%)</title><rect x="1117.2" y="2037" width="0.5" height="15.0" fill="rgb(235,208,6)" rx="2" ry="2" />
<text  x="1120.25" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (7 samples, 0.04%)</title><rect x="134.1" y="1557" width="0.4" height="15.0" fill="rgb(253,182,8)" rx="2" ry="2" />
<text  x="137.12" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1669" width="0.5" height="15.0" fill="rgb(236,183,8)" rx="2" ry="2" />
<text  x="218.55" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (319 samples, 1.61%)</title><rect x="56.0" y="325" width="19.0" height="15.0" fill="rgb(211,108,52)" rx="2" ry="2" />
<text  x="59.03" y="335.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2,879 samples, 14.49%)</title><rect x="575.6" y="1909" width="171.0" height="15.0" fill="rgb(239,154,12)" rx="2" ry="2" />
<text  x="578.62" y="1919.5" >onmt::Tokenizer::token..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1186.9" y="165" width="0.2" height="15.0" fill="rgb(223,43,39)" rx="2" ry="2" />
<text  x="1189.91" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1429" width="0.2" height="15.0" fill="rgb(219,69,24)" rx="2" ry="2" />
<text  x="188.44" y="1439.5" ></text>
</g>
<g >
<title>smp_call_function_many (3 samples, 0.02%)</title><rect x="1095.4" y="1781" width="0.2" height="15.0" fill="rgb(238,53,40)" rx="2" ry="2" />
<text  x="1098.39" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1637" width="0.2" height="15.0" fill="rgb(220,98,3)" rx="2" ry="2" />
<text  x="160.76" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1685" width="0.1" height="15.0" fill="rgb(208,124,0)" rx="2" ry="2" />
<text  x="161.00" y="1695.5" ></text>
</g>
<g >
<title>sqrtf32 (2 samples, 0.01%)</title><rect x="513.7" y="1973" width="0.1" height="15.0" fill="rgb(246,217,37)" rx="2" ry="2" />
<text  x="516.68" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="517" width="0.1" height="15.0" fill="rgb(234,58,45)" rx="2" ry="2" />
<text  x="160.82" y="527.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="206.9" y="1653" width="0.1" height="15.0" fill="rgb(213,218,50)" rx="2" ry="2" />
<text  x="209.87" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1509" width="0.2" height="15.0" fill="rgb(247,229,7)" rx="2" ry="2" />
<text  x="188.44" y="1519.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (6 samples, 0.03%)</title><rect x="760.3" y="1989" width="0.3" height="15.0" fill="rgb(211,158,14)" rx="2" ry="2" />
<text  x="763.26" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="661" width="0.2" height="15.0" fill="rgb(250,24,52)" rx="2" ry="2" />
<text  x="1189.85" y="671.5" ></text>
</g>
<g >
<title>fasttext::FastText::predictLine (224 samples, 1.13%)</title><rect x="525.0" y="1941" width="13.3" height="15.0" fill="rgb(231,149,53)" rx="2" ry="2" />
<text  x="528.02" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1605" width="0.1" height="15.0" fill="rgb(221,169,18)" rx="2" ry="2" />
<text  x="161.00" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="88.0" y="1813" width="0.2" height="15.0" fill="rgb(225,131,0)" rx="2" ry="2" />
<text  x="90.98" y="1823.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="866.4" y="1925" width="0.2" height="15.0" fill="rgb(248,79,24)" rx="2" ry="2" />
<text  x="869.45" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (422 samples, 2.12%)</title><rect x="56.0" y="1445" width="25.1" height="15.0" fill="rgb(212,213,23)" rx="2" ry="2" />
<text  x="59.03" y="1455.5" >[..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (7 samples, 0.04%)</title><rect x="594.2" y="1877" width="0.4" height="15.0" fill="rgb(231,61,14)" rx="2" ry="2" />
<text  x="597.15" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (469 samples, 2.36%)</title><rect x="186.4" y="1893" width="27.9" height="15.0" fill="rgb(207,75,37)" rx="2" ry="2" />
<text  x="189.44" y="1903.5" >s..</text>
</g>
<g >
<title>do_syscall_64 (13 samples, 0.07%)</title><rect x="29.1" y="1973" width="0.7" height="15.0" fill="rgb(235,27,43)" rx="2" ry="2" />
<text  x="32.06" y="1983.5" ></text>
</g>
<g >
<title>__pthread_once (2 samples, 0.01%)</title><rect x="866.9" y="2005" width="0.1" height="15.0" fill="rgb(239,183,13)" rx="2" ry="2" />
<text  x="869.86" y="2015.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="89.3" y="1877" width="0.1" height="15.0" fill="rgb(234,105,14)" rx="2" ry="2" />
<text  x="92.28" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="341" width="0.4" height="15.0" fill="rgb(214,25,44)" rx="2" ry="2" />
<text  x="1189.20" y="351.5" ></text>
</g>
<g >
<title>fasttext::Vector::Vector (3 samples, 0.02%)</title><rect x="794.6" y="2037" width="0.2" height="15.0" fill="rgb(220,199,44)" rx="2" ry="2" />
<text  x="797.65" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1557" width="0.5" height="15.0" fill="rgb(222,154,35)" rx="2" ry="2" />
<text  x="218.55" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="85.2" y="1669" width="0.2" height="15.0" fill="rgb(222,72,21)" rx="2" ry="2" />
<text  x="88.25" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1429" width="0.1" height="15.0" fill="rgb(245,88,48)" rx="2" ry="2" />
<text  x="188.26" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1365" width="0.3" height="15.0" fill="rgb(252,9,11)" rx="2" ry="2" />
<text  x="1189.79" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (96 samples, 0.48%)</title><rect x="159.4" y="1685" width="5.7" height="15.0" fill="rgb(224,147,35)" rx="2" ry="2" />
<text  x="162.36" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (98 samples, 0.49%)</title><rect x="207.6" y="1765" width="5.9" height="15.0" fill="rgb(208,160,36)" rx="2" ry="2" />
<text  x="210.65" y="1775.5" ></text>
</g>
<g >
<title>syscall (4 samples, 0.02%)</title><rect x="131.3" y="1973" width="0.3" height="15.0" fill="rgb(247,129,18)" rx="2" ry="2" />
<text  x="134.33" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.05%)</title><rect x="810.8" y="2005" width="0.6" height="15.0" fill="rgb(246,145,48)" rx="2" ry="2" />
<text  x="813.80" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.1" y="1733" width="0.2" height="15.0" fill="rgb(215,197,19)" rx="2" ry="2" />
<text  x="89.14" y="1743.5" ></text>
</g>
<g >
<title>TDocument::FromJson (2 samples, 0.01%)</title><rect x="121.8" y="1973" width="0.1" height="15.0" fill="rgb(226,69,21)" rx="2" ry="2" />
<text  x="124.77" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1477" width="0.5" height="15.0" fill="rgb(249,139,8)" rx="2" ry="2" />
<text  x="218.55" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (10 samples, 0.05%)</title><rect x="214.5" y="1845" width="0.6" height="15.0" fill="rgb(230,119,53)" rx="2" ry="2" />
<text  x="217.48" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="85.8" y="1701" width="0.3" height="15.0" fill="rgb(237,183,4)" rx="2" ry="2" />
<text  x="88.84" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1781" width="0.5" height="15.0" fill="rgb(247,41,2)" rx="2" ry="2" />
<text  x="1189.61" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="167.1" y="1573" width="0.1" height="15.0" fill="rgb(214,146,15)" rx="2" ry="2" />
<text  x="170.08" y="1583.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="603.9" y="1861" width="0.2" height="15.0" fill="rgb(249,10,24)" rx="2" ry="2" />
<text  x="606.95" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1589" width="0.2" height="15.0" fill="rgb(252,59,5)" rx="2" ry="2" />
<text  x="160.76" y="1599.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="81.3" y="1445" width="0.2" height="15.0" fill="rgb(226,161,28)" rx="2" ry="2" />
<text  x="84.33" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1349" width="0.2" height="15.0" fill="rgb(215,159,54)" rx="2" ry="2" />
<text  x="188.44" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (7 samples, 0.04%)</title><rect x="185.1" y="1941" width="0.5" height="15.0" fill="rgb(225,40,36)" rx="2" ry="2" />
<text  x="188.14" y="1951.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="178.4" y="1621" width="0.1" height="15.0" fill="rgb(226,32,12)" rx="2" ry="2" />
<text  x="181.37" y="1631.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (5 samples, 0.03%)</title><rect x="141.2" y="1621" width="0.3" height="15.0" fill="rgb(235,157,38)" rx="2" ry="2" />
<text  x="144.25" y="1631.5" ></text>
</g>
<g >
<title>smp_call_function_many (5 samples, 0.03%)</title><rect x="55.4" y="1829" width="0.3" height="15.0" fill="rgb(233,68,44)" rx="2" ry="2" />
<text  x="58.37" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.03%)</title><rect x="145.9" y="1605" width="0.4" height="15.0" fill="rgb(245,222,9)" rx="2" ry="2" />
<text  x="148.94" y="1615.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="76.6" y="1157" width="0.1" height="15.0" fill="rgb(245,215,6)" rx="2" ry="2" />
<text  x="79.58" y="1167.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (33 samples, 0.17%)</title><rect x="868.7" y="2005" width="2.0" height="15.0" fill="rgb(247,41,16)" rx="2" ry="2" />
<text  x="871.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1413" width="0.1" height="15.0" fill="rgb(210,20,41)" rx="2" ry="2" />
<text  x="188.26" y="1423.5" ></text>
</g>
<g >
<title>wp_page_copy (4 samples, 0.02%)</title><rect x="1093.1" y="1941" width="0.3" height="15.0" fill="rgb(218,213,22)" rx="2" ry="2" />
<text  x="1096.14" y="1951.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (11 samples, 0.06%)</title><rect x="589.8" y="1877" width="0.6" height="15.0" fill="rgb(210,204,39)" rx="2" ry="2" />
<text  x="592.76" y="1887.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (6 samples, 0.03%)</title><rect x="538.0" y="1925" width="0.3" height="15.0" fill="rgb(237,102,14)" rx="2" ry="2" />
<text  x="540.97" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1445" width="0.2" height="15.0" fill="rgb(238,107,51)" rx="2" ry="2" />
<text  x="188.44" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1189" width="0.3" height="15.0" fill="rgb(224,82,29)" rx="2" ry="2" />
<text  x="1189.79" y="1199.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="82.1" y="1381" width="0.1" height="15.0" fill="rgb(254,227,46)" rx="2" ry="2" />
<text  x="85.10" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1845" width="0.4" height="15.0" fill="rgb(251,182,20)" rx="2" ry="2" />
<text  x="188.20" y="1855.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (46 samples, 0.23%)</title><rect x="117.9" y="2037" width="2.7" height="15.0" fill="rgb(247,16,17)" rx="2" ry="2" />
<text  x="120.85" y="2047.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (3 samples, 0.02%)</title><rect x="176.2" y="1621" width="0.2" height="15.0" fill="rgb(216,198,31)" rx="2" ry="2" />
<text  x="179.23" y="1631.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="208.2" y="1701" width="0.2" height="15.0" fill="rgb(239,23,11)" rx="2" ry="2" />
<text  x="211.24" y="1711.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (5 samples, 0.03%)</title><rect x="179.6" y="1701" width="0.3" height="15.0" fill="rgb(231,103,5)" rx="2" ry="2" />
<text  x="182.61" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="204.9" y="1637" width="0.3" height="15.0" fill="rgb(247,191,35)" rx="2" ry="2" />
<text  x="207.91" y="1647.5" ></text>
</g>
<g >
<title>do_page_fault (7 samples, 0.04%)</title><rect x="756.2" y="2005" width="0.4" height="15.0" fill="rgb(254,150,21)" rx="2" ry="2" />
<text  x="759.16" y="2015.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (6 samples, 0.03%)</title><rect x="1095.3" y="1861" width="0.4" height="15.0" fill="rgb(222,155,40)" rx="2" ry="2" />
<text  x="1098.33" y="1871.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (61 samples, 0.31%)</title><rect x="795.5" y="2037" width="3.6" height="15.0" fill="rgb(228,106,7)" rx="2" ry="2" />
<text  x="798.48" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="184.4" y="1781" width="0.1" height="15.0" fill="rgb(219,69,28)" rx="2" ry="2" />
<text  x="187.43" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="161.9" y="1541" width="0.3" height="15.0" fill="rgb(245,207,37)" rx="2" ry="2" />
<text  x="164.86" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1333" width="0.6" height="15.0" fill="rgb(218,77,38)" rx="2" ry="2" />
<text  x="1190.15" y="1343.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="320.3" y="1941" width="0.1" height="15.0" fill="rgb(216,102,34)" rx="2" ry="2" />
<text  x="323.31" y="1951.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (5 samples, 0.03%)</title><rect x="497.5" y="1845" width="0.3" height="15.0" fill="rgb(223,68,52)" rx="2" ry="2" />
<text  x="500.46" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (2 samples, 0.01%)</title><rect x="1107.0" y="2053" width="0.1" height="15.0" fill="rgb(225,153,36)" rx="2" ry="2" />
<text  x="1109.97" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="178.0" y="1621" width="0.1" height="15.0" fill="rgb(230,14,43)" rx="2" ry="2" />
<text  x="181.01" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1317" width="0.1" height="15.0" fill="rgb(224,197,33)" rx="2" ry="2" />
<text  x="160.82" y="1327.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.03%)</title><rect x="802.8" y="2005" width="0.3" height="15.0" fill="rgb(248,170,14)" rx="2" ry="2" />
<text  x="805.84" y="2015.5" ></text>
</g>
<g >
<title>__asan_memset (13 samples, 0.07%)</title><rect x="651.6" y="1877" width="0.8" height="15.0" fill="rgb(228,165,41)" rx="2" ry="2" />
<text  x="654.58" y="1887.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (3 samples, 0.02%)</title><rect x="521.0" y="1893" width="0.2" height="15.0" fill="rgb(243,24,53)" rx="2" ry="2" />
<text  x="523.98" y="1903.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.05%)</title><rect x="515.0" y="2005" width="0.5" height="15.0" fill="rgb(230,60,2)" rx="2" ry="2" />
<text  x="517.98" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="200.2" y="1605" width="0.1" height="15.0" fill="rgb(235,167,6)" rx="2" ry="2" />
<text  x="203.22" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="981" width="0.1" height="15.0" fill="rgb(249,208,23)" rx="2" ry="2" />
<text  x="160.82" y="991.5" ></text>
</g>
<g >
<title>handle_mm_fault (85 samples, 0.43%)</title><rect x="934.7" y="1989" width="5.1" height="15.0" fill="rgb(240,3,28)" rx="2" ry="2" />
<text  x="937.75" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (8 samples, 0.04%)</title><rect x="1096.5" y="2053" width="0.4" height="15.0" fill="rgb(245,77,29)" rx="2" ry="2" />
<text  x="1099.46" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1621" width="0.1" height="15.0" fill="rgb(207,74,31)" rx="2" ry="2" />
<text  x="188.26" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="214.7" y="1749" width="0.1" height="15.0" fill="rgb(247,56,50)" rx="2" ry="2" />
<text  x="217.71" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="949" width="0.3" height="15.0" fill="rgb(233,92,1)" rx="2" ry="2" />
<text  x="1189.79" y="959.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="680.0" y="1861" width="0.1" height="15.0" fill="rgb(252,89,0)" rx="2" ry="2" />
<text  x="683.03" y="1871.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="680.0" y="1829" width="0.1" height="15.0" fill="rgb(216,166,2)" rx="2" ry="2" />
<text  x="683.03" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (8 samples, 0.04%)</title><rect x="158.9" y="1685" width="0.5" height="15.0" fill="rgb(243,208,45)" rx="2" ry="2" />
<text  x="161.89" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.71%)</title><rect x="56.0" y="1109" width="20.2" height="15.0" fill="rgb(223,59,20)" rx="2" ry="2" />
<text  x="59.03" y="1119.5" ></text>
</g>
<g >
<title>strlen@plt (8 samples, 0.04%)</title><rect x="746.1" y="1893" width="0.5" height="15.0" fill="rgb(236,54,17)" rx="2" ry="2" />
<text  x="749.13" y="1903.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (18 samples, 0.09%)</title><rect x="568.6" y="1941" width="1.1" height="15.0" fill="rgb(234,144,34)" rx="2" ry="2" />
<text  x="571.61" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="214.9" y="1781" width="0.1" height="15.0" fill="rgb(225,84,2)" rx="2" ry="2" />
<text  x="217.89" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1813" width="0.4" height="15.0" fill="rgb(235,53,0)" rx="2" ry="2" />
<text  x="188.20" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1317" width="0.1" height="15.0" fill="rgb(240,226,17)" rx="2" ry="2" />
<text  x="188.26" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="229" width="0.4" height="15.0" fill="rgb(247,52,25)" rx="2" ry="2" />
<text  x="1189.20" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1186.9" y="117" width="0.2" height="15.0" fill="rgb(235,48,38)" rx="2" ry="2" />
<text  x="1189.91" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1685" width="0.5" height="15.0" fill="rgb(228,185,54)" rx="2" ry="2" />
<text  x="1189.14" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1397" width="0.1" height="15.0" fill="rgb(206,167,36)" rx="2" ry="2" />
<text  x="188.26" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1925" width="0.6" height="15.0" fill="rgb(244,139,39)" rx="2" ry="2" />
<text  x="1190.15" y="1935.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="193.2" y="1589" width="0.1" height="15.0" fill="rgb(217,19,24)" rx="2" ry="2" />
<text  x="196.22" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (266 samples, 1.34%)</title><rect x="186.4" y="1781" width="15.8" height="15.0" fill="rgb(220,79,27)" rx="2" ry="2" />
<text  x="189.44" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="2005" width="0.5" height="15.0" fill="rgb(229,96,30)" rx="2" ry="2" />
<text  x="1189.08" y="2015.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (3 samples, 0.02%)</title><rect x="567.4" y="1861" width="0.2" height="15.0" fill="rgb(241,37,4)" rx="2" ry="2" />
<text  x="570.43" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (435 samples, 2.19%)</title><rect x="56.0" y="1477" width="25.9" height="15.0" fill="rgb(250,90,10)" rx="2" ry="2" />
<text  x="59.03" y="1487.5" >[..</text>
</g>
<g >
<title>try_charge (3 samples, 0.02%)</title><rect x="27.3" y="1925" width="0.2" height="15.0" fill="rgb(229,88,3)" rx="2" ry="2" />
<text  x="30.28" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1077" width="0.5" height="15.0" fill="rgb(234,114,20)" rx="2" ry="2" />
<text  x="1190.21" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1029" width="0.3" height="15.0" fill="rgb(231,63,9)" rx="2" ry="2" />
<text  x="1189.79" y="1039.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (3 samples, 0.02%)</title><rect x="55.5" y="1781" width="0.2" height="15.0" fill="rgb(212,146,1)" rx="2" ry="2" />
<text  x="58.49" y="1791.5" ></text>
</g>
<g >
<title>smp_call_function_many (21 samples, 0.11%)</title><rect x="938.3" y="1845" width="1.3" height="15.0" fill="rgb(226,161,27)" rx="2" ry="2" />
<text  x="941.31" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="341" width="0.2" height="15.0" fill="rgb(226,200,10)" rx="2" ry="2" />
<text  x="1189.85" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1285" width="0.6" height="15.0" fill="rgb(233,107,8)" rx="2" ry="2" />
<text  x="1190.15" y="1295.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="159.1" y="1621" width="0.1" height="15.0" fill="rgb(240,80,4)" rx="2" ry="2" />
<text  x="162.13" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (375 samples, 1.89%)</title><rect x="56.0" y="1301" width="22.3" height="15.0" fill="rgb(248,209,30)" rx="2" ry="2" />
<text  x="59.03" y="1311.5" >[..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="79.8" y="1381" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="82.78" y="1391.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (4 samples, 0.02%)</title><rect x="381.1" y="1941" width="0.3" height="15.0" fill="rgb(229,110,16)" rx="2" ry="2" />
<text  x="384.12" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1605" width="0.1" height="15.0" fill="rgb(211,188,28)" rx="2" ry="2" />
<text  x="218.43" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (80 samples, 0.40%)</title><rect x="151.7" y="1765" width="4.8" height="15.0" fill="rgb(229,59,4)" rx="2" ry="2" />
<text  x="154.70" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1557" width="0.2" height="15.0" fill="rgb(219,12,32)" rx="2" ry="2" />
<text  x="160.76" y="1567.5" ></text>
</g>
<g >
<title>handle_mm_fault (38 samples, 0.19%)</title><rect x="506.1" y="1909" width="2.2" height="15.0" fill="rgb(221,132,30)" rx="2" ry="2" />
<text  x="509.08" y="1919.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 0.02%)</title><rect x="1095.7" y="1877" width="0.2" height="15.0" fill="rgb(253,185,2)" rx="2" ry="2" />
<text  x="1098.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1573" width="0.1" height="15.0" fill="rgb(218,30,42)" rx="2" ry="2" />
<text  x="188.26" y="1583.5" ></text>
</g>
<g >
<title>ComputeClusterWeight (910 samples, 4.58%)</title><rect x="131.9" y="1989" width="54.0" height="15.0" fill="rgb(230,31,53)" rx="2" ry="2" />
<text  x="134.87" y="1999.5" >Compu..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="645" width="0.5" height="15.0" fill="rgb(244,162,44)" rx="2" ry="2" />
<text  x="1190.21" y="655.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (3 samples, 0.02%)</title><rect x="92.1" y="2021" width="0.2" height="15.0" fill="rgb(228,165,12)" rx="2" ry="2" />
<text  x="95.13" y="2031.5" ></text>
</g>
<g >
<title>__split_vma (2 samples, 0.01%)</title><rect x="1095.2" y="1909" width="0.1" height="15.0" fill="rgb(210,111,51)" rx="2" ry="2" />
<text  x="1098.22" y="1919.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="135.5" y="1557" width="0.1" height="15.0" fill="rgb(249,221,17)" rx="2" ry="2" />
<text  x="138.49" y="1567.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="172.2" y="1589" width="0.3" height="15.0" fill="rgb(251,161,32)" rx="2" ry="2" />
<text  x="175.19" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1477" width="0.1" height="15.0" fill="rgb(207,206,1)" rx="2" ry="2" />
<text  x="161.00" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.47%)</title><rect x="174.0" y="1717" width="5.6" height="15.0" fill="rgb(238,113,9)" rx="2" ry="2" />
<text  x="177.03" y="1727.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="83.0" y="1397" width="0.1" height="15.0" fill="rgb(222,69,44)" rx="2" ry="2" />
<text  x="85.99" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (70 samples, 0.35%)</title><rect x="142.2" y="1637" width="4.2" height="15.0" fill="rgb(224,98,37)" rx="2" ry="2" />
<text  x="145.20" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="213.6" y="1733" width="0.1" height="15.0" fill="rgb(208,210,1)" rx="2" ry="2" />
<text  x="216.59" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (5 samples, 0.03%)</title><rect x="517.0" y="1989" width="0.3" height="15.0" fill="rgb(205,6,23)" rx="2" ry="2" />
<text  x="520.00" y="1999.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="581.3" y="1877" width="0.3" height="15.0" fill="rgb(213,108,54)" rx="2" ry="2" />
<text  x="584.26" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.3" y="101" width="0.3" height="15.0" fill="rgb(210,17,4)" rx="2" ry="2" />
<text  x="1189.26" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="1941" width="0.5" height="15.0" fill="rgb(244,36,16)" rx="2" ry="2" />
<text  x="1189.61" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1925" width="0.5" height="15.0" fill="rgb(213,28,5)" rx="2" ry="2" />
<text  x="1189.61" y="1935.5" ></text>
</g>
<g >
<title>syscall (14 samples, 0.07%)</title><rect x="29.0" y="2005" width="0.8" height="15.0" fill="rgb(226,23,39)" rx="2" ry="2" />
<text  x="32.00" y="2015.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (8 samples, 0.04%)</title><rect x="130.3" y="1941" width="0.5" height="15.0" fill="rgb(220,107,35)" rx="2" ry="2" />
<text  x="133.32" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (183 samples, 0.92%)</title><rect x="158.8" y="1733" width="10.8" height="15.0" fill="rgb(212,224,17)" rx="2" ry="2" />
<text  x="161.77" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::~collate (19 samples, 0.10%)</title><rect x="810.8" y="2037" width="1.1" height="15.0" fill="rgb(245,48,10)" rx="2" ry="2" />
<text  x="813.80" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="169.8" y="1621" width="0.2" height="15.0" fill="rgb(249,218,20)" rx="2" ry="2" />
<text  x="172.76" y="1631.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="85.4" y="1605" width="0.1" height="15.0" fill="rgb(210,212,42)" rx="2" ry="2" />
<text  x="88.36" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="325" width="0.2" height="15.0" fill="rgb(243,34,49)" rx="2" ry="2" />
<text  x="1189.85" y="335.5" ></text>
</g>
<g >
<title>[unknown] (325 samples, 1.64%)</title><rect x="56.0" y="629" width="19.3" height="15.0" fill="rgb(230,132,19)" rx="2" ry="2" />
<text  x="59.03" y="639.5" ></text>
</g>
<g >
<title>[unknown] (314 samples, 1.58%)</title><rect x="56.0" y="181" width="18.7" height="15.0" fill="rgb(248,130,13)" rx="2" ry="2" />
<text  x="59.03" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1109" width="0.1" height="15.0" fill="rgb(209,122,49)" rx="2" ry="2" />
<text  x="160.82" y="1119.5" ></text>
</g>
<g >
<title>page_fault (31 samples, 0.16%)</title><rect x="54.0" y="2021" width="1.8" height="15.0" fill="rgb(207,222,4)" rx="2" ry="2" />
<text  x="57.01" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1829" width="0.6" height="15.0" fill="rgb(214,201,50)" rx="2" ry="2" />
<text  x="218.43" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="211.6" y="1669" width="0.1" height="15.0" fill="rgb(217,69,23)" rx="2" ry="2" />
<text  x="214.63" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (88 samples, 0.44%)</title><rect x="174.2" y="1669" width="5.2" height="15.0" fill="rgb(207,202,24)" rx="2" ry="2" />
<text  x="177.21" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1845" width="0.5" height="15.0" fill="rgb(223,116,15)" rx="2" ry="2" />
<text  x="1189.14" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="81.6" y="1461" width="0.2" height="15.0" fill="rgb(205,54,15)" rx="2" ry="2" />
<text  x="84.62" y="1471.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::Recycle (4 samples, 0.02%)</title><rect x="749.6" y="2037" width="0.2" height="15.0" fill="rgb(206,114,8)" rx="2" ry="2" />
<text  x="752.57" y="2047.5" ></text>
</g>
<g >
<title>__handle_mm_fault (81 samples, 0.41%)</title><rect x="935.0" y="1973" width="4.8" height="15.0" fill="rgb(251,83,17)" rx="2" ry="2" />
<text  x="937.98" y="1983.5" ></text>
</g>
<g >
<title>operator new[] (64 samples, 0.32%)</title><rect x="1182.2" y="2037" width="3.8" height="15.0" fill="rgb(233,85,35)" rx="2" ry="2" />
<text  x="1185.16" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="162.6" y="1541" width="0.2" height="15.0" fill="rgb(222,12,21)" rx="2" ry="2" />
<text  x="165.63" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (88 samples, 0.44%)</title><rect x="202.2" y="1749" width="5.3" height="15.0" fill="rgb(216,192,3)" rx="2" ry="2" />
<text  x="205.24" y="1759.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="182.3" y="1653" width="0.4" height="15.0" fill="rgb(212,75,32)" rx="2" ry="2" />
<text  x="185.35" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="213.9" y="1845" width="0.1" height="15.0" fill="rgb(227,185,20)" rx="2" ry="2" />
<text  x="216.88" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (485 samples, 2.44%)</title><rect x="186.4" y="1941" width="28.8" height="15.0" fill="rgb(248,227,14)" rx="2" ry="2" />
<text  x="189.44" y="1951.5" >st..</text>
</g>
<g >
<title>__interceptor_memcmp (152 samples, 0.77%)</title><rect x="1135.1" y="2037" width="9.0" height="15.0" fill="rgb(212,92,42)" rx="2" ry="2" />
<text  x="1138.07" y="2047.5" ></text>
</g>
<g >
<title>__lsan::ResetTagsCb (3 samples, 0.02%)</title><rect x="520.3" y="2037" width="0.2" height="15.0" fill="rgb(235,151,52)" rx="2" ry="2" />
<text  x="523.33" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1749" width="0.6" height="15.0" fill="rgb(219,129,48)" rx="2" ry="2" />
<text  x="218.43" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="693" width="0.5" height="15.0" fill="rgb(233,71,17)" rx="2" ry="2" />
<text  x="1190.21" y="703.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown (3 samples, 0.02%)</title><rect x="1095.0" y="1925" width="0.2" height="15.0" fill="rgb(247,176,38)" rx="2" ry="2" />
<text  x="1097.98" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.03%)</title><rect x="150.7" y="1637" width="0.3" height="15.0" fill="rgb(225,63,12)" rx="2" ry="2" />
<text  x="153.69" y="1647.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="1106.7" y="2053" width="0.2" height="15.0" fill="rgb(230,63,20)" rx="2" ry="2" />
<text  x="1109.74" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="82.1" y="1477" width="0.1" height="15.0" fill="rgb(211,122,26)" rx="2" ry="2" />
<text  x="85.10" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (4 samples, 0.02%)</title><rect x="151.4" y="1749" width="0.2" height="15.0" fill="rgb(212,50,26)" rx="2" ry="2" />
<text  x="154.41" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.03%)</title><rect x="183.1" y="1653" width="0.3" height="15.0" fill="rgb(231,128,53)" rx="2" ry="2" />
<text  x="186.06" y="1663.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="89.9" y="1909" width="0.2" height="15.0" fill="rgb(252,171,31)" rx="2" ry="2" />
<text  x="92.94" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1365" width="0.1" height="15.0" fill="rgb(253,111,53)" rx="2" ry="2" />
<text  x="188.26" y="1375.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (2 samples, 0.01%)</title><rect x="323.0" y="1941" width="0.1" height="15.0" fill="rgb(248,195,39)" rx="2" ry="2" />
<text  x="325.98" y="1951.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="514.7" y="1973" width="0.2" height="15.0" fill="rgb(249,106,31)" rx="2" ry="2" />
<text  x="517.75" y="1983.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (6 samples, 0.03%)</title><rect x="1153.0" y="2037" width="0.4" height="15.0" fill="rgb(242,218,47)" rx="2" ry="2" />
<text  x="1156.00" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.7" y="1685" width="0.4" height="15.0" fill="rgb(244,38,0)" rx="2" ry="2" />
<text  x="1189.67" y="1695.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (60 samples, 0.30%)</title><rect x="799.3" y="2037" width="3.5" height="15.0" fill="rgb(225,207,22)" rx="2" ry="2" />
<text  x="802.28" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (333 samples, 1.68%)</title><rect x="131.9" y="1813" width="19.8" height="15.0" fill="rgb(206,53,21)" rx="2" ry="2" />
<text  x="134.93" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (470 samples, 2.37%)</title><rect x="56.0" y="1589" width="27.9" height="15.0" fill="rgb(252,186,14)" rx="2" ry="2" />
<text  x="58.97" y="1599.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1077" width="0.1" height="15.0" fill="rgb(211,97,29)" rx="2" ry="2" />
<text  x="160.82" y="1087.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (44 samples, 0.22%)</title><rect x="133.6" y="1573" width="2.7" height="15.0" fill="rgb(246,70,13)" rx="2" ry="2" />
<text  x="136.65" y="1583.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.01%)</title><rect x="183.5" y="1669" width="0.1" height="15.0" fill="rgb(223,110,41)" rx="2" ry="2" />
<text  x="186.48" y="1679.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="164.6" y="1573" width="0.1" height="15.0" fill="rgb(234,71,0)" rx="2" ry="2" />
<text  x="167.59" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1509" width="0.3" height="15.0" fill="rgb(236,84,44)" rx="2" ry="2" />
<text  x="1189.79" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1781" width="0.5" height="15.0" fill="rgb(215,89,12)" rx="2" ry="2" />
<text  x="1189.14" y="1791.5" ></text>
</g>
<g >
<title>wp_page_copy (20 samples, 0.10%)</title><rect x="54.5" y="1925" width="1.2" height="15.0" fill="rgb(235,14,1)" rx="2" ry="2" />
<text  x="57.48" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1733" width="0.1" height="15.0" fill="rgb(214,86,4)" rx="2" ry="2" />
<text  x="218.43" y="1743.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="187.8" y="1573" width="0.1" height="15.0" fill="rgb(211,220,21)" rx="2" ry="2" />
<text  x="190.75" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1701" width="0.1" height="15.0" fill="rgb(221,87,41)" rx="2" ry="2" />
<text  x="161.00" y="1711.5" ></text>
</g>
<g >
<title>alloc_pages_vma (9 samples, 0.05%)</title><rect x="676.1" y="1765" width="0.5" height="15.0" fill="rgb(233,33,25)" rx="2" ry="2" />
<text  x="679.11" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (547 samples, 2.75%)</title><rect x="56.0" y="1845" width="32.5" height="15.0" fill="rgb(213,13,22)" rx="2" ry="2" />
<text  x="58.97" y="1855.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="85" width="0.2" height="15.0" fill="rgb(236,122,2)" rx="2" ry="2" />
<text  x="1189.91" y="95.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (21 samples, 0.11%)</title><rect x="1016.3" y="2053" width="1.3" height="15.0" fill="rgb(206,226,24)" rx="2" ry="2" />
<text  x="1019.35" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (94 samples, 0.47%)</title><rect x="159.4" y="1621" width="5.6" height="15.0" fill="rgb(213,172,11)" rx="2" ry="2" />
<text  x="162.42" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1637" width="0.4" height="15.0" fill="rgb(212,147,54)" rx="2" ry="2" />
<text  x="1189.73" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="42.3" y="2005" width="0.1" height="15.0" fill="rgb(227,200,38)" rx="2" ry="2" />
<text  x="45.31" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (513 samples, 2.58%)</title><rect x="56.0" y="1749" width="30.4" height="15.0" fill="rgb(231,11,8)" rx="2" ry="2" />
<text  x="58.97" y="1759.5" >[u..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (4 samples, 0.02%)</title><rect x="151.4" y="1765" width="0.2" height="15.0" fill="rgb(241,143,48)" rx="2" ry="2" />
<text  x="154.41" y="1775.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="1013.1" y="2021" width="0.2" height="15.0" fill="rgb(247,19,0)" rx="2" ry="2" />
<text  x="1016.08" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="725" width="0.1" height="15.0" fill="rgb(225,120,44)" rx="2" ry="2" />
<text  x="160.82" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="53" width="0.4" height="15.0" fill="rgb(246,192,39)" rx="2" ry="2" />
<text  x="1190.27" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="325" width="0.5" height="15.0" fill="rgb(212,195,43)" rx="2" ry="2" />
<text  x="1190.21" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (4 samples, 0.02%)</title><rect x="760.4" y="1893" width="0.2" height="15.0" fill="rgb(207,133,39)" rx="2" ry="2" />
<text  x="763.38" y="1903.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="143.3" y="1605" width="0.1" height="15.0" fill="rgb(239,7,52)" rx="2" ry="2" />
<text  x="146.33" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (79 samples, 0.40%)</title><rect x="151.8" y="1749" width="4.7" height="15.0" fill="rgb(238,204,32)" rx="2" ry="2" />
<text  x="154.76" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (5 samples, 0.03%)</title><rect x="179.6" y="1733" width="0.3" height="15.0" fill="rgb(244,75,48)" rx="2" ry="2" />
<text  x="182.61" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="741" width="0.4" height="15.0" fill="rgb(247,18,5)" rx="2" ry="2" />
<text  x="1189.20" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (72 samples, 0.36%)</title><rect x="165.2" y="1621" width="4.3" height="15.0" fill="rgb(234,83,26)" rx="2" ry="2" />
<text  x="168.24" y="1631.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="517.8" y="1973" width="0.1" height="15.0" fill="rgb(220,70,14)" rx="2" ry="2" />
<text  x="520.78" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1237" width="0.3" height="15.0" fill="rgb(210,78,25)" rx="2" ry="2" />
<text  x="1189.79" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1573" width="0.4" height="15.0" fill="rgb(214,40,26)" rx="2" ry="2" />
<text  x="1189.73" y="1583.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="1116.1" y="2037" width="0.1" height="15.0" fill="rgb(233,229,33)" rx="2" ry="2" />
<text  x="1119.12" y="2047.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (2 samples, 0.01%)</title><rect x="207.0" y="1669" width="0.1" height="15.0" fill="rgb(225,180,35)" rx="2" ry="2" />
<text  x="209.99" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="469" width="0.1" height="15.0" fill="rgb(226,46,8)" rx="2" ry="2" />
<text  x="160.82" y="479.5" ></text>
</g>
<g >
<title>mmap_region (16 samples, 0.08%)</title><rect x="1095.2" y="1941" width="1.0" height="15.0" fill="rgb(232,174,2)" rx="2" ry="2" />
<text  x="1098.22" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1253" width="0.2" height="15.0" fill="rgb(227,84,49)" rx="2" ry="2" />
<text  x="188.44" y="1263.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="171.4" y="1589" width="0.1" height="15.0" fill="rgb(208,229,43)" rx="2" ry="2" />
<text  x="174.42" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (370 samples, 1.86%)</title><rect x="56.0" y="1269" width="22.0" height="15.0" fill="rgb(232,5,11)" rx="2" ry="2" />
<text  x="59.03" y="1279.5" >[..</text>
</g>
<g >
<title>__interceptor_strcmp (4 samples, 0.02%)</title><rect x="42.0" y="2037" width="0.2" height="15.0" fill="rgb(232,63,9)" rx="2" ry="2" />
<text  x="44.95" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1701" width="0.5" height="15.0" fill="rgb(243,107,39)" rx="2" ry="2" />
<text  x="1189.14" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.03%)</title><rect x="206.5" y="1637" width="0.3" height="15.0" fill="rgb(212,29,46)" rx="2" ry="2" />
<text  x="209.52" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (3 samples, 0.02%)</title><rect x="207.5" y="1749" width="0.1" height="15.0" fill="rgb(249,135,50)" rx="2" ry="2" />
<text  x="210.47" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="709" width="0.1" height="15.0" fill="rgb(233,209,8)" rx="2" ry="2" />
<text  x="160.82" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="917" width="0.1" height="15.0" fill="rgb(206,87,45)" rx="2" ry="2" />
<text  x="160.82" y="927.5" ></text>
</g>
<g >
<title>[unknown] (319 samples, 1.61%)</title><rect x="56.0" y="341" width="19.0" height="15.0" fill="rgb(213,191,25)" rx="2" ry="2" />
<text  x="59.03" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="89.3" y="1909" width="0.1" height="15.0" fill="rgb(240,1,44)" rx="2" ry="2" />
<text  x="92.28" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="213.7" y="1749" width="0.1" height="15.0" fill="rgb(236,183,29)" rx="2" ry="2" />
<text  x="216.70" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (406 samples, 2.04%)</title><rect x="56.0" y="1397" width="24.1" height="15.0" fill="rgb(231,203,19)" rx="2" ry="2" />
<text  x="59.03" y="1407.5" >[..</text>
</g>
<g >
<title>tlb_flush_mmu_free (5 samples, 0.03%)</title><rect x="1097.2" y="1893" width="0.3" height="15.0" fill="rgb(254,54,42)" rx="2" ry="2" />
<text  x="1100.17" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1061" width="0.1" height="15.0" fill="rgb(213,174,5)" rx="2" ry="2" />
<text  x="160.82" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (352 samples, 1.77%)</title><rect x="158.7" y="1781" width="20.9" height="15.0" fill="rgb(242,211,6)" rx="2" ry="2" />
<text  x="161.71" y="1791.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (415 samples, 2.09%)</title><rect x="541.9" y="1893" width="24.7" height="15.0" fill="rgb(246,108,40)" rx="2" ry="2" />
<text  x="544.95" y="1903.5" >f..</text>
</g>
<g >
<title>[unknown] (551 samples, 2.77%)</title><rect x="56.0" y="1861" width="32.7" height="15.0" fill="rgb(215,223,6)" rx="2" ry="2" />
<text  x="58.97" y="1871.5" >[u..</text>
</g>
<g >
<title>futex_wake (12 samples, 0.06%)</title><rect x="29.1" y="1925" width="0.7" height="15.0" fill="rgb(246,190,20)" rx="2" ry="2" />
<text  x="32.06" y="1935.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.01%)</title><rect x="794.5" y="1989" width="0.1" height="15.0" fill="rgb(219,173,26)" rx="2" ry="2" />
<text  x="797.47" y="1999.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.03%)</title><rect x="649.0" y="1765" width="0.3" height="15.0" fill="rgb(237,44,43)" rx="2" ry="2" />
<text  x="651.97" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1381" width="0.1" height="15.0" fill="rgb(231,11,44)" rx="2" ry="2" />
<text  x="188.26" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="757" width="0.5" height="15.0" fill="rgb(210,212,19)" rx="2" ry="2" />
<text  x="1190.21" y="767.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (21 samples, 0.11%)</title><rect x="759.0" y="1973" width="1.2" height="15.0" fill="rgb(214,160,22)" rx="2" ry="2" />
<text  x="761.95" y="1983.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="680.0" y="1813" width="0.1" height="15.0" fill="rgb(234,110,3)" rx="2" ry="2" />
<text  x="683.03" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (21 samples, 0.11%)</title><rect x="688.6" y="1845" width="1.2" height="15.0" fill="rgb(236,82,11)" rx="2" ry="2" />
<text  x="691.58" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="214.5" y="1829" width="0.3" height="15.0" fill="rgb(230,89,2)" rx="2" ry="2" />
<text  x="217.48" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (318 samples, 1.60%)</title><rect x="56.0" y="277" width="18.9" height="15.0" fill="rgb(233,169,31)" rx="2" ry="2" />
<text  x="59.03" y="287.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (7 samples, 0.04%)</title><rect x="70.8" y="37" width="0.4" height="15.0" fill="rgb(239,73,35)" rx="2" ry="2" />
<text  x="73.75" y="47.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (8 samples, 0.04%)</title><rect x="804.8" y="2037" width="0.5" height="15.0" fill="rgb(232,192,31)" rx="2" ry="2" />
<text  x="807.80" y="2047.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (40 samples, 0.20%)</title><rect x="330.6" y="1989" width="2.4" height="15.0" fill="rgb(223,133,40)" rx="2" ry="2" />
<text  x="333.58" y="1999.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (9 samples, 0.05%)</title><rect x="55.1" y="1893" width="0.6" height="15.0" fill="rgb(246,40,4)" rx="2" ry="2" />
<text  x="58.14" y="1903.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.02%)</title><rect x="1189.5" y="1989" width="0.2" height="15.0" fill="rgb(225,35,6)" rx="2" ry="2" />
<text  x="1192.47" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1285" width="0.1" height="15.0" fill="rgb(251,147,3)" rx="2" ry="2" />
<text  x="188.26" y="1295.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (335 samples, 1.69%)</title><rect x="221.5" y="1973" width="19.9" height="15.0" fill="rgb(251,103,38)" rx="2" ry="2" />
<text  x="224.54" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (357 samples, 1.80%)</title><rect x="186.4" y="1813" width="21.2" height="15.0" fill="rgb(232,22,6)" rx="2" ry="2" />
<text  x="189.44" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (491 samples, 2.47%)</title><rect x="56.0" y="1669" width="29.1" height="15.0" fill="rgb(208,89,11)" rx="2" ry="2" />
<text  x="58.97" y="1679.5" >[u..</text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="138.3" y="1589" width="0.2" height="15.0" fill="rgb(222,58,37)" rx="2" ry="2" />
<text  x="141.34" y="1599.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="653.3" y="1749" width="0.1" height="15.0" fill="rgb(243,222,1)" rx="2" ry="2" />
<text  x="656.30" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (5 samples, 0.03%)</title><rect x="749.1" y="2037" width="0.3" height="15.0" fill="rgb(215,197,32)" rx="2" ry="2" />
<text  x="752.10" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1205" width="0.1" height="15.0" fill="rgb(234,79,29)" rx="2" ry="2" />
<text  x="160.82" y="1215.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (133 samples, 0.67%)</title><rect x="497.8" y="1909" width="7.9" height="15.0" fill="rgb(226,116,11)" rx="2" ry="2" />
<text  x="500.76" y="1919.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.01%)</title><rect x="521.2" y="1957" width="0.1" height="15.0" fill="rgb(216,37,13)" rx="2" ry="2" />
<text  x="524.16" y="1967.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (2 samples, 0.01%)</title><rect x="159.2" y="1621" width="0.2" height="15.0" fill="rgb(234,58,50)" rx="2" ry="2" />
<text  x="162.24" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (3 samples, 0.02%)</title><rect x="163.3" y="1541" width="0.2" height="15.0" fill="rgb(235,229,6)" rx="2" ry="2" />
<text  x="166.28" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1925" width="0.4" height="15.0" fill="rgb(247,74,8)" rx="2" ry="2" />
<text  x="188.20" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 1.65%)</title><rect x="56.0" y="917" width="19.5" height="15.0" fill="rgb(211,167,29)" rx="2" ry="2" />
<text  x="59.03" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="213" width="0.4" height="15.0" fill="rgb(249,14,27)" rx="2" ry="2" />
<text  x="1189.20" y="223.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (7 samples, 0.04%)</title><rect x="1161.4" y="2037" width="0.4" height="15.0" fill="rgb(246,197,32)" rx="2" ry="2" />
<text  x="1164.37" y="2047.5" ></text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 0.01%)</title><rect x="1107.2" y="1877" width="0.1" height="15.0" fill="rgb(217,2,45)" rx="2" ry="2" />
<text  x="1110.21" y="1887.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (34 samples, 0.17%)</title><rect x="985.7" y="2053" width="2.0" height="15.0" fill="rgb(254,199,5)" rx="2" ry="2" />
<text  x="988.70" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1397" width="0.6" height="15.0" fill="rgb(216,228,11)" rx="2" ry="2" />
<text  x="1190.15" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="405" width="0.5" height="15.0" fill="rgb(226,203,5)" rx="2" ry="2" />
<text  x="1190.21" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (14 samples, 0.07%)</title><rect x="29.0" y="2021" width="0.8" height="15.0" fill="rgb(248,205,51)" rx="2" ry="2" />
<text  x="32.00" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="773" width="0.2" height="15.0" fill="rgb(237,202,24)" rx="2" ry="2" />
<text  x="1189.85" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="597" width="0.5" height="15.0" fill="rgb(221,169,31)" rx="2" ry="2" />
<text  x="1190.21" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.1" y="1925" width="0.5" height="15.0" fill="rgb(226,191,45)" rx="2" ry="2" />
<text  x="1189.08" y="1935.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="89.9" y="1957" width="0.2" height="15.0" fill="rgb(237,13,54)" rx="2" ry="2" />
<text  x="92.94" y="1967.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="194.0" y="1589" width="0.3" height="15.0" fill="rgb(216,99,16)" rx="2" ry="2" />
<text  x="197.05" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (78 samples, 0.39%)</title><rect x="137.0" y="1701" width="4.7" height="15.0" fill="rgb(249,189,30)" rx="2" ry="2" />
<text  x="140.03" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (66 samples, 0.33%)</title><rect x="179.9" y="1701" width="3.9" height="15.0" fill="rgb(245,85,25)" rx="2" ry="2" />
<text  x="182.91" y="1711.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (2 samples, 0.01%)</title><rect x="151.1" y="1653" width="0.1" height="15.0" fill="rgb(254,181,23)" rx="2" ry="2" />
<text  x="154.11" y="1663.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="133.8" y="1557" width="0.1" height="15.0" fill="rgb(218,164,36)" rx="2" ry="2" />
<text  x="136.77" y="1567.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.10%)</title><rect x="630.0" y="1877" width="1.2" height="15.0" fill="rgb(233,186,37)" rx="2" ry="2" />
<text  x="633.02" y="1887.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="207.5" y="1717" width="0.1" height="15.0" fill="rgb(243,91,20)" rx="2" ry="2" />
<text  x="210.53" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (9 samples, 0.05%)</title><rect x="580.7" y="1877" width="0.6" height="15.0" fill="rgb(249,66,28)" rx="2" ry="2" />
<text  x="583.73" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="477.6" y="1941" width="0.1" height="15.0" fill="rgb(236,38,0)" rx="2" ry="2" />
<text  x="480.63" y="1951.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="615.4" y="1845" width="0.1" height="15.0" fill="rgb(243,200,40)" rx="2" ry="2" />
<text  x="618.35" y="1855.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="202.2" y="1685" width="0.2" height="15.0" fill="rgb(242,160,10)" rx="2" ry="2" />
<text  x="205.24" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="2053" width="0.6" height="15.0" fill="rgb(217,79,47)" rx="2" ry="2" />
<text  x="1190.15" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="533" width="0.1" height="15.0" fill="rgb(254,114,29)" rx="2" ry="2" />
<text  x="160.82" y="543.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (12 samples, 0.06%)</title><rect x="537.1" y="1893" width="0.7" height="15.0" fill="rgb(215,59,52)" rx="2" ry="2" />
<text  x="540.08" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (457 samples, 2.30%)</title><rect x="56.0" y="1541" width="27.1" height="15.0" fill="rgb(246,90,29)" rx="2" ry="2" />
<text  x="58.97" y="1551.5" >[..</text>
</g>
<g >
<title>memcmp@plt (4 samples, 0.02%)</title><rect x="1106.0" y="2053" width="0.3" height="15.0" fill="rgb(246,148,25)" rx="2" ry="2" />
<text  x="1109.02" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="165" width="0.3" height="15.0" fill="rgb(234,161,33)" rx="2" ry="2" />
<text  x="1189.26" y="175.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (5 samples, 0.03%)</title><rect x="55.4" y="1861" width="0.3" height="15.0" fill="rgb(239,182,22)" rx="2" ry="2" />
<text  x="58.37" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (25 samples, 0.13%)</title><rect x="687.1" y="1845" width="1.5" height="15.0" fill="rgb(245,8,32)" rx="2" ry="2" />
<text  x="690.09" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="757" width="0.2" height="15.0" fill="rgb(236,17,21)" rx="2" ry="2" />
<text  x="1189.85" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (58 samples, 0.29%)</title><rect x="175.6" y="1637" width="3.5" height="15.0" fill="rgb(219,120,44)" rx="2" ry="2" />
<text  x="178.64" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="917" width="0.4" height="15.0" fill="rgb(250,2,21)" rx="2" ry="2" />
<text  x="1189.20" y="927.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="81.9" y="1477" width="0.1" height="15.0" fill="rgb(220,85,21)" rx="2" ry="2" />
<text  x="84.86" y="1487.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (19 samples, 0.10%)</title><rect x="938.4" y="1797" width="1.1" height="15.0" fill="rgb(231,64,12)" rx="2" ry="2" />
<text  x="941.37" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="215.9" y="1077" width="0.1" height="15.0" fill="rgb(223,32,21)" rx="2" ry="2" />
<text  x="218.90" y="1087.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (3 samples, 0.02%)</title><rect x="1177.8" y="2037" width="0.2" height="15.0" fill="rgb(245,144,32)" rx="2" ry="2" />
<text  x="1180.83" y="2047.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (10 samples, 0.05%)</title><rect x="806.3" y="2005" width="0.6" height="15.0" fill="rgb(240,108,32)" rx="2" ry="2" />
<text  x="809.35" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="864.8" y="2021" width="0.1" height="15.0" fill="rgb(229,24,10)" rx="2" ry="2" />
<text  x="867.79" y="2031.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="508.6" y="1973" width="0.1" height="15.0" fill="rgb(207,106,23)" rx="2" ry="2" />
<text  x="511.57" y="1983.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="139.1" y="1589" width="0.1" height="15.0" fill="rgb(238,18,2)" rx="2" ry="2" />
<text  x="142.11" y="1599.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (2 samples, 0.01%)</title><rect x="525.1" y="1925" width="0.1" height="15.0" fill="rgb(212,211,44)" rx="2" ry="2" />
<text  x="528.08" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (95 samples, 0.48%)</title><rect x="159.4" y="1653" width="5.7" height="15.0" fill="rgb(234,27,35)" rx="2" ry="2" />
<text  x="162.42" y="1663.5" ></text>
</g>
<g >
<title>unmap_page_range (7 samples, 0.04%)</title><rect x="1097.1" y="1909" width="0.4" height="15.0" fill="rgb(217,72,28)" rx="2" ry="2" />
<text  x="1100.06" y="1919.5" ></text>
</g>
<g >
<title>memcpy (16 samples, 0.08%)</title><rect x="652.5" y="1877" width="0.9" height="15.0" fill="rgb(213,111,41)" rx="2" ry="2" />
<text  x="655.47" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (78 samples, 0.39%)</title><rect x="141.8" y="1749" width="4.7" height="15.0" fill="rgb(222,121,45)" rx="2" ry="2" />
<text  x="144.84" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1621" width="0.2" height="15.0" fill="rgb(240,138,9)" rx="2" ry="2" />
<text  x="160.76" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="82.2" y="1493" width="0.1" height="15.0" fill="rgb(245,205,16)" rx="2" ry="2" />
<text  x="85.22" y="1503.5" ></text>
</g>
<g >
<title>clear_page_erms (5 samples, 0.03%)</title><rect x="54.6" y="1877" width="0.3" height="15.0" fill="rgb(235,36,46)" rx="2" ry="2" />
<text  x="57.60" y="1887.5" ></text>
</g>
<g >
<title>clear_page_erms (7 samples, 0.04%)</title><rect x="676.2" y="1733" width="0.4" height="15.0" fill="rgb(239,90,38)" rx="2" ry="2" />
<text  x="679.17" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1301" width="0.1" height="15.0" fill="rgb(215,22,12)" rx="2" ry="2" />
<text  x="161.00" y="1311.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (4 samples, 0.02%)</title><rect x="937.4" y="1925" width="0.3" height="15.0" fill="rgb(233,21,22)" rx="2" ry="2" />
<text  x="940.42" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (329 samples, 1.66%)</title><rect x="56.0" y="949" width="19.6" height="15.0" fill="rgb(218,70,23)" rx="2" ry="2" />
<text  x="59.03" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (43 samples, 0.22%)</title><rect x="171.0" y="1605" width="2.6" height="15.0" fill="rgb(244,0,14)" rx="2" ry="2" />
<text  x="174.00" y="1615.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (7 samples, 0.04%)</title><rect x="574.4" y="1877" width="0.4" height="15.0" fill="rgb(208,148,9)" rx="2" ry="2" />
<text  x="577.37" y="1887.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (7 samples, 0.04%)</title><rect x="761.7" y="2037" width="0.5" height="15.0" fill="rgb(215,103,23)" rx="2" ry="2" />
<text  x="764.75" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.03%)</title><rect x="760.3" y="2021" width="0.3" height="15.0" fill="rgb(253,224,18)" rx="2" ry="2" />
<text  x="763.26" y="2031.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (95 samples, 0.48%)</title><rect x="48.4" y="2021" width="5.6" height="15.0" fill="rgb(210,175,48)" rx="2" ry="2" />
<text  x="51.37" y="2031.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="193.7" y="1589" width="0.3" height="15.0" fill="rgb(234,36,13)" rx="2" ry="2" />
<text  x="196.75" y="1599.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (18 samples, 0.09%)</title><rect x="25.6" y="1941" width="1.0" height="15.0" fill="rgb(248,98,39)" rx="2" ry="2" />
<text  x="28.56" y="1951.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 0.02%)</title><rect x="1107.1" y="1957" width="0.2" height="15.0" fill="rgb(251,168,23)" rx="2" ry="2" />
<text  x="1110.09" y="1967.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="691.1" y="1845" width="0.2" height="15.0" fill="rgb(226,211,49)" rx="2" ry="2" />
<text  x="694.13" y="1855.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="84.9" y="1653" width="0.1" height="15.0" fill="rgb(222,7,17)" rx="2" ry="2" />
<text  x="87.89" y="1663.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::load (5 samples, 0.03%)</title><rect x="1097.7" y="2053" width="0.2" height="15.0" fill="rgb(212,16,6)" rx="2" ry="2" />
<text  x="1100.65" y="2063.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="615.5" y="1845" width="0.1" height="15.0" fill="rgb(222,157,35)" rx="2" ry="2" />
<text  x="618.53" y="1855.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (2 samples, 0.01%)</title><rect x="221.7" y="1957" width="0.1" height="15.0" fill="rgb(215,202,12)" rx="2" ry="2" />
<text  x="224.72" y="1967.5" ></text>
</g>
<g >
<title>do_wp_page (71 samples, 0.36%)</title><rect x="935.5" y="1957" width="4.2" height="15.0" fill="rgb(215,84,9)" rx="2" ry="2" />
<text  x="938.46" y="1967.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (26 samples, 0.13%)</title><rect x="1094.9" y="2037" width="1.6" height="15.0" fill="rgb(241,18,44)" rx="2" ry="2" />
<text  x="1097.92" y="2047.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="162.2" y="1541" width="0.1" height="15.0" fill="rgb(254,138,14)" rx="2" ry="2" />
<text  x="165.21" y="1551.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.02%)</title><rect x="1097.7" y="1973" width="0.2" height="15.0" fill="rgb(221,54,12)" rx="2" ry="2" />
<text  x="1100.71" y="1983.5" ></text>
</g>
<g >
<title>__libc_start_main (6,688 samples, 33.66%)</title><rect x="121.5" y="2037" width="397.2" height="15.0" fill="rgb(210,61,38)" rx="2" ry="2" />
<text  x="124.53" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="677" width="0.1" height="15.0" fill="rgb(239,176,25)" rx="2" ry="2" />
<text  x="160.82" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="293" width="0.2" height="15.0" fill="rgb(210,127,26)" rx="2" ry="2" />
<text  x="1189.85" y="303.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="181.8" y="1653" width="0.3" height="15.0" fill="rgb(242,196,9)" rx="2" ry="2" />
<text  x="184.81" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1381" width="0.5" height="15.0" fill="rgb(245,208,24)" rx="2" ry="2" />
<text  x="218.55" y="1391.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="76.6" y="1093" width="0.1" height="15.0" fill="rgb(211,211,25)" rx="2" ry="2" />
<text  x="79.58" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1429" width="0.3" height="15.0" fill="rgb(222,53,13)" rx="2" ry="2" />
<text  x="1189.79" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (82 samples, 0.41%)</title><rect x="146.5" y="1749" width="4.9" height="15.0" fill="rgb(250,146,18)" rx="2" ry="2" />
<text  x="149.54" y="1759.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (5 samples, 0.03%)</title><rect x="55.4" y="1845" width="0.3" height="15.0" fill="rgb(210,80,54)" rx="2" ry="2" />
<text  x="58.37" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.04%)</title><rect x="42.4" y="2021" width="0.4" height="15.0" fill="rgb(246,80,3)" rx="2" ry="2" />
<text  x="45.43" y="2031.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (139 samples, 0.70%)</title><rect x="966.6" y="2053" width="8.3" height="15.0" fill="rgb(219,211,1)" rx="2" ry="2" />
<text  x="969.64" y="2063.5" ></text>
</g>
<g >
<title>do_page_fault (20 samples, 0.10%)</title><rect x="689.9" y="1829" width="1.2" height="15.0" fill="rgb(250,124,4)" rx="2" ry="2" />
<text  x="692.89" y="1839.5" ></text>
</g>
<g >
<title>do_group_exit (8 samples, 0.04%)</title><rect x="1097.0" y="2005" width="0.5" height="15.0" fill="rgb(239,82,23)" rx="2" ry="2" />
<text  x="1100.00" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="309" width="0.4" height="15.0" fill="rgb(253,27,23)" rx="2" ry="2" />
<text  x="1189.20" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (76 samples, 0.38%)</title><rect x="174.8" y="1653" width="4.5" height="15.0" fill="rgb(215,226,39)" rx="2" ry="2" />
<text  x="177.80" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1957" width="0.6" height="15.0" fill="rgb(226,84,41)" rx="2" ry="2" />
<text  x="1190.15" y="1967.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TWeightedDoc*, std::vector&lt;TWeightedDoc, std::allocator&lt;TWeightedDoc&gt; &gt; &gt;, TWeightedDoc*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TNewsCluster::SortByWeights (2 samples, 0.01%)</title><rect x="330.4" y="1973" width="0.1" height="15.0" fill="rgb(241,41,16)" rx="2" ry="2" />
<text  x="333.40" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1589" width="0.1" height="15.0" fill="rgb(234,185,10)" rx="2" ry="2" />
<text  x="161.00" y="1599.5" ></text>
</g>
<g >
<title>page_fault (23 samples, 0.12%)</title><rect x="496.4" y="1925" width="1.4" height="15.0" fill="rgb(217,123,32)" rx="2" ry="2" />
<text  x="499.40" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="1989" width="0.5" height="15.0" fill="rgb(215,27,21)" rx="2" ry="2" />
<text  x="1189.08" y="1999.5" ></text>
</g>
<g >
<title>page_fault (22 samples, 0.11%)</title><rect x="675.7" y="1845" width="1.3" height="15.0" fill="rgb(214,171,4)" rx="2" ry="2" />
<text  x="678.69" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1653" width="0.1" height="15.0" fill="rgb(236,181,33)" rx="2" ry="2" />
<text  x="161.00" y="1663.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (7 samples, 0.04%)</title><rect x="210.0" y="1669" width="0.4" height="15.0" fill="rgb(210,74,19)" rx="2" ry="2" />
<text  x="212.96" y="1679.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="724.4" y="1797" width="0.2" height="15.0" fill="rgb(232,70,22)" rx="2" ry="2" />
<text  x="727.39" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="207.3" y="1669" width="0.1" height="15.0" fill="rgb(224,69,54)" rx="2" ry="2" />
<text  x="210.29" y="1679.5" ></text>
</g>
<g >
<title>__lsan::MarkIndirectlyLeakedCb (2 samples, 0.01%)</title><rect x="520.1" y="2037" width="0.1" height="15.0" fill="rgb(215,41,17)" rx="2" ry="2" />
<text  x="523.09" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="215.6" y="1269" width="0.4" height="15.0" fill="rgb(209,8,39)" rx="2" ry="2" />
<text  x="218.60" y="1279.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="164.7" y="1573" width="0.2" height="15.0" fill="rgb(253,194,20)" rx="2" ry="2" />
<text  x="167.71" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="837" width="0.2" height="15.0" fill="rgb(210,154,17)" rx="2" ry="2" />
<text  x="1189.85" y="847.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (204 samples, 1.03%)</title><rect x="617.9" y="1877" width="12.1" height="15.0" fill="rgb(254,5,29)" rx="2" ry="2" />
<text  x="620.91" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (666 samples, 3.35%)</title><rect x="1146.4" y="2053" width="39.6" height="15.0" fill="rgb(227,181,33)" rx="2" ry="2" />
<text  x="1149.41" y="2063.5" >std..</text>
</g>
<g >
<title>RunFasttextClf (232 samples, 1.17%)</title><rect x="524.6" y="1957" width="13.8" height="15.0" fill="rgb(229,212,13)" rx="2" ry="2" />
<text  x="527.61" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1941" width="0.6" height="15.0" fill="rgb(252,61,5)" rx="2" ry="2" />
<text  x="1190.15" y="1951.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="83.0" y="1509" width="0.1" height="15.0" fill="rgb(253,59,52)" rx="2" ry="2" />
<text  x="85.99" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="453" width="0.1" height="15.0" fill="rgb(235,32,45)" rx="2" ry="2" />
<text  x="160.82" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (173 samples, 0.87%)</title><rect x="186.4" y="1765" width="10.3" height="15.0" fill="rgb(207,147,0)" rx="2" ry="2" />
<text  x="189.44" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="604.5" y="1861" width="0.2" height="15.0" fill="rgb(250,103,3)" rx="2" ry="2" />
<text  x="607.54" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1749" width="0.5" height="15.0" fill="rgb(235,217,36)" rx="2" ry="2" />
<text  x="1189.14" y="1759.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.05%)</title><rect x="724.1" y="1845" width="0.6" height="15.0" fill="rgb(231,224,38)" rx="2" ry="2" />
<text  x="727.09" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="215.1" y="1829" width="0.1" height="15.0" fill="rgb(246,140,44)" rx="2" ry="2" />
<text  x="218.07" y="1839.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="144.2" y="1605" width="0.1" height="15.0" fill="rgb(214,49,51)" rx="2" ry="2" />
<text  x="147.22" y="1615.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="147.7" y="1653" width="0.1" height="15.0" fill="rgb(235,164,42)" rx="2" ry="2" />
<text  x="150.72" y="1663.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="84.9" y="1557" width="0.1" height="15.0" fill="rgb(228,19,41)" rx="2" ry="2" />
<text  x="87.89" y="1567.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="83.0" y="1445" width="0.1" height="15.0" fill="rgb(227,10,35)" rx="2" ry="2" />
<text  x="85.99" y="1455.5" ></text>
</g>
<g >
<title>__pthread_getspecific (8 samples, 0.04%)</title><rect x="593.3" y="1877" width="0.5" height="15.0" fill="rgb(214,120,44)" rx="2" ry="2" />
<text  x="596.32" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1557" width="0.5" height="15.0" fill="rgb(246,203,45)" rx="2" ry="2" />
<text  x="1189.14" y="1567.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="89.3" y="1893" width="0.1" height="15.0" fill="rgb(227,155,28)" rx="2" ry="2" />
<text  x="92.28" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (319 samples, 1.61%)</title><rect x="547.6" y="1877" width="19.0" height="15.0" fill="rgb(211,227,49)" rx="2" ry="2" />
<text  x="550.65" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (544 samples, 2.74%)</title><rect x="56.0" y="1829" width="32.3" height="15.0" fill="rgb(211,79,53)" rx="2" ry="2" />
<text  x="58.97" y="1839.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1621" width="0.1" height="15.0" fill="rgb(205,3,25)" rx="2" ry="2" />
<text  x="161.00" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (73 samples, 0.37%)</title><rect x="191.9" y="1621" width="4.3" height="15.0" fill="rgb(224,76,37)" rx="2" ry="2" />
<text  x="194.91" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="1188.6" y="2037" width="0.3" height="15.0" fill="rgb(250,61,51)" rx="2" ry="2" />
<text  x="1191.63" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="157.7" y="1733" width="0.3" height="15.0" fill="rgb(220,75,30)" rx="2" ry="2" />
<text  x="160.70" y="1743.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.03%)</title><rect x="515.7" y="1989" width="0.3" height="15.0" fill="rgb(210,107,25)" rx="2" ry="2" />
<text  x="518.70" y="1999.5" ></text>
</g>
<g >
<title>do_page_fault (8 samples, 0.04%)</title><rect x="1017.8" y="2021" width="0.5" height="15.0" fill="rgb(248,29,43)" rx="2" ry="2" />
<text  x="1020.83" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1301" width="0.2" height="15.0" fill="rgb(206,105,35)" rx="2" ry="2" />
<text  x="188.44" y="1311.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (2 samples, 0.01%)</title><rect x="511.4" y="1973" width="0.1" height="15.0" fill="rgb(243,153,48)" rx="2" ry="2" />
<text  x="514.42" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1829" width="0.4" height="15.0" fill="rgb(235,209,16)" rx="2" ry="2" />
<text  x="160.70" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.03%)</title><rect x="156.8" y="1829" width="0.2" height="15.0" fill="rgb(245,113,23)" rx="2" ry="2" />
<text  x="159.75" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (66 samples, 0.33%)</title><rect x="179.9" y="1749" width="3.9" height="15.0" fill="rgb(235,145,20)" rx="2" ry="2" />
<text  x="182.91" y="1759.5" ></text>
</g>
<g >
<title>operator delete[] (69 samples, 0.35%)</title><rect x="1178.1" y="2037" width="4.1" height="15.0" fill="rgb(212,159,42)" rx="2" ry="2" />
<text  x="1181.06" y="2047.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 0.03%)</title><rect x="54.6" y="1893" width="0.4" height="15.0" fill="rgb(225,104,6)" rx="2" ry="2" />
<text  x="57.60" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="92.6" y="2021" width="0.2" height="15.0" fill="rgb(236,34,1)" rx="2" ry="2" />
<text  x="95.61" y="2031.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="83.0" y="1493" width="0.1" height="15.0" fill="rgb(243,209,2)" rx="2" ry="2" />
<text  x="85.99" y="1503.5" ></text>
</g>
<g >
<title>__clock_gettime (6 samples, 0.03%)</title><rect x="121.0" y="2037" width="0.4" height="15.0" fill="rgb(245,203,33)" rx="2" ry="2" />
<text  x="124.00" y="2047.5" ></text>
</g>
<g >
<title>TDocument::operator= (2 samples, 0.01%)</title><rect x="518.4" y="1957" width="0.1" height="15.0" fill="rgb(217,28,8)" rx="2" ry="2" />
<text  x="521.37" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.1" y="2021" width="0.5" height="15.0" fill="rgb(245,0,2)" rx="2" ry="2" />
<text  x="1189.08" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1573" width="0.1" height="15.0" fill="rgb(235,150,8)" rx="2" ry="2" />
<text  x="218.43" y="1583.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (3 samples, 0.02%)</title><rect x="141.0" y="1605" width="0.2" height="15.0" fill="rgb(206,27,36)" rx="2" ry="2" />
<text  x="144.01" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="437" width="19.0" height="15.0" fill="rgb(230,157,1)" rx="2" ry="2" />
<text  x="59.03" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (3 samples, 0.02%)</title><rect x="28.3" y="2037" width="0.2" height="15.0" fill="rgb(228,160,17)" rx="2" ry="2" />
<text  x="31.29" y="2047.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.02%)</title><rect x="1097.7" y="2021" width="0.2" height="15.0" fill="rgb(210,215,31)" rx="2" ry="2" />
<text  x="1100.71" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (76 samples, 0.38%)</title><rect x="132.4" y="1669" width="4.5" height="15.0" fill="rgb(249,127,9)" rx="2" ry="2" />
<text  x="135.40" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="215.6" y="1237" width="0.4" height="15.0" fill="rgb(218,162,39)" rx="2" ry="2" />
<text  x="218.60" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1637" width="0.1" height="15.0" fill="rgb(209,163,25)" rx="2" ry="2" />
<text  x="161.00" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1845" width="0.6" height="15.0" fill="rgb(235,49,43)" rx="2" ry="2" />
<text  x="218.43" y="1855.5" ></text>
</g>
<g >
<title>up_write (2 samples, 0.01%)</title><rect x="760.1" y="1941" width="0.1" height="15.0" fill="rgb(209,150,1)" rx="2" ry="2" />
<text  x="763.08" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="612.3" y="1845" width="0.1" height="15.0" fill="rgb(217,198,11)" rx="2" ry="2" />
<text  x="615.26" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (385 samples, 1.94%)</title><rect x="56.0" y="1333" width="22.9" height="15.0" fill="rgb(249,49,4)" rx="2" ry="2" />
<text  x="59.03" y="1343.5" >[..</text>
</g>
<g >
<title>ksys_mmap_pgoff (24 samples, 0.12%)</title><rect x="1094.9" y="1989" width="1.4" height="15.0" fill="rgb(252,47,38)" rx="2" ry="2" />
<text  x="1097.92" y="1999.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="143.4" y="1605" width="0.2" height="15.0" fill="rgb(241,92,8)" rx="2" ry="2" />
<text  x="146.45" y="1615.5" ></text>
</g>
<g >
<title>__asan_memset@plt (3 samples, 0.02%)</title><rect x="577.6" y="1893" width="0.2" height="15.0" fill="rgb(205,73,11)" rx="2" ry="2" />
<text  x="580.58" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="154.8" y="1669" width="0.1" height="15.0" fill="rgb(207,70,22)" rx="2" ry="2" />
<text  x="157.79" y="1679.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (10 samples, 0.05%)</title><rect x="329.5" y="1973" width="0.6" height="15.0" fill="rgb(228,196,41)" rx="2" ry="2" />
<text  x="332.51" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="437" width="0.5" height="15.0" fill="rgb(239,178,15)" rx="2" ry="2" />
<text  x="1190.21" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="89.9" y="1941" width="0.2" height="15.0" fill="rgb(219,164,46)" rx="2" ry="2" />
<text  x="92.94" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1797" width="0.4" height="15.0" fill="rgb(233,193,33)" rx="2" ry="2" />
<text  x="160.70" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="870.7" y="2037" width="0.1" height="15.0" fill="rgb(234,191,52)" rx="2" ry="2" />
<text  x="873.67" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (18 samples, 0.09%)</title><rect x="730.0" y="1893" width="1.0" height="15.0" fill="rgb(231,110,27)" rx="2" ry="2" />
<text  x="732.97" y="1903.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (2,003 samples, 10.08%)</title><rect x="374.9" y="1973" width="119.0" height="15.0" fill="rgb(236,200,45)" rx="2" ry="2" />
<text  x="377.95" y="1983.5" >TFastTextEmbed..</text>
</g>
<g >
<title>__pthread_getspecific (8 samples, 0.04%)</title><rect x="211.0" y="1669" width="0.5" height="15.0" fill="rgb(244,203,22)" rx="2" ry="2" />
<text  x="214.03" y="1679.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="205.4" y="1637" width="0.3" height="15.0" fill="rgb(254,52,13)" rx="2" ry="2" />
<text  x="208.45" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (13 samples, 0.07%)</title><rect x="157.5" y="1957" width="0.7" height="15.0" fill="rgb(254,125,42)" rx="2" ry="2" />
<text  x="160.46" y="1967.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.01%)</title><rect x="1095.6" y="1845" width="0.1" height="15.0" fill="rgb(223,93,27)" rx="2" ry="2" />
<text  x="1098.57" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.06%)</title><rect x="157.5" y="1925" width="0.6" height="15.0" fill="rgb(237,49,38)" rx="2" ry="2" />
<text  x="160.46" y="1935.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (8 samples, 0.04%)</title><rect x="29.3" y="1877" width="0.5" height="15.0" fill="rgb(222,103,54)" rx="2" ry="2" />
<text  x="32.30" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (414 samples, 2.08%)</title><rect x="131.9" y="1829" width="24.6" height="15.0" fill="rgb(253,21,34)" rx="2" ry="2" />
<text  x="134.93" y="1839.5" >s..</text>
</g>
<g >
<title>[unknown] (342 samples, 1.72%)</title><rect x="56.0" y="1141" width="20.3" height="15.0" fill="rgb(253,210,1)" rx="2" ry="2" />
<text  x="59.03" y="1151.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (30 samples, 0.15%)</title><rect x="937.9" y="1909" width="1.8" height="15.0" fill="rgb(247,169,20)" rx="2" ry="2" />
<text  x="940.89" y="1919.5" ></text>
</g>
<g >
<title>__interceptor_strlen (30 samples, 0.15%)</title><rect x="1169.9" y="2037" width="1.8" height="15.0" fill="rgb(251,226,35)" rx="2" ry="2" />
<text  x="1172.93" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="215.8" y="1157" width="0.2" height="15.0" fill="rgb(224,80,19)" rx="2" ry="2" />
<text  x="218.84" y="1167.5" ></text>
</g>
<g >
<title>__asan_memcpy (6 samples, 0.03%)</title><rect x="574.8" y="1877" width="0.3" height="15.0" fill="rgb(234,64,29)" rx="2" ry="2" />
<text  x="577.79" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (428 samples, 2.15%)</title><rect x="158.7" y="1829" width="25.4" height="15.0" fill="rgb(251,73,25)" rx="2" ry="2" />
<text  x="161.71" y="1839.5" >s..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::push_back (5 samples, 0.03%)</title><rect x="867.2" y="2037" width="0.3" height="15.0" fill="rgb(240,164,22)" rx="2" ry="2" />
<text  x="870.22" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1269" width="0.1" height="15.0" fill="rgb(226,121,13)" rx="2" ry="2" />
<text  x="188.26" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="501" width="0.2" height="15.0" fill="rgb(238,104,11)" rx="2" ry="2" />
<text  x="1189.85" y="511.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="85.4" y="1589" width="0.1" height="15.0" fill="rgb(210,177,17)" rx="2" ry="2" />
<text  x="88.36" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="1120.6" y="2037" width="0.2" height="15.0" fill="rgb(237,223,49)" rx="2" ry="2" />
<text  x="1123.63" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="28.5" y="2037" width="0.1" height="15.0" fill="rgb(241,204,52)" rx="2" ry="2" />
<text  x="31.47" y="2047.5" ></text>
</g>
<g >
<title>RunFasttextClf (2 samples, 0.01%)</title><rect x="43.0" y="2037" width="0.1" height="15.0" fill="rgb(252,97,13)" rx="2" ry="2" />
<text  x="46.02" y="2047.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="1097.7" y="1941" width="0.1" height="15.0" fill="rgb(242,110,42)" rx="2" ry="2" />
<text  x="1100.71" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1701" width="0.2" height="15.0" fill="rgb(253,86,12)" rx="2" ry="2" />
<text  x="160.76" y="1711.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.02%)</title><rect x="1097.7" y="2005" width="0.2" height="15.0" fill="rgb(244,90,23)" rx="2" ry="2" />
<text  x="1100.71" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::handle_value&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.02%)</title><rect x="122.7" y="1941" width="0.2" height="15.0" fill="rgb(237,27,17)" rx="2" ry="2" />
<text  x="125.72" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (85 samples, 0.43%)</title><rect x="191.5" y="1637" width="5.0" height="15.0" fill="rgb(205,155,27)" rx="2" ry="2" />
<text  x="194.49" y="1647.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (7 samples, 0.04%)</title><rect x="729.0" y="1893" width="0.4" height="15.0" fill="rgb(210,148,49)" rx="2" ry="2" />
<text  x="731.96" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="167.4" y="1573" width="0.1" height="15.0" fill="rgb(247,134,3)" rx="2" ry="2" />
<text  x="170.38" y="1583.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="201.4" y="1605" width="0.4" height="15.0" fill="rgb(249,214,35)" rx="2" ry="2" />
<text  x="204.35" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1573" width="0.2" height="15.0" fill="rgb(247,17,21)" rx="2" ry="2" />
<text  x="160.76" y="1583.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="604.3" y="1861" width="0.1" height="15.0" fill="rgb(253,202,22)" rx="2" ry="2" />
<text  x="607.31" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (87 samples, 0.44%)</title><rect x="202.2" y="1733" width="5.2" height="15.0" fill="rgb(243,200,39)" rx="2" ry="2" />
<text  x="205.24" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="132.0" y="1637" width="0.2" height="15.0" fill="rgb(229,3,26)" rx="2" ry="2" />
<text  x="135.04" y="1647.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="138.9" y="1589" width="0.2" height="15.0" fill="rgb(230,42,16)" rx="2" ry="2" />
<text  x="141.87" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1093" width="0.3" height="15.0" fill="rgb(228,201,23)" rx="2" ry="2" />
<text  x="1189.79" y="1103.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (20 samples, 0.10%)</title><rect x="506.7" y="1861" width="1.2" height="15.0" fill="rgb(253,60,49)" rx="2" ry="2" />
<text  x="509.73" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="215.1" y="1797" width="0.1" height="15.0" fill="rgb(213,104,26)" rx="2" ry="2" />
<text  x="218.07" y="1807.5" ></text>
</g>
<g >
<title>unmap_single_vma (7 samples, 0.04%)</title><rect x="1097.1" y="1925" width="0.4" height="15.0" fill="rgb(227,92,46)" rx="2" ry="2" />
<text  x="1100.06" y="1935.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (2 samples, 0.01%)</title><rect x="870.9" y="2037" width="0.1" height="15.0" fill="rgb(206,120,4)" rx="2" ry="2" />
<text  x="873.90" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1109" width="0.3" height="15.0" fill="rgb(236,110,22)" rx="2" ry="2" />
<text  x="1189.79" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="157.8" y="1381" width="0.2" height="15.0" fill="rgb(232,9,16)" rx="2" ry="2" />
<text  x="160.82" y="1391.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (3 samples, 0.02%)</title><rect x="330.3" y="1989" width="0.2" height="15.0" fill="rgb(254,102,21)" rx="2" ry="2" />
<text  x="333.34" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (570 samples, 2.87%)</title><rect x="56.0" y="1973" width="33.8" height="15.0" fill="rgb(242,2,15)" rx="2" ry="2" />
<text  x="58.97" y="1983.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1061" width="0.3" height="15.0" fill="rgb(249,10,18)" rx="2" ry="2" />
<text  x="1189.79" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="157.6" y="1877" width="0.5" height="15.0" fill="rgb(249,4,12)" rx="2" ry="2" />
<text  x="160.64" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1429" width="0.1" height="15.0" fill="rgb(211,66,4)" rx="2" ry="2" />
<text  x="161.00" y="1439.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (3,771 samples, 18.98%)</title><rect x="524.3" y="2021" width="224.0" height="15.0" fill="rgb(217,143,21)" rx="2" ry="2" />
<text  x="527.31" y="2031.5" >std::__future_base::_State_ba..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="144.3" y="1605" width="0.2" height="15.0" fill="rgb(249,171,46)" rx="2" ry="2" />
<text  x="147.34" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 0.30%)</title><rect x="799.3" y="2021" width="3.5" height="15.0" fill="rgb(231,13,52)" rx="2" ry="2" />
<text  x="802.28" y="2031.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="615.7" y="1845" width="0.2" height="15.0" fill="rgb(253,167,1)" rx="2" ry="2" />
<text  x="618.71" y="1855.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (4 samples, 0.02%)</title><rect x="518.9" y="2037" width="0.2" height="15.0" fill="rgb(250,0,46)" rx="2" ry="2" />
<text  x="521.90" y="2047.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (46 samples, 0.23%)</title><rect x="963.9" y="2053" width="2.7" height="15.0" fill="rgb(253,89,7)" rx="2" ry="2" />
<text  x="966.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1973" width="0.5" height="15.0" fill="rgb(237,41,10)" rx="2" ry="2" />
<text  x="1189.61" y="1983.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="196.0" y="1605" width="0.1" height="15.0" fill="rgb(238,213,10)" rx="2" ry="2" />
<text  x="199.01" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.03%)</title><rect x="168.7" y="1573" width="0.3" height="15.0" fill="rgb(222,17,45)" rx="2" ry="2" />
<text  x="171.69" y="1583.5" ></text>
</g>
<g >
<title>ksys_read (4 samples, 0.02%)</title><rect x="1107.1" y="1973" width="0.2" height="15.0" fill="rgb(252,227,26)" rx="2" ry="2" />
<text  x="1110.09" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1733" width="0.6" height="15.0" fill="rgb(243,216,43)" rx="2" ry="2" />
<text  x="1190.15" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1541" width="0.4" height="15.0" fill="rgb(230,42,5)" rx="2" ry="2" />
<text  x="1189.73" y="1551.5" ></text>
</g>
<g >
<title>handle_mm_fault (7 samples, 0.04%)</title><rect x="724.3" y="1829" width="0.4" height="15.0" fill="rgb(227,192,38)" rx="2" ry="2" />
<text  x="727.27" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1621" width="0.2" height="15.0" fill="rgb(238,187,39)" rx="2" ry="2" />
<text  x="188.44" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="789" width="0.5" height="15.0" fill="rgb(223,5,6)" rx="2" ry="2" />
<text  x="1190.21" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1445" width="0.6" height="15.0" fill="rgb(254,139,27)" rx="2" ry="2" />
<text  x="1190.15" y="1455.5" ></text>
</g>
<g >
<title>handle_mm_fault (42 samples, 0.21%)</title><rect x="25.0" y="1989" width="2.5" height="15.0" fill="rgb(213,140,36)" rx="2" ry="2" />
<text  x="28.03" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1186.9" y="69" width="0.2" height="15.0" fill="rgb(240,170,19)" rx="2" ry="2" />
<text  x="1189.91" y="79.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="213.1" y="1701" width="0.1" height="15.0" fill="rgb(254,70,21)" rx="2" ry="2" />
<text  x="216.05" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="613" width="0.5" height="15.0" fill="rgb(206,157,45)" rx="2" ry="2" />
<text  x="1190.21" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (99 samples, 0.50%)</title><rect x="207.6" y="1797" width="5.9" height="15.0" fill="rgb(245,29,44)" rx="2" ry="2" />
<text  x="210.65" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1317" width="0.3" height="15.0" fill="rgb(221,60,11)" rx="2" ry="2" />
<text  x="1189.79" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (503 samples, 2.53%)</title><rect x="56.0" y="1701" width="29.8" height="15.0" fill="rgb(215,198,9)" rx="2" ry="2" />
<text  x="58.97" y="1711.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1413" width="0.4" height="15.0" fill="rgb(206,157,11)" rx="2" ry="2" />
<text  x="1189.20" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.02%)</title><rect x="185.6" y="1957" width="0.2" height="15.0" fill="rgb(232,182,33)" rx="2" ry="2" />
<text  x="188.55" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (10 samples, 0.05%)</title><rect x="156.8" y="1893" width="0.5" height="15.0" fill="rgb(223,88,33)" rx="2" ry="2" />
<text  x="159.75" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.1" y="1973" width="0.5" height="15.0" fill="rgb(233,126,43)" rx="2" ry="2" />
<text  x="1189.08" y="1983.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.04%)</title><rect x="168.3" y="1573" width="0.4" height="15.0" fill="rgb(234,6,31)" rx="2" ry="2" />
<text  x="171.27" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="214.7" y="1797" width="0.1" height="15.0" fill="rgb(240,181,34)" rx="2" ry="2" />
<text  x="217.71" y="1807.5" ></text>
</g>
<g >
<title>TNewsCluster::GetFreshestTimestamp (3 samples, 0.02%)</title><rect x="330.2" y="1989" width="0.1" height="15.0" fill="rgb(243,11,37)" rx="2" ry="2" />
<text  x="333.17" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="869" width="0.5" height="15.0" fill="rgb(244,24,13)" rx="2" ry="2" />
<text  x="1190.21" y="879.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (5 samples, 0.03%)</title><rect x="578.8" y="1893" width="0.3" height="15.0" fill="rgb(207,74,2)" rx="2" ry="2" />
<text  x="581.83" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (82 samples, 0.41%)</title><rect x="146.5" y="1765" width="4.9" height="15.0" fill="rgb(207,90,19)" rx="2" ry="2" />
<text  x="149.54" y="1775.5" ></text>
</g>
<g >
<title>__pthread_getspecific (31 samples, 0.16%)</title><rect x="1171.7" y="2037" width="1.8" height="15.0" fill="rgb(234,111,33)" rx="2" ry="2" />
<text  x="1174.71" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (137 samples, 0.69%)</title><rect x="122.7" y="1957" width="8.1" height="15.0" fill="rgb(252,183,44)" rx="2" ry="2" />
<text  x="125.66" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (9 samples, 0.05%)</title><rect x="156.8" y="1861" width="0.5" height="15.0" fill="rgb(218,41,30)" rx="2" ry="2" />
<text  x="159.75" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (88 samples, 0.44%)</title><rect x="196.8" y="1685" width="5.3" height="15.0" fill="rgb(242,10,4)" rx="2" ry="2" />
<text  x="199.84" y="1695.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="680.0" y="1765" width="0.1" height="15.0" fill="rgb(240,65,53)" rx="2" ry="2" />
<text  x="683.03" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::detail::external_constructor&lt; (2 samples, 0.01%)</title><rect x="122.8" y="1909" width="0.1" height="15.0" fill="rgb(241,63,20)" rx="2" ry="2" />
<text  x="125.78" y="1919.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="210.4" y="1669" width="0.1" height="15.0" fill="rgb(240,51,22)" rx="2" ry="2" />
<text  x="213.38" y="1679.5" ></text>
</g>
<g >
<title>clear_page_erms (7 samples, 0.04%)</title><rect x="936.2" y="1893" width="0.4" height="15.0" fill="rgb(213,36,38)" rx="2" ry="2" />
<text  x="939.17" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1877" width="0.5" height="15.0" fill="rgb(216,180,47)" rx="2" ry="2" />
<text  x="1189.61" y="1887.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="760.3" y="1925" width="0.1" height="15.0" fill="rgb(219,99,15)" rx="2" ry="2" />
<text  x="763.26" y="1935.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (1,621 samples, 8.16%)</title><rect x="632.4" y="1893" width="96.3" height="15.0" fill="rgb(238,84,31)" rx="2" ry="2" />
<text  x="635.40" y="1903.5" >onmt::Token..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="549" width="0.4" height="15.0" fill="rgb(243,198,22)" rx="2" ry="2" />
<text  x="1189.20" y="559.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="89.3" y="1813" width="0.1" height="15.0" fill="rgb(254,228,46)" rx="2" ry="2" />
<text  x="92.28" y="1823.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.02%)</title><rect x="1189.5" y="1973" width="0.2" height="15.0" fill="rgb(234,226,30)" rx="2" ry="2" />
<text  x="1192.52" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (528 samples, 2.66%)</title><rect x="56.0" y="1797" width="31.3" height="15.0" fill="rgb(249,130,39)" rx="2" ry="2" />
<text  x="58.97" y="1807.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="757" width="0.4" height="15.0" fill="rgb(254,70,44)" rx="2" ry="2" />
<text  x="1189.20" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (93 samples, 0.47%)</title><rect x="174.1" y="1685" width="5.5" height="15.0" fill="rgb(221,18,30)" rx="2" ry="2" />
<text  x="177.09" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1109" width="0.4" height="15.0" fill="rgb(231,201,48)" rx="2" ry="2" />
<text  x="1189.20" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1477" width="0.3" height="15.0" fill="rgb(246,18,26)" rx="2" ry="2" />
<text  x="1189.79" y="1487.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.02%)</title><rect x="676.7" y="1765" width="0.2" height="15.0" fill="rgb(224,179,42)" rx="2" ry="2" />
<text  x="679.70" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (2 samples, 0.01%)</title><rect x="516.5" y="1909" width="0.1" height="15.0" fill="rgb(239,139,41)" rx="2" ry="2" />
<text  x="519.53" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1861" width="0.6" height="15.0" fill="rgb(231,82,10)" rx="2" ry="2" />
<text  x="1190.15" y="1871.5" ></text>
</g>
<g >
<title>fasttext::FastText::predictLine (484 samples, 2.44%)</title><rect x="538.9" y="1941" width="28.7" height="15.0" fill="rgb(247,12,14)" rx="2" ry="2" />
<text  x="541.86" y="1951.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (88 samples, 0.44%)</title><rect x="191.4" y="1701" width="5.3" height="15.0" fill="rgb(231,32,30)" rx="2" ry="2" />
<text  x="194.43" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="421" width="0.4" height="15.0" fill="rgb(253,46,40)" rx="2" ry="2" />
<text  x="1189.20" y="431.5" ></text>
</g>
<g >
<title>TDocument::PreprocessTextFields (3,024 samples, 15.22%)</title><rect x="567.7" y="1973" width="179.6" height="15.0" fill="rgb(227,172,53)" rx="2" ry="2" />
<text  x="570.72" y="1983.5" >TDocument::PreprocessTe..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (111 samples, 0.56%)</title><rect x="974.9" y="2053" width="6.6" height="15.0" fill="rgb(242,64,28)" rx="2" ry="2" />
<text  x="977.89" y="2063.5" ></text>
</g>
<g >
<title>__interceptor_strlen (67 samples, 0.34%)</title><rect x="741.8" y="1877" width="4.0" height="15.0" fill="rgb(207,164,16)" rx="2" ry="2" />
<text  x="744.79" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (4 samples, 0.02%)</title><rect x="213.6" y="1829" width="0.2" height="15.0" fill="rgb(239,55,34)" rx="2" ry="2" />
<text  x="216.59" y="1839.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (45 samples, 0.23%)</title><rect x="508.7" y="1973" width="2.7" height="15.0" fill="rgb(240,106,4)" rx="2" ry="2" />
<text  x="511.69" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1413" width="0.2" height="15.0" fill="rgb(246,216,13)" rx="2" ry="2" />
<text  x="188.44" y="1423.5" ></text>
</g>
<g >
<title>__do_munmap (5 samples, 0.03%)</title><rect x="759.1" y="1909" width="0.3" height="15.0" fill="rgb(232,52,18)" rx="2" ry="2" />
<text  x="762.13" y="1919.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="173.3" y="1589" width="0.1" height="15.0" fill="rgb(251,223,27)" rx="2" ry="2" />
<text  x="176.32" y="1599.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="515.3" y="1909" width="0.2" height="15.0" fill="rgb(220,135,15)" rx="2" ry="2" />
<text  x="518.34" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.7" y="1733" width="0.4" height="15.0" fill="rgb(210,48,4)" rx="2" ry="2" />
<text  x="1189.67" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1461" width="0.3" height="15.0" fill="rgb(237,206,36)" rx="2" ry="2" />
<text  x="1189.79" y="1471.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (9 samples, 0.05%)</title><rect x="690.5" y="1749" width="0.6" height="15.0" fill="rgb(225,17,5)" rx="2" ry="2" />
<text  x="693.54" y="1759.5" ></text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.03%)</title><rect x="1017.9" y="1989" width="0.3" height="15.0" fill="rgb(236,9,39)" rx="2" ry="2" />
<text  x="1020.89" y="1999.5" ></text>
</g>
<g >
<title>__asan_memcpy (6 samples, 0.03%)</title><rect x="149.1" y="1637" width="0.3" height="15.0" fill="rgb(215,108,32)" rx="2" ry="2" />
<text  x="152.09" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="156.5" y="1829" width="0.2" height="15.0" fill="rgb(252,42,24)" rx="2" ry="2" />
<text  x="159.51" y="1839.5" ></text>
</g>
<g >
<title>run_rebalance_domains (2 samples, 0.01%)</title><rect x="680.0" y="1797" width="0.1" height="15.0" fill="rgb(237,108,41)" rx="2" ry="2" />
<text  x="683.03" y="1807.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (4 samples, 0.02%)</title><rect x="1120.8" y="2037" width="0.2" height="15.0" fill="rgb(252,218,20)" rx="2" ry="2" />
<text  x="1123.81" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.05%)</title><rect x="724.1" y="1861" width="0.6" height="15.0" fill="rgb(225,71,44)" rx="2" ry="2" />
<text  x="727.09" y="1871.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char const  (4 samples, 0.02%)</title><rect x="516.1" y="1989" width="0.3" height="15.0" fill="rgb(221,65,40)" rx="2" ry="2" />
<text  x="519.11" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1141" width="0.4" height="15.0" fill="rgb(251,69,16)" rx="2" ry="2" />
<text  x="1189.20" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (63 samples, 0.32%)</title><rect x="187.2" y="1589" width="3.8" height="15.0" fill="rgb(241,61,18)" rx="2" ry="2" />
<text  x="190.22" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (429 samples, 2.16%)</title><rect x="56.0" y="1461" width="25.5" height="15.0" fill="rgb(251,22,24)" rx="2" ry="2" />
<text  x="59.03" y="1471.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1605" width="0.5" height="15.0" fill="rgb(229,8,13)" rx="2" ry="2" />
<text  x="1189.14" y="1615.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.03%)</title><rect x="54.6" y="1909" width="0.4" height="15.0" fill="rgb(211,12,32)" rx="2" ry="2" />
<text  x="57.60" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (8 samples, 0.04%)</title><rect x="594.6" y="1877" width="0.4" height="15.0" fill="rgb(253,23,45)" rx="2" ry="2" />
<text  x="597.57" y="1887.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (25 samples, 0.13%)</title><rect x="938.2" y="1893" width="1.5" height="15.0" fill="rgb(232,204,4)" rx="2" ry="2" />
<text  x="941.19" y="1903.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (23 samples, 0.12%)</title><rect x="115.4" y="2037" width="1.4" height="15.0" fill="rgb(243,53,51)" rx="2" ry="2" />
<text  x="118.42" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="870.7" y="2005" width="0.1" height="15.0" fill="rgb(240,112,14)" rx="2" ry="2" />
<text  x="873.67" y="2015.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.04%)</title><rect x="139.9" y="1589" width="0.5" height="15.0" fill="rgb(231,7,40)" rx="2" ry="2" />
<text  x="142.88" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.38%)</title><rect x="165.1" y="1717" width="4.5" height="15.0" fill="rgb(213,82,34)" rx="2" ry="2" />
<text  x="168.12" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.7" y="1749" width="0.4" height="15.0" fill="rgb(242,76,0)" rx="2" ry="2" />
<text  x="1189.67" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="78.3" y="1301" width="0.2" height="15.0" fill="rgb(214,79,27)" rx="2" ry="2" />
<text  x="81.30" y="1311.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="486.7" y="1925" width="0.2" height="15.0" fill="rgb(238,31,39)" rx="2" ry="2" />
<text  x="489.72" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_strcmp (3 samples, 0.02%)</title><rect x="41.8" y="2021" width="0.2" height="15.0" fill="rgb(228,53,45)" rx="2" ry="2" />
<text  x="44.77" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1349" width="0.6" height="15.0" fill="rgb(230,223,39)" rx="2" ry="2" />
<text  x="1190.15" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1605" width="0.6" height="15.0" fill="rgb(234,177,27)" rx="2" ry="2" />
<text  x="1190.15" y="1615.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.02%)</title><rect x="488.4" y="1909" width="0.2" height="15.0" fill="rgb(232,229,4)" rx="2" ry="2" />
<text  x="491.38" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.03%)</title><rect x="569.0" y="1925" width="0.4" height="15.0" fill="rgb(212,32,23)" rx="2" ry="2" />
<text  x="572.03" y="1935.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (7 samples, 0.04%)</title><rect x="520.7" y="1941" width="0.5" height="15.0" fill="rgb(215,162,29)" rx="2" ry="2" />
<text  x="523.75" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (77 samples, 0.39%)</title><rect x="141.8" y="1717" width="4.6" height="15.0" fill="rgb(250,41,13)" rx="2" ry="2" />
<text  x="144.84" y="1727.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (18 samples, 0.09%)</title><rect x="127.3" y="1909" width="1.1" height="15.0" fill="rgb(231,15,33)" rx="2" ry="2" />
<text  x="130.29" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (354 samples, 1.78%)</title><rect x="186.4" y="1797" width="21.1" height="15.0" fill="rgb(237,190,33)" rx="2" ry="2" />
<text  x="189.44" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="215.1" y="1845" width="0.1" height="15.0" fill="rgb(226,117,36)" rx="2" ry="2" />
<text  x="218.07" y="1855.5" ></text>
</g>
<g >
<title>__handle_mm_fault (22 samples, 0.11%)</title><rect x="54.4" y="1957" width="1.3" height="15.0" fill="rgb(240,18,30)" rx="2" ry="2" />
<text  x="57.36" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1861" width="0.5" height="15.0" fill="rgb(233,114,19)" rx="2" ry="2" />
<text  x="1189.61" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="245" width="0.4" height="15.0" fill="rgb(226,111,26)" rx="2" ry="2" />
<text  x="1189.20" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1989" width="0.3" height="15.0" fill="rgb(208,149,50)" rx="2" ry="2" />
<text  x="520.42" y="1999.5" ></text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream (32 samples, 0.16%)</title><rect x="864.9" y="2037" width="1.9" height="15.0" fill="rgb(210,113,5)" rx="2" ry="2" />
<text  x="867.90" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1125" width="0.4" height="15.0" fill="rgb(208,50,52)" rx="2" ry="2" />
<text  x="1189.20" y="1135.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (3 samples, 0.02%)</title><rect x="518.7" y="2037" width="0.2" height="15.0" fill="rgb(229,108,40)" rx="2" ry="2" />
<text  x="521.73" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6 samples, 0.03%)</title><rect x="1145.0" y="2037" width="0.4" height="15.0" fill="rgb(234,45,43)" rx="2" ry="2" />
<text  x="1148.04" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (23 samples, 0.12%)</title><rect x="496.4" y="1893" width="1.4" height="15.0" fill="rgb(219,157,41)" rx="2" ry="2" />
<text  x="499.40" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1717" width="0.6" height="15.0" fill="rgb(240,82,21)" rx="2" ry="2" />
<text  x="1190.15" y="1727.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (14 samples, 0.07%)</title><rect x="1155.7" y="2037" width="0.8" height="15.0" fill="rgb(230,221,21)" rx="2" ry="2" />
<text  x="1158.67" y="2047.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="89.9" y="1925" width="0.2" height="15.0" fill="rgb(246,79,35)" rx="2" ry="2" />
<text  x="92.94" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="773" width="0.5" height="15.0" fill="rgb(228,97,9)" rx="2" ry="2" />
<text  x="1190.21" y="783.5" ></text>
</g>
<g >
<title>new_sync_read (4 samples, 0.02%)</title><rect x="1107.1" y="1925" width="0.2" height="15.0" fill="rgb(248,28,9)" rx="2" ry="2" />
<text  x="1110.09" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (4 samples, 0.02%)</title><rect x="1004.8" y="2053" width="0.3" height="15.0" fill="rgb(215,195,49)" rx="2" ry="2" />
<text  x="1007.83" y="2063.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (3 samples, 0.02%)</title><rect x="1097.5" y="2053" width="0.2" height="15.0" fill="rgb(238,182,13)" rx="2" ry="2" />
<text  x="1100.47" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="864.5" y="2021" width="0.3" height="15.0" fill="rgb(219,102,8)" rx="2" ry="2" />
<text  x="867.55" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.7" y="1653" width="0.4" height="15.0" fill="rgb(252,198,15)" rx="2" ry="2" />
<text  x="1189.73" y="1663.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="745.9" y="1893" width="0.2" height="15.0" fill="rgb(246,213,3)" rx="2" ry="2" />
<text  x="748.95" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="215.6" y="1253" width="0.4" height="15.0" fill="rgb(216,54,28)" rx="2" ry="2" />
<text  x="218.60" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1573" width="0.6" height="15.0" fill="rgb(205,97,8)" rx="2" ry="2" />
<text  x="1190.15" y="1583.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (3 samples, 0.02%)</title><rect x="747.8" y="1973" width="0.2" height="15.0" fill="rgb(226,27,20)" rx="2" ry="2" />
<text  x="750.85" y="1983.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (10 samples, 0.05%)</title><rect x="520.7" y="1989" width="0.6" height="15.0" fill="rgb(224,67,31)" rx="2" ry="2" />
<text  x="523.69" y="1999.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="326.1" y="1941" width="0.1" height="15.0" fill="rgb(228,59,47)" rx="2" ry="2" />
<text  x="329.13" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (10 samples, 0.05%)</title><rect x="184.4" y="1845" width="0.6" height="15.0" fill="rgb(207,196,17)" rx="2" ry="2" />
<text  x="187.37" y="1855.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.02%)</title><rect x="1097.7" y="1989" width="0.2" height="15.0" fill="rgb(234,213,2)" rx="2" ry="2" />
<text  x="1100.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1221" width="0.6" height="15.0" fill="rgb(232,182,4)" rx="2" ry="2" />
<text  x="1190.15" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (71 samples, 0.36%)</title><rect x="187.0" y="1605" width="4.2" height="15.0" fill="rgb(231,154,13)" rx="2" ry="2" />
<text  x="189.98" y="1615.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="329.6" y="1957" width="0.2" height="15.0" fill="rgb(212,164,9)" rx="2" ry="2" />
<text  x="332.63" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1973" width="0.6" height="15.0" fill="rgb(228,210,30)" rx="2" ry="2" />
<text  x="1190.15" y="1983.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (12 samples, 0.06%)</title><rect x="617.2" y="1877" width="0.7" height="15.0" fill="rgb(223,24,1)" rx="2" ry="2" />
<text  x="620.19" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="869" width="0.4" height="15.0" fill="rgb(223,181,32)" rx="2" ry="2" />
<text  x="1189.20" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1301" width="0.6" height="15.0" fill="rgb(253,70,6)" rx="2" ry="2" />
<text  x="1190.15" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (554 samples, 2.79%)</title><rect x="56.0" y="1877" width="32.9" height="15.0" fill="rgb(205,62,15)" rx="2" ry="2" />
<text  x="58.97" y="1887.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1877" width="0.4" height="15.0" fill="rgb(217,156,21)" rx="2" ry="2" />
<text  x="188.20" y="1887.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="326.3" y="1957" width="0.1" height="15.0" fill="rgb(240,139,1)" rx="2" ry="2" />
<text  x="329.31" y="1967.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (2 samples, 0.01%)</title><rect x="508.0" y="1845" width="0.1" height="15.0" fill="rgb(247,130,33)" rx="2" ry="2" />
<text  x="510.98" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (7 samples, 0.04%)</title><rect x="1177.4" y="2037" width="0.4" height="15.0" fill="rgb(242,122,28)" rx="2" ry="2" />
<text  x="1180.41" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1813" width="0.5" height="15.0" fill="rgb(205,227,23)" rx="2" ry="2" />
<text  x="1189.61" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="453" width="0.4" height="15.0" fill="rgb(223,148,37)" rx="2" ry="2" />
<text  x="1189.20" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (15 samples, 0.08%)</title><rect x="214.3" y="1893" width="0.9" height="15.0" fill="rgb(239,59,42)" rx="2" ry="2" />
<text  x="217.30" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="949" width="0.4" height="15.0" fill="rgb(205,41,3)" rx="2" ry="2" />
<text  x="1189.20" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1653" width="0.1" height="15.0" fill="rgb(219,142,4)" rx="2" ry="2" />
<text  x="188.26" y="1663.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (134 samples, 0.67%)</title><rect x="497.8" y="1941" width="7.9" height="15.0" fill="rgb(250,156,43)" rx="2" ry="2" />
<text  x="500.76" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1269" width="0.4" height="15.0" fill="rgb(250,170,19)" rx="2" ry="2" />
<text  x="1189.20" y="1279.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="603.8" y="1861" width="0.1" height="15.0" fill="rgb(226,75,48)" rx="2" ry="2" />
<text  x="606.83" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="79.0" y="1333" width="0.1" height="15.0" fill="rgb(218,145,46)" rx="2" ry="2" />
<text  x="81.95" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="565" width="0.2" height="15.0" fill="rgb(205,74,32)" rx="2" ry="2" />
<text  x="1189.85" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1669" width="0.2" height="15.0" fill="rgb(238,188,30)" rx="2" ry="2" />
<text  x="160.76" y="1679.5" ></text>
</g>
<g >
<title>release_pages (5 samples, 0.03%)</title><rect x="1097.2" y="1861" width="0.3" height="15.0" fill="rgb(221,83,15)" rx="2" ry="2" />
<text  x="1100.17" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="139.5" y="1589" width="0.1" height="15.0" fill="rgb(239,130,47)" rx="2" ry="2" />
<text  x="142.53" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1669" width="0.1" height="15.0" fill="rgb(226,41,2)" rx="2" ry="2" />
<text  x="188.26" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (98 samples, 0.49%)</title><rect x="207.6" y="1733" width="5.9" height="15.0" fill="rgb(254,6,34)" rx="2" ry="2" />
<text  x="210.65" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.7" y="1125" width="0.1" height="15.0" fill="rgb(240,24,4)" rx="2" ry="2" />
<text  x="218.72" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1525" width="0.4" height="15.0" fill="rgb(206,142,23)" rx="2" ry="2" />
<text  x="1189.20" y="1535.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.02%)</title><rect x="652.9" y="1749" width="0.3" height="15.0" fill="rgb(223,75,46)" rx="2" ry="2" />
<text  x="655.95" y="1759.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="54.4" y="1909" width="0.1" height="15.0" fill="rgb(229,171,43)" rx="2" ry="2" />
<text  x="57.36" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (316 samples, 1.59%)</title><rect x="56.0" y="229" width="18.8" height="15.0" fill="rgb(222,126,51)" rx="2" ry="2" />
<text  x="59.03" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1269" width="0.2" height="15.0" fill="rgb(239,60,44)" rx="2" ry="2" />
<text  x="188.44" y="1279.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.02%)</title><rect x="131.3" y="1941" width="0.3" height="15.0" fill="rgb(249,128,23)" rx="2" ry="2" />
<text  x="134.33" y="1951.5" ></text>
</g>
<g >
<title>do_mmap (21 samples, 0.11%)</title><rect x="1094.9" y="1957" width="1.3" height="15.0" fill="rgb(231,49,14)" rx="2" ry="2" />
<text  x="1097.92" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (88 samples, 0.44%)</title><rect x="191.4" y="1717" width="5.3" height="15.0" fill="rgb(209,196,28)" rx="2" ry="2" />
<text  x="194.43" y="1727.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="83.0" y="1413" width="0.1" height="15.0" fill="rgb(222,98,38)" rx="2" ry="2" />
<text  x="85.99" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="214.9" y="1765" width="0.1" height="15.0" fill="rgb(233,129,16)" rx="2" ry="2" />
<text  x="217.89" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="485" width="0.4" height="15.0" fill="rgb(249,82,19)" rx="2" ry="2" />
<text  x="1189.20" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="661" width="0.4" height="15.0" fill="rgb(232,88,1)" rx="2" ry="2" />
<text  x="1189.20" y="671.5" ></text>
</g>
<g >
<title>[unknown] (345 samples, 1.74%)</title><rect x="56.0" y="1157" width="20.5" height="15.0" fill="rgb(227,5,9)" rx="2" ry="2" />
<text  x="59.03" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="277" width="0.2" height="15.0" fill="rgb(252,26,47)" rx="2" ry="2" />
<text  x="1189.85" y="287.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="76.6" y="1061" width="0.1" height="15.0" fill="rgb(225,159,13)" rx="2" ry="2" />
<text  x="79.58" y="1071.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="493.8" y="1941" width="0.1" height="15.0" fill="rgb(254,8,28)" rx="2" ry="2" />
<text  x="496.78" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="1893" width="0.5" height="15.0" fill="rgb(208,8,18)" rx="2" ry="2" />
<text  x="1189.08" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="533" width="0.4" height="15.0" fill="rgb(254,145,36)" rx="2" ry="2" />
<text  x="1189.20" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="933" width="0.2" height="15.0" fill="rgb(238,153,8)" rx="2" ry="2" />
<text  x="1189.85" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.23%)</title><rect x="153.4" y="1685" width="2.7" height="15.0" fill="rgb(248,150,28)" rx="2" ry="2" />
<text  x="156.37" y="1695.5" ></text>
</g>
<g >
<title>clear_page_erms (20 samples, 0.10%)</title><rect x="506.7" y="1845" width="1.2" height="15.0" fill="rgb(213,56,29)" rx="2" ry="2" />
<text  x="509.73" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1237" width="0.2" height="15.0" fill="rgb(229,7,33)" rx="2" ry="2" />
<text  x="188.44" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (460 samples, 2.32%)</title><rect x="56.0" y="1557" width="27.3" height="15.0" fill="rgb(218,199,54)" rx="2" ry="2" />
<text  x="58.97" y="1567.5" >[..</text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="199.2" y="1605" width="0.1" height="15.0" fill="rgb(208,53,11)" rx="2" ry="2" />
<text  x="202.21" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1029" width="0.5" height="15.0" fill="rgb(218,112,1)" rx="2" ry="2" />
<text  x="1190.21" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="949" width="0.5" height="15.0" fill="rgb(232,196,44)" rx="2" ry="2" />
<text  x="1190.21" y="959.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.04%)</title><rect x="211.8" y="1669" width="0.4" height="15.0" fill="rgb(209,217,42)" rx="2" ry="2" />
<text  x="214.80" y="1679.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (62 samples, 0.31%)</title><rect x="733.9" y="1877" width="3.7" height="15.0" fill="rgb(228,203,28)" rx="2" ry="2" />
<text  x="736.89" y="1887.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="179.0" y="1621" width="0.1" height="15.0" fill="rgb(238,84,37)" rx="2" ry="2" />
<text  x="181.96" y="1631.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.02%)</title><rect x="1093.1" y="1973" width="0.3" height="15.0" fill="rgb(220,198,15)" rx="2" ry="2" />
<text  x="1096.14" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (74 samples, 0.37%)</title><rect x="146.8" y="1669" width="4.4" height="15.0" fill="rgb(242,181,36)" rx="2" ry="2" />
<text  x="149.83" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="151.4" y="1717" width="0.2" height="15.0" fill="rgb(252,83,5)" rx="2" ry="2" />
<text  x="154.41" y="1727.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (2 samples, 0.01%)</title><rect x="91.7" y="2021" width="0.1" height="15.0" fill="rgb(234,68,23)" rx="2" ry="2" />
<text  x="94.72" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1381" width="0.4" height="15.0" fill="rgb(207,178,16)" rx="2" ry="2" />
<text  x="1189.20" y="1391.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (4 samples, 0.02%)</title><rect x="517.4" y="1861" width="0.3" height="15.0" fill="rgb(242,58,9)" rx="2" ry="2" />
<text  x="520.42" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1509" width="0.1" height="15.0" fill="rgb(246,13,1)" rx="2" ry="2" />
<text  x="161.00" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="165.1" y="1669" width="0.1" height="15.0" fill="rgb(245,168,48)" rx="2" ry="2" />
<text  x="168.12" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="853" width="0.4" height="15.0" fill="rgb(215,169,9)" rx="2" ry="2" />
<text  x="1189.20" y="863.5" ></text>
</g>
<g >
<title>__interceptor_strlen (2 samples, 0.01%)</title><rect x="569.6" y="1925" width="0.1" height="15.0" fill="rgb(223,192,30)" rx="2" ry="2" />
<text  x="572.56" y="1935.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (8 samples, 0.04%)</title><rect x="996.2" y="2053" width="0.4" height="15.0" fill="rgb(229,189,36)" rx="2" ry="2" />
<text  x="999.15" y="2063.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (359 samples, 1.81%)</title><rect x="595.9" y="1877" width="21.3" height="15.0" fill="rgb(225,87,25)" rx="2" ry="2" />
<text  x="598.87" y="1887.5" >o..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="202.1" y="1701" width="0.1" height="15.0" fill="rgb(221,39,44)" rx="2" ry="2" />
<text  x="205.06" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1749" width="0.6" height="15.0" fill="rgb(213,183,51)" rx="2" ry="2" />
<text  x="1190.15" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="185.4" y="1701" width="0.2" height="15.0" fill="rgb(221,94,25)" rx="2" ry="2" />
<text  x="188.38" y="1711.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (5 samples, 0.03%)</title><rect x="519.8" y="2037" width="0.3" height="15.0" fill="rgb(212,135,28)" rx="2" ry="2" />
<text  x="522.80" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="1045" width="0.5" height="15.0" fill="rgb(207,5,45)" rx="2" ry="2" />
<text  x="1190.21" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1541" width="0.6" height="15.0" fill="rgb(245,8,34)" rx="2" ry="2" />
<text  x="1190.15" y="1551.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (19 samples, 0.10%)</title><rect x="28.7" y="2037" width="1.1" height="15.0" fill="rgb(224,132,38)" rx="2" ry="2" />
<text  x="31.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="215.4" y="1637" width="0.1" height="15.0" fill="rgb(248,153,10)" rx="2" ry="2" />
<text  x="218.43" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1637" width="0.5" height="15.0" fill="rgb(214,24,49)" rx="2" ry="2" />
<text  x="218.55" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1205" width="0.4" height="15.0" fill="rgb(240,163,37)" rx="2" ry="2" />
<text  x="1189.20" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.47%)</title><rect x="174.0" y="1765" width="5.6" height="15.0" fill="rgb(248,26,18)" rx="2" ry="2" />
<text  x="177.03" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (26 samples, 0.13%)</title><rect x="1093.4" y="2053" width="1.5" height="15.0" fill="rgb(212,49,48)" rx="2" ry="2" />
<text  x="1096.37" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (2 samples, 0.01%)</title><rect x="207.8" y="1717" width="0.1" height="15.0" fill="rgb(210,71,3)" rx="2" ry="2" />
<text  x="210.77" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (5 samples, 0.03%)</title><rect x="179.6" y="1781" width="0.3" height="15.0" fill="rgb(237,61,33)" rx="2" ry="2" />
<text  x="182.61" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="773" width="0.1" height="15.0" fill="rgb(230,79,26)" rx="2" ry="2" />
<text  x="160.82" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (183 samples, 0.92%)</title><rect x="158.8" y="1749" width="10.8" height="15.0" fill="rgb(210,69,24)" rx="2" ry="2" />
<text  x="161.77" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="725" width="0.4" height="15.0" fill="rgb(235,134,12)" rx="2" ry="2" />
<text  x="1189.20" y="735.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="575.4" y="1845" width="0.1" height="15.0" fill="rgb(232,139,45)" rx="2" ry="2" />
<text  x="578.38" y="1855.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="134.6" y="1557" width="0.3" height="15.0" fill="rgb(229,5,21)" rx="2" ry="2" />
<text  x="137.60" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (464 samples, 2.34%)</title><rect x="186.4" y="1861" width="27.6" height="15.0" fill="rgb(229,194,42)" rx="2" ry="2" />
<text  x="189.44" y="1871.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="149.7" y="1637" width="0.2" height="15.0" fill="rgb(239,100,22)" rx="2" ry="2" />
<text  x="152.74" y="1647.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="729.7" y="1893" width="0.2" height="15.0" fill="rgb(243,0,39)" rx="2" ry="2" />
<text  x="732.68" y="1903.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.01%)</title><rect x="794.5" y="1941" width="0.1" height="15.0" fill="rgb(206,48,44)" rx="2" ry="2" />
<text  x="797.47" y="1951.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="150.1" y="1637" width="0.4" height="15.0" fill="rgb(221,176,12)" rx="2" ry="2" />
<text  x="153.10" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1413" width="0.3" height="15.0" fill="rgb(235,146,31)" rx="2" ry="2" />
<text  x="1189.79" y="1423.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (9 samples, 0.05%)</title><rect x="811.4" y="2005" width="0.5" height="15.0" fill="rgb(236,103,28)" rx="2" ry="2" />
<text  x="814.40" y="2015.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (6 samples, 0.03%)</title><rect x="937.1" y="1909" width="0.3" height="15.0" fill="rgb(233,195,44)" rx="2" ry="2" />
<text  x="940.06" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="757" width="0.1" height="15.0" fill="rgb(248,161,11)" rx="2" ry="2" />
<text  x="160.82" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="309" width="0.2" height="15.0" fill="rgb(232,65,42)" rx="2" ry="2" />
<text  x="1189.85" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.02%)</title><rect x="207.5" y="1765" width="0.1" height="15.0" fill="rgb(218,61,43)" rx="2" ry="2" />
<text  x="210.47" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (74 samples, 0.37%)</title><rect x="169.6" y="1749" width="4.4" height="15.0" fill="rgb(237,205,19)" rx="2" ry="2" />
<text  x="172.64" y="1759.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (7 samples, 0.04%)</title><rect x="520.7" y="1957" width="0.5" height="15.0" fill="rgb(220,186,17)" rx="2" ry="2" />
<text  x="523.75" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1077" width="0.3" height="15.0" fill="rgb(228,56,30)" rx="2" ry="2" />
<text  x="1189.79" y="1087.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="163.1" y="1541" width="0.1" height="15.0" fill="rgb(209,124,36)" rx="2" ry="2" />
<text  x="166.10" y="1551.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (248 samples, 1.25%)</title><rect x="940.0" y="2053" width="14.8" height="15.0" fill="rgb(206,119,25)" rx="2" ry="2" />
<text  x="943.03" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1477" width="0.1" height="15.0" fill="rgb(247,35,20)" rx="2" ry="2" />
<text  x="188.26" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (417 samples, 2.10%)</title><rect x="131.9" y="1845" width="24.8" height="15.0" fill="rgb(208,147,3)" rx="2" ry="2" />
<text  x="134.93" y="1855.5" >s..</text>
</g>
<g >
<title>free_pages_and_swap_cache (3 samples, 0.02%)</title><rect x="760.4" y="1861" width="0.2" height="15.0" fill="rgb(231,60,40)" rx="2" ry="2" />
<text  x="763.44" y="1871.5" ></text>
</g>
<g >
<title>__interceptor_free (3 samples, 0.02%)</title><rect x="399.5" y="1941" width="0.2" height="15.0" fill="rgb(242,139,21)" rx="2" ry="2" />
<text  x="402.47" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1397" width="0.3" height="15.0" fill="rgb(252,158,52)" rx="2" ry="2" />
<text  x="1189.79" y="1407.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="212.5" y="1669" width="0.4" height="15.0" fill="rgb(218,115,39)" rx="2" ry="2" />
<text  x="215.46" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,261 samples, 6.35%)</title><rect x="1018.5" y="2053" width="74.9" height="15.0" fill="rgb(210,210,5)" rx="2" ry="2" />
<text  x="1021.48" y="2063.5" >__saniti..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="799.1" y="2037" width="0.1" height="15.0" fill="rgb(208,204,49)" rx="2" ry="2" />
<text  x="802.10" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="869" width="0.2" height="15.0" fill="rgb(238,125,17)" rx="2" ry="2" />
<text  x="1189.85" y="879.5" ></text>
</g>
<g >
<title>page_fault (8 samples, 0.04%)</title><rect x="1017.8" y="2037" width="0.5" height="15.0" fill="rgb(228,216,13)" rx="2" ry="2" />
<text  x="1020.83" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="437" width="0.4" height="15.0" fill="rgb(209,142,54)" rx="2" ry="2" />
<text  x="1189.20" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="575.4" y="1861" width="0.1" height="15.0" fill="rgb(226,104,54)" rx="2" ry="2" />
<text  x="578.38" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (23 samples, 0.12%)</title><rect x="1151.6" y="2037" width="1.4" height="15.0" fill="rgb(214,117,8)" rx="2" ry="2" />
<text  x="1154.63" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="421" width="19.0" height="15.0" fill="rgb(222,180,30)" rx="2" ry="2" />
<text  x="59.03" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1525" width="0.1" height="15.0" fill="rgb(254,40,20)" rx="2" ry="2" />
<text  x="161.00" y="1535.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (4 samples, 0.02%)</title><rect x="497.5" y="1829" width="0.3" height="15.0" fill="rgb(247,153,44)" rx="2" ry="2" />
<text  x="500.52" y="1839.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (13 samples, 0.07%)</title><rect x="29.1" y="1989" width="0.7" height="15.0" fill="rgb(247,213,44)" rx="2" ry="2" />
<text  x="32.06" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.03%)</title><rect x="867.2" y="2005" width="0.3" height="15.0" fill="rgb(210,19,4)" rx="2" ry="2" />
<text  x="870.22" y="2015.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="198.9" y="1605" width="0.1" height="15.0" fill="rgb(226,120,5)" rx="2" ry="2" />
<text  x="201.86" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (79 samples, 0.40%)</title><rect x="208.4" y="1701" width="4.7" height="15.0" fill="rgb(250,5,25)" rx="2" ry="2" />
<text  x="211.36" y="1711.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.02%)</title><rect x="131.4" y="1861" width="0.2" height="15.0" fill="rgb(231,2,17)" rx="2" ry="2" />
<text  x="134.39" y="1871.5" ></text>
</g>
<g >
<title>handle_mm_fault (26 samples, 0.13%)</title><rect x="54.1" y="1973" width="1.6" height="15.0" fill="rgb(215,60,44)" rx="2" ry="2" />
<text  x="57.13" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1173" width="0.4" height="15.0" fill="rgb(244,208,32)" rx="2" ry="2" />
<text  x="1189.20" y="1183.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::setConstant (2 samples, 0.01%)</title><rect x="221.6" y="1957" width="0.1" height="15.0" fill="rgb(219,192,33)" rx="2" ry="2" />
<text  x="224.60" y="1967.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="603.7" y="1861" width="0.1" height="15.0" fill="rgb(206,57,31)" rx="2" ry="2" />
<text  x="606.71" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="75.1" y="549" width="0.2" height="15.0" fill="rgb(233,176,42)" rx="2" ry="2" />
<text  x="78.15" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1621" width="0.6" height="15.0" fill="rgb(228,183,21)" rx="2" ry="2" />
<text  x="1190.15" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="1093" width="0.1" height="15.0" fill="rgb(220,66,17)" rx="2" ry="2" />
<text  x="160.82" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="581" width="0.1" height="15.0" fill="rgb(241,117,21)" rx="2" ry="2" />
<text  x="160.82" y="591.5" ></text>
</g>
<g >
<title>[unknown] (314 samples, 1.58%)</title><rect x="56.0" y="133" width="18.7" height="15.0" fill="rgb(253,31,36)" rx="2" ry="2" />
<text  x="59.03" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1333" width="0.5" height="15.0" fill="rgb(218,156,40)" rx="2" ry="2" />
<text  x="218.55" y="1343.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="87.0" y="1781" width="0.2" height="15.0" fill="rgb(224,204,54)" rx="2" ry="2" />
<text  x="89.97" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1493" width="0.4" height="15.0" fill="rgb(234,98,30)" rx="2" ry="2" />
<text  x="1189.20" y="1503.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (6 samples, 0.03%)</title><rect x="1095.3" y="1893" width="0.4" height="15.0" fill="rgb(243,162,47)" rx="2" ry="2" />
<text  x="1098.33" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (6 samples, 0.03%)</title><rect x="760.3" y="2037" width="0.3" height="15.0" fill="rgb(236,184,36)" rx="2" ry="2" />
<text  x="763.26" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (88 samples, 0.44%)</title><rect x="191.4" y="1669" width="5.3" height="15.0" fill="rgb(213,157,39)" rx="2" ry="2" />
<text  x="194.43" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (60 samples, 0.30%)</title><rect x="799.3" y="2005" width="3.5" height="15.0" fill="rgb(251,19,28)" rx="2" ry="2" />
<text  x="802.28" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="157.8" y="1365" width="0.2" height="15.0" fill="rgb(252,79,34)" rx="2" ry="2" />
<text  x="160.82" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="501" width="0.4" height="15.0" fill="rgb(242,91,33)" rx="2" ry="2" />
<text  x="1189.20" y="511.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (41 samples, 0.21%)</title><rect x="1148.4" y="2037" width="2.5" height="15.0" fill="rgb(218,162,39)" rx="2" ry="2" />
<text  x="1151.43" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (82 samples, 0.41%)</title><rect x="202.4" y="1685" width="4.8" height="15.0" fill="rgb(254,183,41)" rx="2" ry="2" />
<text  x="205.36" y="1695.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="517.9" y="2005" width="0.2" height="15.0" fill="rgb(235,38,12)" rx="2" ry="2" />
<text  x="520.89" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (248 samples, 1.25%)</title><rect x="56.0" y="37" width="14.8" height="15.0" fill="rgb(221,55,4)" rx="2" ry="2" />
<text  x="59.03" y="47.5" ></text>
</g>
<g >
<title>[unknown] (522 samples, 2.63%)</title><rect x="56.0" y="1781" width="31.0" height="15.0" fill="rgb(253,196,28)" rx="2" ry="2" />
<text  x="58.97" y="1791.5" >[u..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1877" width="0.3" height="15.0" fill="rgb(250,95,18)" rx="2" ry="2" />
<text  x="520.42" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="215.4" y="1685" width="0.1" height="15.0" fill="rgb(207,32,18)" rx="2" ry="2" />
<text  x="218.43" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (79 samples, 0.40%)</title><rect x="141.8" y="1765" width="4.7" height="15.0" fill="rgb(232,15,30)" rx="2" ry="2" />
<text  x="144.84" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1045" width="0.3" height="15.0" fill="rgb(251,35,8)" rx="2" ry="2" />
<text  x="1189.79" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (71 samples, 0.36%)</title><rect x="187.0" y="1685" width="4.2" height="15.0" fill="rgb(228,56,48)" rx="2" ry="2" />
<text  x="189.98" y="1695.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="515.3" y="1941" width="0.2" height="15.0" fill="rgb(222,182,4)" rx="2" ry="2" />
<text  x="518.34" y="1951.5" ></text>
</g>
<g >
<title>__vma_adjust (5 samples, 0.03%)</title><rect x="759.6" y="1893" width="0.3" height="15.0" fill="rgb(253,64,29)" rx="2" ry="2" />
<text  x="762.61" y="1903.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.01%)</title><rect x="794.5" y="2021" width="0.1" height="15.0" fill="rgb(232,132,29)" rx="2" ry="2" />
<text  x="797.47" y="2031.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="82.1" y="1461" width="0.1" height="15.0" fill="rgb(247,11,24)" rx="2" ry="2" />
<text  x="85.10" y="1471.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.01%)</title><rect x="794.5" y="1957" width="0.1" height="15.0" fill="rgb(215,223,43)" rx="2" ry="2" />
<text  x="797.47" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (73 samples, 0.37%)</title><rect x="165.2" y="1637" width="4.4" height="15.0" fill="rgb(228,29,23)" rx="2" ry="2" />
<text  x="168.24" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="867.2" y="2021" width="0.3" height="15.0" fill="rgb(219,56,42)" rx="2" ry="2" />
<text  x="870.22" y="2031.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (4 samples, 0.02%)</title><rect x="1107.1" y="2053" width="0.2" height="15.0" fill="rgb(243,102,12)" rx="2" ry="2" />
<text  x="1110.09" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="89.8" y="1973" width="0.1" height="15.0" fill="rgb(249,110,29)" rx="2" ry="2" />
<text  x="92.82" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (330 samples, 1.66%)</title><rect x="56.0" y="997" width="19.6" height="15.0" fill="rgb(247,217,33)" rx="2" ry="2" />
<text  x="59.03" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1861" width="0.4" height="15.0" fill="rgb(224,46,22)" rx="2" ry="2" />
<text  x="188.20" y="1871.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.02%)</title><rect x="653.2" y="1781" width="0.2" height="15.0" fill="rgb(216,14,33)" rx="2" ry="2" />
<text  x="656.24" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (10 samples, 0.05%)</title><rect x="1189.1" y="2037" width="0.6" height="15.0" fill="rgb(221,117,38)" rx="2" ry="2" />
<text  x="1192.11" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="148.8" y="1637" width="0.2" height="15.0" fill="rgb(216,79,33)" rx="2" ry="2" />
<text  x="151.79" y="1647.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (7 samples, 0.04%)</title><rect x="42.4" y="2037" width="0.4" height="15.0" fill="rgb(215,4,40)" rx="2" ry="2" />
<text  x="45.43" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10 samples, 0.05%)</title><rect x="810.8" y="1973" width="0.6" height="15.0" fill="rgb(238,75,29)" rx="2" ry="2" />
<text  x="813.80" y="1983.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (2 samples, 0.01%)</title><rect x="579.2" y="1893" width="0.1" height="15.0" fill="rgb(236,57,17)" rx="2" ry="2" />
<text  x="582.18" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (417 samples, 2.10%)</title><rect x="131.9" y="1877" width="24.8" height="15.0" fill="rgb(234,117,35)" rx="2" ry="2" />
<text  x="134.93" y="1887.5" >s..</text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (15 samples, 0.08%)</title><rect x="129.4" y="1909" width="0.9" height="15.0" fill="rgb(207,229,1)" rx="2" ry="2" />
<text  x="132.43" y="1919.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.01%)</title><rect x="168.0" y="1573" width="0.1" height="15.0" fill="rgb(221,94,21)" rx="2" ry="2" />
<text  x="170.97" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1925" width="0.6" height="15.0" fill="rgb(216,79,39)" rx="2" ry="2" />
<text  x="218.43" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1493" width="0.3" height="15.0" fill="rgb(243,151,29)" rx="2" ry="2" />
<text  x="1189.79" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="821" width="0.5" height="15.0" fill="rgb(209,68,39)" rx="2" ry="2" />
<text  x="1190.21" y="831.5" ></text>
</g>
<g >
<title>[tgnews] (210 samples, 1.06%)</title><rect x="29.8" y="2053" width="12.5" height="15.0" fill="rgb(206,210,48)" rx="2" ry="2" />
<text  x="32.84" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="997" width="0.3" height="15.0" fill="rgb(231,138,14)" rx="2" ry="2" />
<text  x="1189.79" y="1007.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (16 samples, 0.08%)</title><rect x="757.6" y="2037" width="0.9" height="15.0" fill="rgb(208,177,37)" rx="2" ry="2" />
<text  x="760.59" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="389" width="19.0" height="15.0" fill="rgb(225,3,53)" rx="2" ry="2" />
<text  x="59.03" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="157.8" y="1397" width="0.2" height="15.0" fill="rgb(217,98,53)" rx="2" ry="2" />
<text  x="160.82" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1349" width="0.4" height="15.0" fill="rgb(209,221,44)" rx="2" ry="2" />
<text  x="1189.20" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1525" width="0.5" height="15.0" fill="rgb(219,193,24)" rx="2" ry="2" />
<text  x="218.55" y="1535.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate@plt (3 samples, 0.02%)</title><rect x="1119.6" y="2053" width="0.2" height="15.0" fill="rgb(241,21,41)" rx="2" ry="2" />
<text  x="1122.62" y="2063.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.02%)</title><rect x="329.8" y="1957" width="0.2" height="15.0" fill="rgb(222,65,16)" rx="2" ry="2" />
<text  x="332.75" y="1967.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (25 samples, 0.13%)</title><rect x="1114.1" y="2037" width="1.5" height="15.0" fill="rgb(218,151,54)" rx="2" ry="2" />
<text  x="1117.10" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="132.0" y="1701" width="0.3" height="15.0" fill="rgb(213,226,8)" rx="2" ry="2" />
<text  x="134.99" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="405" width="0.2" height="15.0" fill="rgb(229,39,8)" rx="2" ry="2" />
<text  x="1189.85" y="415.5" ></text>
</g>
<g >
<title>[unknown] (372 samples, 1.87%)</title><rect x="56.0" y="1285" width="22.1" height="15.0" fill="rgb(229,37,1)" rx="2" ry="2" />
<text  x="59.03" y="1295.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.47%)</title><rect x="159.4" y="1637" width="5.6" height="15.0" fill="rgb(223,1,40)" rx="2" ry="2" />
<text  x="162.42" y="1647.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="76.6" y="1109" width="0.1" height="15.0" fill="rgb(244,120,24)" rx="2" ry="2" />
<text  x="79.58" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="805" width="19.4" height="15.0" fill="rgb(222,105,33)" rx="2" ry="2" />
<text  x="59.03" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (73 samples, 0.37%)</title><rect x="169.6" y="1669" width="4.4" height="15.0" fill="rgb(216,116,37)" rx="2" ry="2" />
<text  x="172.64" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="211.5" y="1669" width="0.1" height="15.0" fill="rgb(218,148,46)" rx="2" ry="2" />
<text  x="214.51" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (357 samples, 1.80%)</title><rect x="158.7" y="1797" width="21.2" height="15.0" fill="rgb(222,26,6)" rx="2" ry="2" />
<text  x="161.71" y="1807.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (2 samples, 0.01%)</title><rect x="520.2" y="2037" width="0.1" height="15.0" fill="rgb(227,162,2)" rx="2" ry="2" />
<text  x="523.21" y="2047.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (4 samples, 0.02%)</title><rect x="589.5" y="1877" width="0.3" height="15.0" fill="rgb(213,70,42)" rx="2" ry="2" />
<text  x="592.52" y="1887.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="199.6" y="1605" width="0.2" height="15.0" fill="rgb(225,137,11)" rx="2" ry="2" />
<text  x="202.63" y="1615.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (322 samples, 1.62%)</title><rect x="222.0" y="1941" width="19.1" height="15.0" fill="rgb(216,7,15)" rx="2" ry="2" />
<text  x="225.02" y="1951.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="199.0" y="1605" width="0.2" height="15.0" fill="rgb(207,90,14)" rx="2" ry="2" />
<text  x="201.98" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="799.1" y="2021" width="0.1" height="15.0" fill="rgb(235,196,31)" rx="2" ry="2" />
<text  x="802.10" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1653" width="0.5" height="15.0" fill="rgb(221,177,7)" rx="2" ry="2" />
<text  x="218.55" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (78 samples, 0.39%)</title><rect x="132.3" y="1701" width="4.7" height="15.0" fill="rgb(222,71,7)" rx="2" ry="2" />
<text  x="135.34" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (9 samples, 0.05%)</title><rect x="176.7" y="1621" width="0.5" height="15.0" fill="rgb(242,112,0)" rx="2" ry="2" />
<text  x="179.70" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (57 samples, 0.29%)</title><rect x="198.5" y="1621" width="3.4" height="15.0" fill="rgb(249,171,5)" rx="2" ry="2" />
<text  x="201.50" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1317" width="0.2" height="15.0" fill="rgb(213,128,42)" rx="2" ry="2" />
<text  x="188.44" y="1327.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="1018.1" y="1957" width="0.1" height="15.0" fill="rgb(212,160,28)" rx="2" ry="2" />
<text  x="1021.07" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="741" width="0.5" height="15.0" fill="rgb(206,183,28)" rx="2" ry="2" />
<text  x="1190.21" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (78 samples, 0.39%)</title><rect x="137.0" y="1653" width="4.7" height="15.0" fill="rgb(211,126,3)" rx="2" ry="2" />
<text  x="140.03" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1301" width="0.4" height="15.0" fill="rgb(235,111,36)" rx="2" ry="2" />
<text  x="1189.20" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="805" width="0.5" height="15.0" fill="rgb(225,163,22)" rx="2" ry="2" />
<text  x="1190.21" y="815.5" ></text>
</g>
<g >
<title>page_fault (11 samples, 0.06%)</title><rect x="648.7" y="1861" width="0.6" height="15.0" fill="rgb(248,48,34)" rx="2" ry="2" />
<text  x="651.67" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="117" width="0.4" height="15.0" fill="rgb(237,155,29)" rx="2" ry="2" />
<text  x="1190.27" y="127.5" ></text>
</g>
<g >
<title>[unknown] (556 samples, 2.80%)</title><rect x="56.0" y="1893" width="33.0" height="15.0" fill="rgb(245,195,13)" rx="2" ry="2" />
<text  x="58.97" y="1903.5" >[u..</text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (4 samples, 0.02%)</title><rect x="164.2" y="1541" width="0.3" height="15.0" fill="rgb(205,146,24)" rx="2" ry="2" />
<text  x="167.23" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (66 samples, 0.33%)</title><rect x="165.5" y="1605" width="3.9" height="15.0" fill="rgb(252,66,20)" rx="2" ry="2" />
<text  x="168.48" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="53" width="0.2" height="15.0" fill="rgb(214,197,22)" rx="2" ry="2" />
<text  x="1189.91" y="63.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="799.1" y="2005" width="0.1" height="15.0" fill="rgb(217,73,40)" rx="2" ry="2" />
<text  x="802.10" y="2015.5" ></text>
</g>
<g >
<title>do_page_fault (23 samples, 0.12%)</title><rect x="496.4" y="1909" width="1.4" height="15.0" fill="rgb(237,118,51)" rx="2" ry="2" />
<text  x="499.40" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1269" width="0.1" height="15.0" fill="rgb(238,23,44)" rx="2" ry="2" />
<text  x="160.82" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1877" width="0.5" height="15.0" fill="rgb(235,92,50)" rx="2" ry="2" />
<text  x="1189.14" y="1887.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (9 samples, 0.05%)</title><rect x="676.1" y="1749" width="0.5" height="15.0" fill="rgb(228,59,40)" rx="2" ry="2" />
<text  x="679.11" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (427 samples, 2.15%)</title><rect x="158.7" y="1813" width="25.4" height="15.0" fill="rgb(238,126,3)" rx="2" ry="2" />
<text  x="161.71" y="1823.5" >s..</text>
</g>
<g >
<title>[unknown] (568 samples, 2.86%)</title><rect x="56.0" y="1957" width="33.7" height="15.0" fill="rgb(229,71,1)" rx="2" ry="2" />
<text  x="58.97" y="1967.5" >[u..</text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="199.8" y="1605" width="0.2" height="15.0" fill="rgb(227,36,1)" rx="2" ry="2" />
<text  x="202.81" y="1615.5" ></text>
</g>
<g >
<title>do_exit (8 samples, 0.04%)</title><rect x="1097.0" y="1989" width="0.5" height="15.0" fill="rgb(242,25,2)" rx="2" ry="2" />
<text  x="1100.00" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="157.0" y="1813" width="0.2" height="15.0" fill="rgb(220,193,41)" rx="2" ry="2" />
<text  x="160.05" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1461" width="0.5" height="15.0" fill="rgb(250,101,5)" rx="2" ry="2" />
<text  x="218.55" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="213.6" y="1765" width="0.2" height="15.0" fill="rgb(231,220,5)" rx="2" ry="2" />
<text  x="216.59" y="1775.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="746.6" y="1909" width="0.1" height="15.0" fill="rgb(250,138,50)" rx="2" ry="2" />
<text  x="749.60" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="77.8" y="1253" width="0.1" height="15.0" fill="rgb(249,210,12)" rx="2" ry="2" />
<text  x="80.82" y="1263.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="508.6" y="1925" width="0.1" height="15.0" fill="rgb(214,13,48)" rx="2" ry="2" />
<text  x="511.57" y="1935.5" ></text>
</g>
<g >
<title>DetectCategory (238 samples, 1.20%)</title><rect x="524.5" y="1973" width="14.2" height="15.0" fill="rgb(230,5,38)" rx="2" ry="2" />
<text  x="527.55" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1573" width="0.1" height="15.0" fill="rgb(216,64,26)" rx="2" ry="2" />
<text  x="161.00" y="1583.5" ></text>
</g>
<g >
<title>TDocument::operator= (2 samples, 0.01%)</title><rect x="518.5" y="1957" width="0.1" height="15.0" fill="rgb(207,42,10)" rx="2" ry="2" />
<text  x="521.49" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (3 samples, 0.02%)</title><rect x="1188.1" y="2053" width="0.2" height="15.0" fill="rgb(254,5,4)" rx="2" ry="2" />
<text  x="1191.10" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1541" width="0.2" height="15.0" fill="rgb(206,145,42)" rx="2" ry="2" />
<text  x="188.44" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1669" width="0.6" height="15.0" fill="rgb(242,16,47)" rx="2" ry="2" />
<text  x="1190.15" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 1.65%)</title><rect x="56.0" y="901" width="19.5" height="15.0" fill="rgb(213,226,47)" rx="2" ry="2" />
<text  x="59.03" y="911.5" ></text>
</g>
<g >
<title>unmap_region (6 samples, 0.03%)</title><rect x="760.3" y="1941" width="0.3" height="15.0" fill="rgb(220,86,21)" rx="2" ry="2" />
<text  x="763.26" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (484 samples, 2.44%)</title><rect x="186.4" y="1909" width="28.8" height="15.0" fill="rgb(227,73,21)" rx="2" ry="2" />
<text  x="189.44" y="1919.5" >st..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (28 samples, 0.14%)</title><rect x="649.3" y="1877" width="1.7" height="15.0" fill="rgb(232,36,54)" rx="2" ry="2" />
<text  x="652.32" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.3" y="149" width="0.3" height="15.0" fill="rgb(245,46,25)" rx="2" ry="2" />
<text  x="1189.26" y="159.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (10 samples, 0.05%)</title><rect x="516.7" y="2005" width="0.6" height="15.0" fill="rgb(221,127,29)" rx="2" ry="2" />
<text  x="519.71" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (11 samples, 0.06%)</title><rect x="1013.3" y="2053" width="0.7" height="15.0" fill="rgb(246,112,7)" rx="2" ry="2" />
<text  x="1016.32" y="2063.5" ></text>
</g>
<g >
<title>__asan_memmove (3 samples, 0.02%)</title><rect x="321.8" y="1941" width="0.2" height="15.0" fill="rgb(215,54,38)" rx="2" ry="2" />
<text  x="324.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="901" width="0.5" height="15.0" fill="rgb(232,60,2)" rx="2" ry="2" />
<text  x="1190.21" y="911.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="497.3" y="1813" width="0.2" height="15.0" fill="rgb(216,65,24)" rx="2" ry="2" />
<text  x="500.35" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (325 samples, 1.64%)</title><rect x="56.0" y="693" width="19.3" height="15.0" fill="rgb(250,94,16)" rx="2" ry="2" />
<text  x="59.03" y="703.5" ></text>
</g>
<g >
<title>__dynamic_cast (50 samples, 0.25%)</title><rect x="990.7" y="2053" width="3.0" height="15.0" fill="rgb(213,225,0)" rx="2" ry="2" />
<text  x="993.75" y="2063.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.02%)</title><rect x="724.4" y="1781" width="0.2" height="15.0" fill="rgb(249,107,23)" rx="2" ry="2" />
<text  x="727.39" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1445" width="0.4" height="15.0" fill="rgb(209,210,13)" rx="2" ry="2" />
<text  x="1189.20" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (314 samples, 1.58%)</title><rect x="56.0" y="165" width="18.7" height="15.0" fill="rgb(235,201,1)" rx="2" ry="2" />
<text  x="59.03" y="175.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="77.5" y="1237" width="0.2" height="15.0" fill="rgb(242,65,14)" rx="2" ry="2" />
<text  x="80.47" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1253" width="0.1" height="15.0" fill="rgb(230,99,9)" rx="2" ry="2" />
<text  x="160.82" y="1263.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (29 samples, 0.15%)</title><rect x="333.1" y="1989" width="1.7" height="15.0" fill="rgb(216,100,39)" rx="2" ry="2" />
<text  x="336.08" y="1999.5" ></text>
</g>
<g >
<title>std::locale::locale (4 samples, 0.02%)</title><rect x="335.3" y="1989" width="0.3" height="15.0" fill="rgb(239,153,20)" rx="2" ry="2" />
<text  x="338.33" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="133" width="0.2" height="15.0" fill="rgb(234,229,7)" rx="2" ry="2" />
<text  x="1189.91" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1621" width="0.1" height="15.0" fill="rgb(250,13,39)" rx="2" ry="2" />
<text  x="218.43" y="1631.5" ></text>
</g>
<g >
<title>__do_page_fault (81 samples, 0.41%)</title><rect x="22.9" y="2005" width="4.9" height="15.0" fill="rgb(216,95,35)" rx="2" ry="2" />
<text  x="25.95" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="185.2" y="1701" width="0.2" height="15.0" fill="rgb(233,207,20)" rx="2" ry="2" />
<text  x="188.20" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="214.7" y="1813" width="0.1" height="15.0" fill="rgb(221,178,46)" rx="2" ry="2" />
<text  x="217.65" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="949" width="0.1" height="15.0" fill="rgb(254,152,20)" rx="2" ry="2" />
<text  x="160.82" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="805" width="0.4" height="15.0" fill="rgb(224,122,47)" rx="2" ry="2" />
<text  x="1189.20" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1349" width="0.1" height="15.0" fill="rgb(246,99,21)" rx="2" ry="2" />
<text  x="161.00" y="1359.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="82.6" y="1525" width="0.1" height="15.0" fill="rgb(223,155,6)" rx="2" ry="2" />
<text  x="85.57" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1493" width="0.1" height="15.0" fill="rgb(205,37,42)" rx="2" ry="2" />
<text  x="188.26" y="1503.5" ></text>
</g>
<g >
<title>try_charge (9 samples, 0.05%)</title><rect x="690.5" y="1733" width="0.6" height="15.0" fill="rgb(247,35,27)" rx="2" ry="2" />
<text  x="693.54" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.17%)</title><rect x="868.7" y="2021" width="2.0" height="15.0" fill="rgb(241,132,10)" rx="2" ry="2" />
<text  x="871.71" y="2031.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (2 samples, 0.01%)</title><rect x="207.6" y="1717" width="0.2" height="15.0" fill="rgb(228,165,38)" rx="2" ry="2" />
<text  x="210.65" y="1727.5" ></text>
</g>
<g >
<title>strcmp@plt (2 samples, 0.01%)</title><rect x="42.2" y="2037" width="0.1" height="15.0" fill="rgb(245,194,26)" rx="2" ry="2" />
<text  x="45.19" y="2047.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.03%)</title><rect x="690.1" y="1765" width="0.3" height="15.0" fill="rgb(244,143,27)" rx="2" ry="2" />
<text  x="693.06" y="1775.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="189.1" y="1557" width="0.1" height="15.0" fill="rgb(219,124,45)" rx="2" ry="2" />
<text  x="192.12" y="1567.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="134.9" y="1557" width="0.2" height="15.0" fill="rgb(253,65,4)" rx="2" ry="2" />
<text  x="137.90" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1797" width="0.6" height="15.0" fill="rgb(213,152,35)" rx="2" ry="2" />
<text  x="1190.15" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="166.8" y="1573" width="0.2" height="15.0" fill="rgb(225,0,21)" rx="2" ry="2" />
<text  x="169.85" y="1583.5" ></text>
</g>
<g >
<title>zap_page_range (9 samples, 0.05%)</title><rect x="520.7" y="1973" width="0.6" height="15.0" fill="rgb(207,76,36)" rx="2" ry="2" />
<text  x="523.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1413" width="0.1" height="15.0" fill="rgb(221,80,15)" rx="2" ry="2" />
<text  x="161.00" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1125" width="0.5" height="15.0" fill="rgb(206,132,35)" rx="2" ry="2" />
<text  x="1190.21" y="1135.5" ></text>
</g>
<g >
<title>[libOpenNMTTokenizer.so] (3 samples, 0.02%)</title><rect x="576.6" y="1893" width="0.1" height="15.0" fill="rgb(249,17,1)" rx="2" ry="2" />
<text  x="579.57" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.02%)</title><rect x="157.0" y="1797" width="0.2" height="15.0" fill="rgb(210,148,28)" rx="2" ry="2" />
<text  x="160.05" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1349" width="0.5" height="15.0" fill="rgb(242,120,31)" rx="2" ry="2" />
<text  x="218.55" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="917" width="0.5" height="15.0" fill="rgb(208,92,4)" rx="2" ry="2" />
<text  x="1190.21" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.4" y="1397" width="0.2" height="15.0" fill="rgb(226,4,39)" rx="2" ry="2" />
<text  x="188.44" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.01%)</title><rect x="748.1" y="1973" width="0.2" height="15.0" fill="rgb(237,68,21)" rx="2" ry="2" />
<text  x="751.15" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1909" width="0.4" height="15.0" fill="rgb(254,27,13)" rx="2" ry="2" />
<text  x="188.20" y="1919.5" ></text>
</g>
<g >
<title>do_futex (12 samples, 0.06%)</title><rect x="29.1" y="1941" width="0.7" height="15.0" fill="rgb(222,1,49)" rx="2" ry="2" />
<text  x="32.06" y="1951.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (6 samples, 0.03%)</title><rect x="518.3" y="2005" width="0.3" height="15.0" fill="rgb(232,19,15)" rx="2" ry="2" />
<text  x="521.25" y="2015.5" ></text>
</g>
<g >
<title>RunFasttextClf (485 samples, 2.44%)</title><rect x="538.8" y="1957" width="28.8" height="15.0" fill="rgb(232,32,39)" rx="2" ry="2" />
<text  x="541.80" y="1967.5" >Ru..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (163 samples, 0.82%)</title><rect x="132.0" y="1749" width="9.7" height="15.0" fill="rgb(212,192,26)" rx="2" ry="2" />
<text  x="134.99" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="1141" width="0.1" height="15.0" fill="rgb(240,209,40)" rx="2" ry="2" />
<text  x="160.82" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.04%)</title><rect x="761.7" y="2021" width="0.5" height="15.0" fill="rgb(238,129,53)" rx="2" ry="2" />
<text  x="764.75" y="2031.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="177.8" y="1621" width="0.2" height="15.0" fill="rgb(237,133,31)" rx="2" ry="2" />
<text  x="180.83" y="1631.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="83.0" y="1461" width="0.1" height="15.0" fill="rgb(234,148,38)" rx="2" ry="2" />
<text  x="85.99" y="1471.5" ></text>
</g>
<g >
<title>__do_munmap (11 samples, 0.06%)</title><rect x="1095.2" y="1925" width="0.7" height="15.0" fill="rgb(216,54,7)" rx="2" ry="2" />
<text  x="1098.22" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="184.7" y="1749" width="0.1" height="15.0" fill="rgb(206,148,17)" rx="2" ry="2" />
<text  x="187.66" y="1759.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="174.6" y="1653" width="0.2" height="15.0" fill="rgb(226,191,45)" rx="2" ry="2" />
<text  x="177.63" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (27 samples, 0.14%)</title><rect x="805.9" y="2037" width="1.6" height="15.0" fill="rgb(227,228,30)" rx="2" ry="2" />
<text  x="808.93" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (84 samples, 0.42%)</title><rect x="186.4" y="1733" width="5.0" height="15.0" fill="rgb(226,159,30)" rx="2" ry="2" />
<text  x="189.44" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="1119.3" y="2037" width="0.1" height="15.0" fill="rgb(244,209,39)" rx="2" ry="2" />
<text  x="1122.27" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (15 samples, 0.08%)</title><rect x="648.4" y="1877" width="0.9" height="15.0" fill="rgb(237,120,6)" rx="2" ry="2" />
<text  x="651.43" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (9 samples, 0.05%)</title><rect x="186.4" y="1685" width="0.6" height="15.0" fill="rgb(205,78,15)" rx="2" ry="2" />
<text  x="189.44" y="1695.5" ></text>
</g>
<g >
<title>get_user_pages_fast (2 samples, 0.01%)</title><rect x="29.1" y="1893" width="0.1" height="15.0" fill="rgb(247,147,46)" rx="2" ry="2" />
<text  x="32.06" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1765" width="0.4" height="15.0" fill="rgb(237,45,37)" rx="2" ry="2" />
<text  x="188.20" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (324 samples, 1.63%)</title><rect x="56.0" y="581" width="19.3" height="15.0" fill="rgb(241,210,21)" rx="2" ry="2" />
<text  x="59.03" y="591.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.02%)</title><rect x="590.4" y="1877" width="0.2" height="15.0" fill="rgb(236,60,9)" rx="2" ry="2" />
<text  x="593.41" y="1887.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="169.0" y="1573" width="0.2" height="15.0" fill="rgb(227,162,10)" rx="2" ry="2" />
<text  x="172.04" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (324 samples, 1.63%)</title><rect x="56.0" y="613" width="19.3" height="15.0" fill="rgb(231,184,40)" rx="2" ry="2" />
<text  x="59.03" y="623.5" ></text>
</g>
<g >
<title>wake_up_q (8 samples, 0.04%)</title><rect x="29.3" y="1909" width="0.5" height="15.0" fill="rgb(224,138,23)" rx="2" ry="2" />
<text  x="32.30" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="357" width="0.5" height="15.0" fill="rgb(237,22,42)" rx="2" ry="2" />
<text  x="1190.21" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (118 samples, 0.59%)</title><rect x="932.9" y="2005" width="7.0" height="15.0" fill="rgb(245,134,46)" rx="2" ry="2" />
<text  x="935.91" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (365 samples, 1.84%)</title><rect x="56.0" y="1253" width="21.7" height="15.0" fill="rgb(236,94,35)" rx="2" ry="2" />
<text  x="59.03" y="1263.5" >[..</text>
</g>
<g >
<title>onmt::AnnotatedToken::set (2 samples, 0.01%)</title><rect x="570.2" y="1909" width="0.1" height="15.0" fill="rgb(250,0,32)" rx="2" ry="2" />
<text  x="573.22" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (72 samples, 0.36%)</title><rect x="169.7" y="1637" width="4.3" height="15.0" fill="rgb(235,55,30)" rx="2" ry="2" />
<text  x="172.70" y="1647.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (5 samples, 0.03%)</title><rect x="508.0" y="1861" width="0.3" height="15.0" fill="rgb(224,57,40)" rx="2" ry="2" />
<text  x="510.98" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="821" width="0.2" height="15.0" fill="rgb(239,17,14)" rx="2" ry="2" />
<text  x="1189.85" y="831.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="513.6" y="1941" width="0.1" height="15.0" fill="rgb(252,68,2)" rx="2" ry="2" />
<text  x="516.56" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1013" width="0.3" height="15.0" fill="rgb(222,77,11)" rx="2" ry="2" />
<text  x="1189.79" y="1023.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (134 samples, 0.67%)</title><rect x="497.8" y="1925" width="7.9" height="15.0" fill="rgb(243,45,12)" rx="2" ry="2" />
<text  x="500.76" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="741" width="19.4" height="15.0" fill="rgb(232,221,33)" rx="2" ry="2" />
<text  x="59.03" y="751.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="866.9" y="2021" width="0.1" height="15.0" fill="rgb(217,108,1)" rx="2" ry="2" />
<text  x="869.86" y="2031.5" ></text>
</g>
<g >
<title>page_fault (20 samples, 0.10%)</title><rect x="689.9" y="1845" width="1.2" height="15.0" fill="rgb(237,153,22)" rx="2" ry="2" />
<text  x="692.89" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="373" width="0.2" height="15.0" fill="rgb(220,146,50)" rx="2" ry="2" />
<text  x="1189.85" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (74 samples, 0.37%)</title><rect x="169.6" y="1733" width="4.4" height="15.0" fill="rgb(222,101,34)" rx="2" ry="2" />
<text  x="172.64" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.1" y="1717" width="0.5" height="15.0" fill="rgb(238,14,45)" rx="2" ry="2" />
<text  x="1189.14" y="1727.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (19 samples, 0.10%)</title><rect x="865.3" y="1973" width="1.1" height="15.0" fill="rgb(209,212,26)" rx="2" ry="2" />
<text  x="868.32" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (4 samples, 0.02%)</title><rect x="864.5" y="2037" width="0.3" height="15.0" fill="rgb(253,38,22)" rx="2" ry="2" />
<text  x="867.55" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="177.7" y="1621" width="0.1" height="15.0" fill="rgb(251,164,31)" rx="2" ry="2" />
<text  x="180.71" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="157.0" y="1829" width="0.2" height="15.0" fill="rgb(206,84,54)" rx="2" ry="2" />
<text  x="160.05" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="789" width="0.4" height="15.0" fill="rgb(222,220,24)" rx="2" ry="2" />
<text  x="1189.20" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (76 samples, 0.38%)</title><rect x="197.4" y="1637" width="4.5" height="15.0" fill="rgb(215,220,25)" rx="2" ry="2" />
<text  x="200.43" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="1989" width="0.5" height="15.0" fill="rgb(254,44,27)" rx="2" ry="2" />
<text  x="1189.61" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform (8 samples, 0.04%)</title><rect x="1145.9" y="2053" width="0.4" height="15.0" fill="rgb(233,203,12)" rx="2" ry="2" />
<text  x="1148.87" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="101" width="0.4" height="15.0" fill="rgb(244,17,26)" rx="2" ry="2" />
<text  x="1190.27" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="549" width="0.2" height="15.0" fill="rgb(217,84,35)" rx="2" ry="2" />
<text  x="1189.85" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1797" width="0.3" height="15.0" fill="rgb(208,52,30)" rx="2" ry="2" />
<text  x="520.42" y="1807.5" ></text>
</g>
<g >
<title>std::locale::locale (3 samples, 0.02%)</title><rect x="28.3" y="2021" width="0.2" height="15.0" fill="rgb(234,148,15)" rx="2" ry="2" />
<text  x="31.29" y="2031.5" ></text>
</g>
<g >
<title>__do_page_fault (31 samples, 0.16%)</title><rect x="54.0" y="1989" width="1.8" height="15.0" fill="rgb(225,88,53)" rx="2" ry="2" />
<text  x="57.01" y="1999.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (7 samples, 0.04%)</title><rect x="334.9" y="1989" width="0.4" height="15.0" fill="rgb(223,188,50)" rx="2" ry="2" />
<text  x="337.92" y="1999.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="89.9" y="1973" width="0.2" height="15.0" fill="rgb(206,196,34)" rx="2" ry="2" />
<text  x="92.94" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.02%)</title><rect x="144.7" y="1605" width="0.2" height="15.0" fill="rgb(215,181,50)" rx="2" ry="2" />
<text  x="147.69" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="709" width="19.4" height="15.0" fill="rgb(211,78,52)" rx="2" ry="2" />
<text  x="59.03" y="719.5" ></text>
</g>
<g >
<title>__do_page_fault (7 samples, 0.04%)</title><rect x="756.2" y="1989" width="0.4" height="15.0" fill="rgb(216,183,40)" rx="2" ry="2" />
<text  x="759.16" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (166 samples, 0.84%)</title><rect x="132.0" y="1765" width="9.8" height="15.0" fill="rgb(253,54,52)" rx="2" ry="2" />
<text  x="134.99" y="1775.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="515.3" y="1925" width="0.2" height="15.0" fill="rgb(240,103,41)" rx="2" ry="2" />
<text  x="518.34" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="629" width="0.4" height="15.0" fill="rgb(234,149,20)" rx="2" ry="2" />
<text  x="1189.20" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="741" width="0.1" height="15.0" fill="rgb(226,88,47)" rx="2" ry="2" />
<text  x="160.82" y="751.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (5 samples, 0.03%)</title><rect x="517.4" y="2005" width="0.3" height="15.0" fill="rgb(246,172,32)" rx="2" ry="2" />
<text  x="520.36" y="2015.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.02%)</title><rect x="1189.5" y="2005" width="0.2" height="15.0" fill="rgb(232,5,14)" rx="2" ry="2" />
<text  x="1192.47" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1186.0" y="2021" width="0.1" height="15.0" fill="rgb(246,216,7)" rx="2" ry="2" />
<text  x="1188.96" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="157.8" y="1685" width="0.2" height="15.0" fill="rgb(231,131,53)" rx="2" ry="2" />
<text  x="160.76" y="1695.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.03%)</title><rect x="200.6" y="1605" width="0.3" height="15.0" fill="rgb(244,130,22)" rx="2" ry="2" />
<text  x="203.58" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (321 samples, 1.62%)</title><rect x="56.0" y="501" width="19.1" height="15.0" fill="rgb(248,121,43)" rx="2" ry="2" />
<text  x="59.03" y="511.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (7 samples, 0.04%)</title><rect x="761.7" y="2005" width="0.5" height="15.0" fill="rgb(239,139,28)" rx="2" ry="2" />
<text  x="764.75" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="864.3" y="2021" width="0.1" height="15.0" fill="rgb(254,2,31)" rx="2" ry="2" />
<text  x="867.31" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="2005" width="0.6" height="15.0" fill="rgb(235,153,40)" rx="2" ry="2" />
<text  x="1190.15" y="2015.5" ></text>
</g>
<g >
<title>__asan_memcpy (6 samples, 0.03%)</title><rect x="177.4" y="1621" width="0.3" height="15.0" fill="rgb(240,58,13)" rx="2" ry="2" />
<text  x="180.36" y="1631.5" ></text>
</g>
<g >
<title>page_fault (81 samples, 0.41%)</title><rect x="22.9" y="2037" width="4.9" height="15.0" fill="rgb(231,120,21)" rx="2" ry="2" />
<text  x="25.95" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (329 samples, 1.66%)</title><rect x="56.0" y="965" width="19.6" height="15.0" fill="rgb(208,190,16)" rx="2" ry="2" />
<text  x="59.03" y="975.5" ></text>
</g>
<g >
<title>TDocument::TDocument (9 samples, 0.05%)</title><rect x="747.3" y="1973" width="0.5" height="15.0" fill="rgb(224,144,11)" rx="2" ry="2" />
<text  x="750.31" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="37" width="0.4" height="15.0" fill="rgb(209,188,18)" rx="2" ry="2" />
<text  x="1190.27" y="47.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (10 samples, 0.05%)</title><rect x="806.9" y="2005" width="0.6" height="15.0" fill="rgb(237,103,3)" rx="2" ry="2" />
<text  x="809.94" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (4 samples, 0.02%)</title><rect x="1013.0" y="2053" width="0.3" height="15.0" fill="rgb(232,141,49)" rx="2" ry="2" />
<text  x="1016.02" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="1119.1" y="2037" width="0.2" height="15.0" fill="rgb(245,46,11)" rx="2" ry="2" />
<text  x="1122.15" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="517.5" y="1765" width="0.1" height="15.0" fill="rgb(210,129,0)" rx="2" ry="2" />
<text  x="520.48" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="88.5" y="1845" width="0.1" height="15.0" fill="rgb(233,43,47)" rx="2" ry="2" />
<text  x="91.45" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.7" y="1141" width="0.1" height="15.0" fill="rgb(254,21,28)" rx="2" ry="2" />
<text  x="218.72" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="207.3" y="1685" width="0.1" height="15.0" fill="rgb(243,218,7)" rx="2" ry="2" />
<text  x="210.29" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="453" width="19.0" height="15.0" fill="rgb(235,129,19)" rx="2" ry="2" />
<text  x="59.03" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1157" width="0.3" height="15.0" fill="rgb(234,51,48)" rx="2" ry="2" />
<text  x="1189.79" y="1167.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (2 samples, 0.01%)</title><rect x="519.7" y="2037" width="0.1" height="15.0" fill="rgb(244,96,2)" rx="2" ry="2" />
<text  x="522.68" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (22 samples, 0.11%)</title><rect x="675.7" y="1813" width="1.3" height="15.0" fill="rgb(226,125,22)" rx="2" ry="2" />
<text  x="678.69" y="1823.5" ></text>
</g>
<g >
<title>unmapped_area_topdown (3 samples, 0.02%)</title><rect x="1095.0" y="1909" width="0.2" height="15.0" fill="rgb(249,136,48)" rx="2" ry="2" />
<text  x="1097.98" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.23%)</title><rect x="166.4" y="1589" width="2.8" height="15.0" fill="rgb(212,21,54)" rx="2" ry="2" />
<text  x="169.43" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="149" width="0.4" height="15.0" fill="rgb(207,64,29)" rx="2" ry="2" />
<text  x="1190.27" y="159.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.79%)</title><rect x="56.0" y="1205" width="21.2" height="15.0" fill="rgb(227,181,2)" rx="2" ry="2" />
<text  x="59.03" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (486 samples, 2.45%)</title><rect x="56.0" y="1653" width="28.8" height="15.0" fill="rgb(214,30,14)" rx="2" ry="2" />
<text  x="58.97" y="1663.5" >[u..</text>
</g>
<g >
<title>unmap_vmas (3 samples, 0.02%)</title><rect x="1095.7" y="1893" width="0.2" height="15.0" fill="rgb(243,205,1)" rx="2" ry="2" />
<text  x="1098.69" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (23 samples, 0.12%)</title><rect x="482.9" y="1925" width="1.3" height="15.0" fill="rgb(244,208,43)" rx="2" ry="2" />
<text  x="485.86" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="965" width="0.3" height="15.0" fill="rgb(220,47,36)" rx="2" ry="2" />
<text  x="1189.79" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="677" width="0.2" height="15.0" fill="rgb(237,109,45)" rx="2" ry="2" />
<text  x="1189.85" y="687.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="477.7" y="1941" width="0.2" height="15.0" fill="rgb(226,120,9)" rx="2" ry="2" />
<text  x="480.75" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="2005" width="0.5" height="15.0" fill="rgb(230,122,34)" rx="2" ry="2" />
<text  x="1189.61" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (393 samples, 1.98%)</title><rect x="1121.3" y="2053" width="23.3" height="15.0" fill="rgb(211,120,2)" rx="2" ry="2" />
<text  x="1124.29" y="2063.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (8 samples, 0.04%)</title><rect x="156.8" y="1845" width="0.4" height="15.0" fill="rgb(229,12,40)" rx="2" ry="2" />
<text  x="159.75" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="485" width="0.2" height="15.0" fill="rgb(248,94,42)" rx="2" ry="2" />
<text  x="1189.85" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (4 samples, 0.02%)</title><rect x="747.0" y="1941" width="0.3" height="15.0" fill="rgb(234,181,29)" rx="2" ry="2" />
<text  x="750.02" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (88 samples, 0.44%)</title><rect x="191.4" y="1653" width="5.3" height="15.0" fill="rgb(241,115,7)" rx="2" ry="2" />
<text  x="194.43" y="1663.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="676.8" y="1749" width="0.1" height="15.0" fill="rgb(222,164,46)" rx="2" ry="2" />
<text  x="679.76" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.06%)</title><rect x="157.5" y="1909" width="0.6" height="15.0" fill="rgb(207,70,40)" rx="2" ry="2" />
<text  x="160.46" y="1919.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="85.4" y="1653" width="0.1" height="15.0" fill="rgb(242,46,17)" rx="2" ry="2" />
<text  x="88.36" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.03%)</title><rect x="805.9" y="2005" width="0.4" height="15.0" fill="rgb(218,68,23)" rx="2" ry="2" />
<text  x="808.93" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (71 samples, 0.36%)</title><rect x="187.0" y="1653" width="4.2" height="15.0" fill="rgb(247,113,11)" rx="2" ry="2" />
<text  x="189.98" y="1663.5" ></text>
</g>
<g >
<title>Preprocess (3 samples, 0.02%)</title><rect x="42.8" y="2037" width="0.2" height="15.0" fill="rgb(236,54,50)" rx="2" ry="2" />
<text  x="45.84" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReturnToAllocator (12 samples, 0.06%)</title><rect x="1017.6" y="2053" width="0.7" height="15.0" fill="rgb(242,100,27)" rx="2" ry="2" />
<text  x="1020.59" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="997" width="0.4" height="15.0" fill="rgb(237,107,52)" rx="2" ry="2" />
<text  x="1189.20" y="1007.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="485" width="19.0" height="15.0" fill="rgb(243,120,34)" rx="2" ry="2" />
<text  x="59.03" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1029" width="0.1" height="15.0" fill="rgb(241,212,18)" rx="2" ry="2" />
<text  x="160.82" y="1039.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (58 samples, 0.29%)</title><rect x="209.5" y="1685" width="3.4" height="15.0" fill="rgb(212,175,18)" rx="2" ry="2" />
<text  x="212.49" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="837" width="0.5" height="15.0" fill="rgb(234,30,44)" rx="2" ry="2" />
<text  x="1190.21" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1477" width="0.4" height="15.0" fill="rgb(240,151,22)" rx="2" ry="2" />
<text  x="1189.20" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1557" width="0.1" height="15.0" fill="rgb(212,159,6)" rx="2" ry="2" />
<text  x="161.00" y="1567.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (54 samples, 0.27%)</title><rect x="1099.1" y="2053" width="3.2" height="15.0" fill="rgb(206,146,23)" rx="2" ry="2" />
<text  x="1102.08" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1765" width="0.5" height="15.0" fill="rgb(244,114,8)" rx="2" ry="2" />
<text  x="1189.61" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="184.7" y="1781" width="0.1" height="15.0" fill="rgb(237,93,29)" rx="2" ry="2" />
<text  x="187.66" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (76 samples, 0.38%)</title><rect x="137.0" y="1637" width="4.5" height="15.0" fill="rgb(217,30,38)" rx="2" ry="2" />
<text  x="140.03" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (10 samples, 0.05%)</title><rect x="184.4" y="1861" width="0.6" height="15.0" fill="rgb(245,228,20)" rx="2" ry="2" />
<text  x="187.37" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="917" width="0.2" height="15.0" fill="rgb(232,176,46)" rx="2" ry="2" />
<text  x="1189.85" y="927.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.01%)</title><rect x="513.6" y="1925" width="0.1" height="15.0" fill="rgb(216,72,52)" rx="2" ry="2" />
<text  x="516.56" y="1935.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (9 samples, 0.05%)</title><rect x="496.9" y="1829" width="0.6" height="15.0" fill="rgb(248,59,39)" rx="2" ry="2" />
<text  x="499.93" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="864.5" y="2005" width="0.3" height="15.0" fill="rgb(250,129,41)" rx="2" ry="2" />
<text  x="867.55" y="2015.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="82.1" y="1397" width="0.1" height="15.0" fill="rgb(236,1,7)" rx="2" ry="2" />
<text  x="85.10" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (417 samples, 2.10%)</title><rect x="131.9" y="1861" width="24.8" height="15.0" fill="rgb(227,35,22)" rx="2" ry="2" />
<text  x="134.93" y="1871.5" >s..</text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="180.1" y="1685" width="0.3" height="15.0" fill="rgb(205,43,4)" rx="2" ry="2" />
<text  x="183.09" y="1695.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (19 samples, 0.10%)</title><rect x="1144.6" y="2053" width="1.2" height="15.0" fill="rgb(247,140,28)" rx="2" ry="2" />
<text  x="1147.63" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="165" width="0.4" height="15.0" fill="rgb(228,101,15)" rx="2" ry="2" />
<text  x="1190.27" y="175.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="932.7" y="1989" width="0.1" height="15.0" fill="rgb(227,169,53)" rx="2" ry="2" />
<text  x="935.67" y="1999.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="82.1" y="1445" width="0.1" height="15.0" fill="rgb(205,111,17)" rx="2" ry="2" />
<text  x="85.10" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (5 samples, 0.03%)</title><rect x="214.0" y="1877" width="0.3" height="15.0" fill="rgb(216,176,27)" rx="2" ry="2" />
<text  x="217.00" y="1887.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.02%)</title><rect x="131.4" y="1845" width="0.2" height="15.0" fill="rgb(211,34,51)" rx="2" ry="2" />
<text  x="134.39" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="215.7" y="1205" width="0.3" height="15.0" fill="rgb(213,157,15)" rx="2" ry="2" />
<text  x="218.66" y="1215.5" ></text>
</g>
<g >
<title>release_pages (3 samples, 0.02%)</title><rect x="521.0" y="1877" width="0.2" height="15.0" fill="rgb(214,216,12)" rx="2" ry="2" />
<text  x="523.98" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="853" width="0.1" height="15.0" fill="rgb(221,142,52)" rx="2" ry="2" />
<text  x="160.82" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1509" width="0.1" height="15.0" fill="rgb(207,225,16)" rx="2" ry="2" />
<text  x="188.26" y="1519.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (61 samples, 0.31%)</title><rect x="160.9" y="1557" width="3.6" height="15.0" fill="rgb(208,32,52)" rx="2" ry="2" />
<text  x="163.91" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1157" width="0.4" height="15.0" fill="rgb(216,145,33)" rx="2" ry="2" />
<text  x="1189.20" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1477" width="0.6" height="15.0" fill="rgb(239,98,38)" rx="2" ry="2" />
<text  x="1190.15" y="1487.5" ></text>
</g>
<g >
<title>__pthread_getspecific (125 samples, 0.63%)</title><rect x="997.4" y="2053" width="7.4" height="15.0" fill="rgb(241,208,44)" rx="2" ry="2" />
<text  x="1000.40" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="330.0" y="1957" width="0.1" height="15.0" fill="rgb(219,79,28)" rx="2" ry="2" />
<text  x="332.99" y="1967.5" ></text>
</g>
<g >
<title>__x64_sys_read (4 samples, 0.02%)</title><rect x="1107.1" y="1989" width="0.2" height="15.0" fill="rgb(250,209,13)" rx="2" ry="2" />
<text  x="1110.09" y="1999.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="145.6" y="1605" width="0.3" height="15.0" fill="rgb(235,199,34)" rx="2" ry="2" />
<text  x="148.59" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (7 samples, 0.04%)</title><rect x="90.6" y="2005" width="0.4" height="15.0" fill="rgb(236,167,43)" rx="2" ry="2" />
<text  x="93.59" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="185.3" y="1525" width="0.1" height="15.0" fill="rgb(243,138,36)" rx="2" ry="2" />
<text  x="188.26" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="821" width="0.4" height="15.0" fill="rgb(227,94,48)" rx="2" ry="2" />
<text  x="1189.20" y="831.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="758.6" y="1989" width="0.2" height="15.0" fill="rgb(247,103,28)" rx="2" ry="2" />
<text  x="761.60" y="1999.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="1093.0" y="1989" width="0.1" height="15.0" fill="rgb(213,181,13)" rx="2" ry="2" />
<text  x="1095.96" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="421" width="0.1" height="15.0" fill="rgb(229,152,15)" rx="2" ry="2" />
<text  x="160.82" y="431.5" ></text>
</g>
<g >
<title>__interceptor_strlen (17 samples, 0.09%)</title><rect x="577.8" y="1893" width="1.0" height="15.0" fill="rgb(240,114,49)" rx="2" ry="2" />
<text  x="580.76" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1381" width="0.3" height="15.0" fill="rgb(244,194,19)" rx="2" ry="2" />
<text  x="1189.79" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="870.7" y="2021" width="0.1" height="15.0" fill="rgb(237,46,48)" rx="2" ry="2" />
<text  x="873.67" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (7 samples, 0.04%)</title><rect x="120.6" y="2037" width="0.4" height="15.0" fill="rgb(219,43,29)" rx="2" ry="2" />
<text  x="123.58" y="2047.5" ></text>
</g>
<g >
<title>__strxfrm_l (30 samples, 0.15%)</title><rect x="1168.1" y="2021" width="1.8" height="15.0" fill="rgb(220,69,45)" rx="2" ry="2" />
<text  x="1171.14" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="469" width="0.4" height="15.0" fill="rgb(212,198,0)" rx="2" ry="2" />
<text  x="1189.20" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1493" width="0.5" height="15.0" fill="rgb(247,176,24)" rx="2" ry="2" />
<text  x="218.55" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Bind&lt;Annotate (3,769 samples, 18.97%)</title><rect x="524.4" y="1989" width="223.9" height="15.0" fill="rgb(235,104,8)" rx="2" ry="2" />
<text  x="527.43" y="1999.5" >std::__invoke&lt;std::_Bind&lt;Anno..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1813" width="0.6" height="15.0" fill="rgb(251,185,45)" rx="2" ry="2" />
<text  x="1190.15" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (78 samples, 0.39%)</title><rect x="137.0" y="1717" width="4.7" height="15.0" fill="rgb(210,91,47)" rx="2" ry="2" />
<text  x="140.03" y="1727.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (4 samples, 0.02%)</title><rect x="520.7" y="1861" width="0.3" height="15.0" fill="rgb(252,173,27)" rx="2" ry="2" />
<text  x="523.75" y="1871.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="760.1" y="1861" width="0.1" height="15.0" fill="rgb(229,8,19)" rx="2" ry="2" />
<text  x="763.08" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="389" width="0.2" height="15.0" fill="rgb(235,203,10)" rx="2" ry="2" />
<text  x="1189.85" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="649.0" y="1749" width="0.1" height="15.0" fill="rgb(225,193,4)" rx="2" ry="2" />
<text  x="652.03" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1653" width="0.1" height="15.0" fill="rgb(234,58,51)" rx="2" ry="2" />
<text  x="218.43" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="629" width="0.5" height="15.0" fill="rgb(253,160,47)" rx="2" ry="2" />
<text  x="1190.21" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (2 samples, 0.01%)</title><rect x="131.2" y="1973" width="0.1" height="15.0" fill="rgb(213,99,22)" rx="2" ry="2" />
<text  x="134.15" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (25 samples, 0.13%)</title><rect x="324.6" y="1941" width="1.5" height="15.0" fill="rgb(215,3,42)" rx="2" ry="2" />
<text  x="327.58" y="1951.5" ></text>
</g>
<g >
<title>__asan_memmove (2 samples, 0.01%)</title><rect x="1188.9" y="2037" width="0.1" height="15.0" fill="rgb(249,228,9)" rx="2" ry="2" />
<text  x="1191.87" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (444 samples, 2.23%)</title><rect x="158.7" y="1909" width="26.4" height="15.0" fill="rgb(243,115,37)" rx="2" ry="2" />
<text  x="161.71" y="1919.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="604.4" y="1861" width="0.1" height="15.0" fill="rgb(237,103,37)" rx="2" ry="2" />
<text  x="607.42" y="1871.5" ></text>
</g>
<g >
<title>__x64_sys_futex (12 samples, 0.06%)</title><rect x="29.1" y="1957" width="0.7" height="15.0" fill="rgb(233,189,49)" rx="2" ry="2" />
<text  x="32.06" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="157.7" y="1749" width="0.4" height="15.0" fill="rgb(232,113,50)" rx="2" ry="2" />
<text  x="160.70" y="1759.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (26 samples, 0.13%)</title><rect x="536.3" y="1909" width="1.5" height="15.0" fill="rgb(219,79,51)" rx="2" ry="2" />
<text  x="539.31" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="88.3" y="1829" width="0.2" height="15.0" fill="rgb(212,139,11)" rx="2" ry="2" />
<text  x="91.33" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (4 samples, 0.02%)</title><rect x="151.4" y="1797" width="0.2" height="15.0" fill="rgb(249,108,30)" rx="2" ry="2" />
<text  x="154.41" y="1807.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.04%)</title><rect x="200.9" y="1605" width="0.5" height="15.0" fill="rgb(249,64,50)" rx="2" ry="2" />
<text  x="203.88" y="1615.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="1097.7" y="1957" width="0.2" height="15.0" fill="rgb(218,161,8)" rx="2" ry="2" />
<text  x="1100.71" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::operator== (2 samples, 0.01%)</title><rect x="538.4" y="1925" width="0.1" height="15.0" fill="rgb(236,163,30)" rx="2" ry="2" />
<text  x="541.38" y="1935.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="150.5" y="1637" width="0.2" height="15.0" fill="rgb(232,135,32)" rx="2" ry="2" />
<text  x="153.45" y="1647.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.03%)</title><rect x="649.0" y="1781" width="0.3" height="15.0" fill="rgb(208,19,28)" rx="2" ry="2" />
<text  x="651.97" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="373" width="19.0" height="15.0" fill="rgb(230,146,18)" rx="2" ry="2" />
<text  x="59.03" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.02%)</title><rect x="936.6" y="1893" width="0.2" height="15.0" fill="rgb(249,100,31)" rx="2" ry="2" />
<text  x="939.59" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="215.7" y="1221" width="0.3" height="15.0" fill="rgb(250,224,46)" rx="2" ry="2" />
<text  x="218.66" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1429" width="0.5" height="15.0" fill="rgb(223,89,22)" rx="2" ry="2" />
<text  x="218.55" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="469" width="19.0" height="15.0" fill="rgb(225,2,2)" rx="2" ry="2" />
<text  x="59.03" y="479.5" ></text>
</g>
<g >
<title>TDocument::TDocument (5 samples, 0.03%)</title><rect x="335.8" y="2005" width="0.3" height="15.0" fill="rgb(227,4,29)" rx="2" ry="2" />
<text  x="338.81" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="1120.5" y="2037" width="0.1" height="15.0" fill="rgb(250,202,36)" rx="2" ry="2" />
<text  x="1123.46" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="213.6" y="1781" width="0.2" height="15.0" fill="rgb(211,32,34)" rx="2" ry="2" />
<text  x="216.59" y="1791.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (180 samples, 0.91%)</title><rect x="477.9" y="1941" width="10.7" height="15.0" fill="rgb(212,74,18)" rx="2" ry="2" />
<text  x="480.93" y="1951.5" ></text>
</g>
<g >
<title>do_page_fault (11 samples, 0.06%)</title><rect x="648.7" y="1845" width="0.6" height="15.0" fill="rgb(212,228,28)" rx="2" ry="2" />
<text  x="651.67" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.38%)</title><rect x="132.4" y="1653" width="4.5" height="15.0" fill="rgb(234,124,2)" rx="2" ry="2" />
<text  x="135.40" y="1663.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="136.4" y="1573" width="0.2" height="15.0" fill="rgb(252,18,46)" rx="2" ry="2" />
<text  x="139.38" y="1583.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="202.8" y="1669" width="0.3" height="15.0" fill="rgb(245,40,13)" rx="2" ry="2" />
<text  x="205.78" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="215.1" y="1813" width="0.1" height="15.0" fill="rgb(242,175,35)" rx="2" ry="2" />
<text  x="218.07" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="210.7" y="1669" width="0.3" height="15.0" fill="rgb(251,149,32)" rx="2" ry="2" />
<text  x="213.73" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (73 samples, 0.37%)</title><rect x="165.2" y="1669" width="4.4" height="15.0" fill="rgb(217,14,24)" rx="2" ry="2" />
<text  x="168.24" y="1679.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="580.6" y="1877" width="0.1" height="15.0" fill="rgb(206,85,16)" rx="2" ry="2" />
<text  x="583.55" y="1887.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (10 samples, 0.05%)</title><rect x="654.1" y="1877" width="0.6" height="15.0" fill="rgb(205,189,17)" rx="2" ry="2" />
<text  x="657.13" y="1887.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (1,921 samples, 9.67%)</title><rect x="216.1" y="1989" width="114.1" height="15.0" fill="rgb(235,30,54)" rx="2" ry="2" />
<text  x="219.08" y="1999.5" >TFastTextEmbed..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1333" width="0.1" height="15.0" fill="rgb(251,69,0)" rx="2" ry="2" />
<text  x="161.00" y="1343.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="204.5" y="1637" width="0.2" height="15.0" fill="rgb(235,207,42)" rx="2" ry="2" />
<text  x="207.50" y="1647.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (29 samples, 0.15%)</title><rect x="1122.7" y="2037" width="1.7" height="15.0" fill="rgb(245,188,41)" rx="2" ry="2" />
<text  x="1125.65" y="2047.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (3 samples, 0.02%)</title><rect x="138.7" y="1589" width="0.2" height="15.0" fill="rgb(219,118,13)" rx="2" ry="2" />
<text  x="141.70" y="1599.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="84.9" y="1573" width="0.1" height="15.0" fill="rgb(254,214,44)" rx="2" ry="2" />
<text  x="87.89" y="1583.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="183.6" y="1669" width="0.1" height="15.0" fill="rgb(209,150,24)" rx="2" ry="2" />
<text  x="186.59" y="1679.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.03%)</title><rect x="589.2" y="1877" width="0.3" height="15.0" fill="rgb(219,52,12)" rx="2" ry="2" />
<text  x="592.16" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.7" y="1173" width="0.1" height="15.0" fill="rgb(239,25,5)" rx="2" ry="2" />
<text  x="218.72" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1781" width="0.4" height="15.0" fill="rgb(211,138,3)" rx="2" ry="2" />
<text  x="188.20" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.7" y="1157" width="0.1" height="15.0" fill="rgb(238,193,28)" rx="2" ry="2" />
<text  x="218.72" y="1167.5" ></text>
</g>
<g >
<title>__pthread_getspecific (6 samples, 0.03%)</title><rect x="194.3" y="1589" width="0.3" height="15.0" fill="rgb(231,211,0)" rx="2" ry="2" />
<text  x="197.28" y="1599.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (4 samples, 0.02%)</title><rect x="27.2" y="1941" width="0.3" height="15.0" fill="rgb(234,177,44)" rx="2" ry="2" />
<text  x="30.22" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (7 samples, 0.04%)</title><rect x="595.5" y="1877" width="0.4" height="15.0" fill="rgb(216,52,26)" rx="2" ry="2" />
<text  x="598.46" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="1119.0" y="2037" width="0.1" height="15.0" fill="rgb(216,20,52)" rx="2" ry="2" />
<text  x="1122.03" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (322 samples, 1.62%)</title><rect x="56.0" y="533" width="19.1" height="15.0" fill="rgb(227,51,7)" rx="2" ry="2" />
<text  x="59.03" y="543.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="90.4" y="2005" width="0.1" height="15.0" fill="rgb(212,183,52)" rx="2" ry="2" />
<text  x="93.35" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1365" width="0.4" height="15.0" fill="rgb(212,113,41)" rx="2" ry="2" />
<text  x="1189.20" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1893" width="0.6" height="15.0" fill="rgb(250,9,51)" rx="2" ry="2" />
<text  x="218.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.7" y="1557" width="0.4" height="15.0" fill="rgb(246,159,23)" rx="2" ry="2" />
<text  x="1189.73" y="1567.5" ></text>
</g>
<g >
<title>Preprocess (3,022 samples, 15.21%)</title><rect x="567.8" y="1957" width="179.5" height="15.0" fill="rgb(220,44,33)" rx="2" ry="2" />
<text  x="570.84" y="1967.5" >Preprocess</text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="82.1" y="1349" width="0.1" height="15.0" fill="rgb(208,146,3)" rx="2" ry="2" />
<text  x="85.10" y="1359.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="137.7" y="1605" width="0.3" height="15.0" fill="rgb(209,159,7)" rx="2" ry="2" />
<text  x="140.75" y="1615.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="724.5" y="1765" width="0.1" height="15.0" fill="rgb(221,100,35)" rx="2" ry="2" />
<text  x="727.51" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (93 samples, 0.47%)</title><rect x="159.4" y="1589" width="5.5" height="15.0" fill="rgb(253,94,53)" rx="2" ry="2" />
<text  x="162.42" y="1599.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (5 samples, 0.03%)</title><rect x="55.4" y="1877" width="0.3" height="15.0" fill="rgb(234,131,42)" rx="2" ry="2" />
<text  x="58.37" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="86.3" y="1733" width="0.1" height="15.0" fill="rgb(229,196,28)" rx="2" ry="2" />
<text  x="89.31" y="1743.5" ></text>
</g>
<g >
<title>__asan::CanPoisonMemory (8 samples, 0.04%)</title><rect x="960.8" y="2053" width="0.4" height="15.0" fill="rgb(219,192,20)" rx="2" ry="2" />
<text  x="963.76" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1333" width="0.4" height="15.0" fill="rgb(210,54,38)" rx="2" ry="2" />
<text  x="1189.20" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1365" width="0.6" height="15.0" fill="rgb(236,186,43)" rx="2" ry="2" />
<text  x="1190.15" y="1375.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="567.2" y="1893" width="0.2" height="15.0" fill="rgb(213,191,41)" rx="2" ry="2" />
<text  x="570.25" y="1903.5" ></text>
</g>
<g >
<title>memcpy (4 samples, 0.02%)</title><rect x="575.1" y="1877" width="0.3" height="15.0" fill="rgb(247,122,17)" rx="2" ry="2" />
<text  x="578.15" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (315 samples, 1.59%)</title><rect x="56.0" y="213" width="18.7" height="15.0" fill="rgb(235,59,27)" rx="2" ry="2" />
<text  x="59.03" y="223.5" ></text>
</g>
<g >
<title>[unknown] (390 samples, 1.96%)</title><rect x="56.0" y="1349" width="23.2" height="15.0" fill="rgb(217,112,49)" rx="2" ry="2" />
<text  x="59.03" y="1359.5" >[..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (4 samples, 0.02%)</title><rect x="1116.5" y="2053" width="0.3" height="15.0" fill="rgb(227,99,0)" rx="2" ry="2" />
<text  x="1119.54" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1493" width="0.6" height="15.0" fill="rgb(227,82,37)" rx="2" ry="2" />
<text  x="1190.15" y="1503.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (12 samples, 0.06%)</title><rect x="493.0" y="1957" width="0.7" height="15.0" fill="rgb(207,103,10)" rx="2" ry="2" />
<text  x="495.95" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (78 samples, 0.39%)</title><rect x="137.0" y="1669" width="4.7" height="15.0" fill="rgb(218,224,17)" rx="2" ry="2" />
<text  x="140.03" y="1679.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.02%)</title><rect x="690.1" y="1733" width="0.2" height="15.0" fill="rgb(212,202,4)" rx="2" ry="2" />
<text  x="693.06" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1509" width="0.5" height="15.0" fill="rgb(209,181,43)" rx="2" ry="2" />
<text  x="218.55" y="1519.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 0.05%)</title><rect x="520.7" y="2005" width="0.6" height="15.0" fill="rgb(230,11,35)" rx="2" ry="2" />
<text  x="523.69" y="2015.5" ></text>
</g>
<g >
<title>do_page_fault (120 samples, 0.60%)</title><rect x="932.8" y="2021" width="7.2" height="15.0" fill="rgb(217,43,35)" rx="2" ry="2" />
<text  x="935.85" y="2031.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.03%)</title><rect x="133.2" y="1573" width="0.4" height="15.0" fill="rgb(229,194,23)" rx="2" ry="2" />
<text  x="136.23" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (410 samples, 2.06%)</title><rect x="56.0" y="1413" width="24.4" height="15.0" fill="rgb(228,75,37)" rx="2" ry="2" />
<text  x="59.03" y="1423.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (462 samples, 2.33%)</title><rect x="186.4" y="1845" width="27.5" height="15.0" fill="rgb(214,161,28)" rx="2" ry="2" />
<text  x="189.44" y="1855.5" >s..</text>
</g>
<g >
<title>TSlinkClustering::Cluster (3,012 samples, 15.16%)</title><rect x="336.1" y="2005" width="178.9" height="15.0" fill="rgb(218,174,14)" rx="2" ry="2" />
<text  x="339.10" y="2015.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1269" width="0.6" height="15.0" fill="rgb(211,77,34)" rx="2" ry="2" />
<text  x="1190.15" y="1279.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (6 samples, 0.03%)</title><rect x="516.4" y="2005" width="0.3" height="15.0" fill="rgb(221,94,23)" rx="2" ry="2" />
<text  x="519.35" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 1.67%)</title><rect x="56.0" y="1029" width="19.7" height="15.0" fill="rgb(211,61,10)" rx="2" ry="2" />
<text  x="59.03" y="1039.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.04%)</title><rect x="1097.0" y="2037" width="0.5" height="15.0" fill="rgb(216,60,50)" rx="2" ry="2" />
<text  x="1100.00" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (44 samples, 0.22%)</title><rect x="505.7" y="1925" width="2.6" height="15.0" fill="rgb(233,196,26)" rx="2" ry="2" />
<text  x="508.72" y="1935.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (9 samples, 0.05%)</title><rect x="26.9" y="1957" width="0.6" height="15.0" fill="rgb(223,175,50)" rx="2" ry="2" />
<text  x="29.93" y="1967.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="83.0" y="1381" width="0.1" height="15.0" fill="rgb(234,126,10)" rx="2" ry="2" />
<text  x="85.99" y="1391.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="136.3" y="1573" width="0.1" height="15.0" fill="rgb(222,168,30)" rx="2" ry="2" />
<text  x="139.26" y="1583.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="541.7" y="1893" width="0.2" height="15.0" fill="rgb(227,45,33)" rx="2" ry="2" />
<text  x="544.71" y="1903.5" ></text>
</g>
<g >
<title>page_fault (44 samples, 0.22%)</title><rect x="505.7" y="1957" width="2.6" height="15.0" fill="rgb(223,220,45)" rx="2" ry="2" />
<text  x="508.72" y="1967.5" ></text>
</g>
<g >
<title>smp_call_function_single (4 samples, 0.02%)</title><rect x="520.7" y="1829" width="0.3" height="15.0" fill="rgb(245,191,28)" rx="2" ry="2" />
<text  x="523.75" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="760.9" y="2021" width="0.1" height="15.0" fill="rgb(208,177,30)" rx="2" ry="2" />
<text  x="763.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="191.4" y="1685" width="5.3" height="15.0" fill="rgb(222,42,3)" rx="2" ry="2" />
<text  x="194.43" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (68 samples, 0.34%)</title><rect x="179.9" y="1781" width="4.1" height="15.0" fill="rgb(232,63,19)" rx="2" ry="2" />
<text  x="182.91" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="616.1" y="1845" width="0.1" height="15.0" fill="rgb(247,69,46)" rx="2" ry="2" />
<text  x="619.06" y="1855.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="516.4" y="1973" width="0.3" height="15.0" fill="rgb(209,174,27)" rx="2" ry="2" />
<text  x="519.35" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (5 samples, 0.03%)</title><rect x="179.6" y="1749" width="0.3" height="15.0" fill="rgb(254,61,26)" rx="2" ry="2" />
<text  x="182.61" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="981" width="0.3" height="15.0" fill="rgb(222,205,9)" rx="2" ry="2" />
<text  x="1189.79" y="991.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (464 samples, 2.34%)</title><rect x="158.2" y="1973" width="27.6" height="15.0" fill="rgb(254,206,23)" rx="2" ry="2" />
<text  x="161.23" y="1983.5" >T..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.7" y="1669" width="0.4" height="15.0" fill="rgb(220,137,30)" rx="2" ry="2" />
<text  x="1189.67" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="572.1" y="1893" width="0.1" height="15.0" fill="rgb(225,56,29)" rx="2" ry="2" />
<text  x="575.12" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (324 samples, 1.63%)</title><rect x="56.0" y="597" width="19.3" height="15.0" fill="rgb(206,42,2)" rx="2" ry="2" />
<text  x="59.03" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1285" width="0.4" height="15.0" fill="rgb(241,88,27)" rx="2" ry="2" />
<text  x="1189.20" y="1295.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="104.3" y="2005" width="0.2" height="15.0" fill="rgb(231,167,52)" rx="2" ry="2" />
<text  x="107.31" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (32 samples, 0.16%)</title><rect x="864.9" y="2021" width="1.9" height="15.0" fill="rgb(228,173,39)" rx="2" ry="2" />
<text  x="867.90" y="2031.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (3 samples, 0.02%)</title><rect x="520.8" y="1797" width="0.2" height="15.0" fill="rgb(233,143,9)" rx="2" ry="2" />
<text  x="523.80" y="1807.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="104.3" y="1989" width="0.2" height="15.0" fill="rgb(247,92,48)" rx="2" ry="2" />
<text  x="107.31" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (77 samples, 0.39%)</title><rect x="141.8" y="1653" width="4.6" height="15.0" fill="rgb(210,208,52)" rx="2" ry="2" />
<text  x="144.84" y="1663.5" ></text>
</g>
<g >
<title>TDocument::TDocument (12 samples, 0.06%)</title><rect x="121.5" y="1989" width="0.7" height="15.0" fill="rgb(206,194,25)" rx="2" ry="2" />
<text  x="124.53" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.6" y="1957" width="0.5" height="15.0" fill="rgb(223,100,1)" rx="2" ry="2" />
<text  x="1189.61" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1253" width="0.3" height="15.0" fill="rgb(247,89,20)" rx="2" ry="2" />
<text  x="1189.79" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1541" width="0.1" height="15.0" fill="rgb(233,207,30)" rx="2" ry="2" />
<text  x="161.00" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (335 samples, 1.69%)</title><rect x="56.0" y="1061" width="19.9" height="15.0" fill="rgb(221,48,39)" rx="2" ry="2" />
<text  x="59.03" y="1071.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (22 samples, 0.11%)</title><rect x="491.6" y="1957" width="1.3" height="15.0" fill="rgb(234,227,1)" rx="2" ry="2" />
<text  x="494.59" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="837" width="0.4" height="15.0" fill="rgb(252,205,27)" rx="2" ry="2" />
<text  x="1189.20" y="847.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (21 samples, 0.11%)</title><rect x="759.0" y="1989" width="1.2" height="15.0" fill="rgb(238,88,38)" rx="2" ry="2" />
<text  x="761.95" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="581" width="0.4" height="15.0" fill="rgb(233,104,37)" rx="2" ry="2" />
<text  x="1189.20" y="591.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.05%)</title><rect x="724.1" y="1877" width="0.6" height="15.0" fill="rgb(233,79,41)" rx="2" ry="2" />
<text  x="727.09" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="901" width="0.4" height="15.0" fill="rgb(213,153,54)" rx="2" ry="2" />
<text  x="1189.20" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="549" width="0.1" height="15.0" fill="rgb(248,187,35)" rx="2" ry="2" />
<text  x="160.82" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="85.4" y="1621" width="0.1" height="15.0" fill="rgb(250,148,37)" rx="2" ry="2" />
<text  x="88.36" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1301" width="0.5" height="15.0" fill="rgb(242,206,34)" rx="2" ry="2" />
<text  x="218.55" y="1311.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.02%)</title><rect x="1093.1" y="1989" width="0.3" height="15.0" fill="rgb(228,105,54)" rx="2" ry="2" />
<text  x="1096.14" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (247 samples, 1.24%)</title><rect x="731.1" y="1893" width="14.7" height="15.0" fill="rgb(234,116,7)" rx="2" ry="2" />
<text  x="734.10" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="157.1" y="1781" width="0.1" height="15.0" fill="rgb(216,71,12)" rx="2" ry="2" />
<text  x="160.11" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="157.6" y="1845" width="0.5" height="15.0" fill="rgb(222,136,40)" rx="2" ry="2" />
<text  x="160.64" y="1855.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.01%)</title><rect x="729.9" y="1893" width="0.1" height="15.0" fill="rgb(207,108,18)" rx="2" ry="2" />
<text  x="732.85" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (26 samples, 0.13%)</title><rect x="1094.9" y="2053" width="1.6" height="15.0" fill="rgb(241,108,0)" rx="2" ry="2" />
<text  x="1097.92" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="155.0" y="1669" width="0.1" height="15.0" fill="rgb(238,39,53)" rx="2" ry="2" />
<text  x="158.03" y="1679.5" ></text>
</g>
<g >
<title>smp_call_function_single (3 samples, 0.02%)</title><rect x="1095.4" y="1765" width="0.2" height="15.0" fill="rgb(208,66,16)" rx="2" ry="2" />
<text  x="1098.39" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="85.1" y="1669" width="0.1" height="15.0" fill="rgb(216,229,0)" rx="2" ry="2" />
<text  x="88.13" y="1679.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="517.4" y="1893" width="0.3" height="15.0" fill="rgb(207,81,50)" rx="2" ry="2" />
<text  x="520.42" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="198.2" y="1621" width="0.2" height="15.0" fill="rgb(213,89,14)" rx="2" ry="2" />
<text  x="201.20" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (320 samples, 1.61%)</title><rect x="56.0" y="405" width="19.0" height="15.0" fill="rgb(225,64,25)" rx="2" ry="2" />
<text  x="59.03" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (77 samples, 0.39%)</title><rect x="151.8" y="1717" width="4.6" height="15.0" fill="rgb(222,144,11)" rx="2" ry="2" />
<text  x="154.82" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="245" width="0.2" height="15.0" fill="rgb(210,133,47)" rx="2" ry="2" />
<text  x="1189.85" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1186.9" y="213" width="0.2" height="15.0" fill="rgb(228,65,52)" rx="2" ry="2" />
<text  x="1189.91" y="223.5" ></text>
</g>
<g >
<title>page_fault (5 samples, 0.03%)</title><rect x="1093.1" y="2037" width="0.3" height="15.0" fill="rgb(249,220,34)" rx="2" ry="2" />
<text  x="1096.08" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.4" y="1749" width="0.2" height="15.0" fill="rgb(245,142,10)" rx="2" ry="2" />
<text  x="89.43" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="1845" width="0.5" height="15.0" fill="rgb(239,91,33)" rx="2" ry="2" />
<text  x="1189.61" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="565" width="0.4" height="15.0" fill="rgb(211,6,39)" rx="2" ry="2" />
<text  x="1189.20" y="575.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="149.9" y="1637" width="0.2" height="15.0" fill="rgb(245,194,33)" rx="2" ry="2" />
<text  x="152.92" y="1647.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2,981 samples, 15.00%)</title><rect x="570.0" y="1925" width="177.0" height="15.0" fill="rgb(230,67,39)" rx="2" ry="2" />
<text  x="572.98" y="1935.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="189.4" y="1557" width="0.4" height="15.0" fill="rgb(210,105,13)" rx="2" ry="2" />
<text  x="192.41" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1765" width="0.6" height="15.0" fill="rgb(237,88,15)" rx="2" ry="2" />
<text  x="1190.15" y="1775.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="180.9" y="1669" width="0.1" height="15.0" fill="rgb(208,216,7)" rx="2" ry="2" />
<text  x="183.92" y="1679.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1941" width="0.3" height="15.0" fill="rgb(221,223,15)" rx="2" ry="2" />
<text  x="520.42" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="501" width="0.1" height="15.0" fill="rgb(252,217,44)" rx="2" ry="2" />
<text  x="160.82" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (22 samples, 0.11%)</title><rect x="675.7" y="1829" width="1.3" height="15.0" fill="rgb(250,169,34)" rx="2" ry="2" />
<text  x="678.69" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (114 samples, 0.57%)</title><rect x="749.8" y="2037" width="6.8" height="15.0" fill="rgb(243,186,7)" rx="2" ry="2" />
<text  x="752.81" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="157.1" y="1765" width="0.1" height="15.0" fill="rgb(234,169,11)" rx="2" ry="2" />
<text  x="160.11" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (882 samples, 4.44%)</title><rect x="811.9" y="2037" width="52.4" height="15.0" fill="rgb(227,100,14)" rx="2" ry="2" />
<text  x="814.93" y="2047.5" >std::..</text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="156.3" y="1701" width="0.1" height="15.0" fill="rgb(251,172,24)" rx="2" ry="2" />
<text  x="159.28" y="1711.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (9 samples, 0.05%)</title><rect x="515.0" y="1957" width="0.5" height="15.0" fill="rgb(233,58,52)" rx="2" ry="2" />
<text  x="517.98" y="1967.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="1018.1" y="1941" width="0.1" height="15.0" fill="rgb(249,59,48)" rx="2" ry="2" />
<text  x="1021.07" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="85.4" y="1669" width="0.1" height="15.0" fill="rgb(248,48,53)" rx="2" ry="2" />
<text  x="88.36" y="1679.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (46 samples, 0.23%)</title><rect x="1111.4" y="2037" width="2.7" height="15.0" fill="rgb(208,58,0)" rx="2" ry="2" />
<text  x="1114.37" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="85.5" y="1685" width="0.2" height="15.0" fill="rgb(224,1,4)" rx="2" ry="2" />
<text  x="88.48" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="693" width="0.1" height="15.0" fill="rgb(245,31,22)" rx="2" ry="2" />
<text  x="160.82" y="703.5" ></text>
</g>
<g >
<title>wake_q_add (2 samples, 0.01%)</title><rect x="29.2" y="1909" width="0.1" height="15.0" fill="rgb(229,172,51)" rx="2" ry="2" />
<text  x="32.18" y="1919.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (9 samples, 0.05%)</title><rect x="1098.1" y="2037" width="0.5" height="15.0" fill="rgb(210,153,33)" rx="2" ry="2" />
<text  x="1101.07" y="2047.5" ></text>
</g>
<g >
<title>ptep_clear_flush (10 samples, 0.05%)</title><rect x="55.1" y="1909" width="0.6" height="15.0" fill="rgb(247,121,13)" rx="2" ry="2" />
<text  x="58.08" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="184.6" y="1813" width="0.2" height="15.0" fill="rgb(222,24,11)" rx="2" ry="2" />
<text  x="187.60" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="469" width="0.2" height="15.0" fill="rgb(218,66,34)" rx="2" ry="2" />
<text  x="1189.85" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="885" width="0.2" height="15.0" fill="rgb(243,171,14)" rx="2" ry="2" />
<text  x="1189.85" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1637" width="0.6" height="15.0" fill="rgb(217,160,24)" rx="2" ry="2" />
<text  x="1190.15" y="1647.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1845" width="0.3" height="15.0" fill="rgb(224,40,0)" rx="2" ry="2" />
<text  x="520.42" y="1855.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (138 samples, 0.69%)</title><rect x="122.6" y="1989" width="8.2" height="15.0" fill="rgb(242,43,0)" rx="2" ry="2" />
<text  x="125.60" y="1999.5" ></text>
</g>
<g >
<title>exit_mmap (8 samples, 0.04%)</title><rect x="1097.0" y="1957" width="0.5" height="15.0" fill="rgb(209,222,11)" rx="2" ry="2" />
<text  x="1100.00" y="1967.5" ></text>
</g>
<g >
<title>try_charge (6 samples, 0.03%)</title><rect x="937.1" y="1893" width="0.3" height="15.0" fill="rgb(236,5,48)" rx="2" ry="2" />
<text  x="940.06" y="1903.5" ></text>
</g>
<g >
<title>__handle_mm_fault (37 samples, 0.19%)</title><rect x="506.1" y="1893" width="2.2" height="15.0" fill="rgb(254,192,2)" rx="2" ry="2" />
<text  x="509.08" y="1903.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.18%)</title><rect x="604.7" y="1861" width="2.1" height="15.0" fill="rgb(238,181,29)" rx="2" ry="2" />
<text  x="607.72" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="207.5" y="1733" width="0.1" height="15.0" fill="rgb(216,101,46)" rx="2" ry="2" />
<text  x="210.47" y="1743.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="205.3" y="1637" width="0.1" height="15.0" fill="rgb(221,100,30)" rx="2" ry="2" />
<text  x="208.27" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1186.6" y="1797" width="0.5" height="15.0" fill="rgb(238,165,40)" rx="2" ry="2" />
<text  x="1189.61" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (23 samples, 0.12%)</title><rect x="323.2" y="1941" width="1.3" height="15.0" fill="rgb(239,38,6)" rx="2" ry="2" />
<text  x="326.16" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1045" width="0.4" height="15.0" fill="rgb(227,147,7)" rx="2" ry="2" />
<text  x="1189.20" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (474 samples, 2.39%)</title><rect x="56.0" y="1605" width="28.1" height="15.0" fill="rgb(243,169,38)" rx="2" ry="2" />
<text  x="58.97" y="1615.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="1941" width="0.5" height="15.0" fill="rgb(211,136,52)" rx="2" ry="2" />
<text  x="1189.08" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.04%)</title><rect x="686.7" y="1845" width="0.4" height="15.0" fill="rgb(236,129,31)" rx="2" ry="2" />
<text  x="689.68" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="405" width="0.4" height="15.0" fill="rgb(233,177,13)" rx="2" ry="2" />
<text  x="1189.20" y="415.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="508.6" y="1941" width="0.1" height="15.0" fill="rgb(219,229,53)" rx="2" ry="2" />
<text  x="511.57" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="153.1" y="1685" width="0.2" height="15.0" fill="rgb(251,17,18)" rx="2" ry="2" />
<text  x="156.13" y="1695.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (3,012 samples, 15.16%)</title><rect x="336.1" y="1989" width="178.9" height="15.0" fill="rgb(247,89,20)" rx="2" ry="2" />
<text  x="339.10" y="1999.5" >TSlinkClustering::Clust..</text>
</g>
<g >
<title>[unknown] (13,954 samples, 70.23%)</title><rect x="42.3" y="2053" width="828.7" height="15.0" fill="rgb(233,153,17)" rx="2" ry="2" />
<text  x="45.31" y="2063.5" >[unknown]</text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="82.1" y="1413" width="0.1" height="15.0" fill="rgb(217,26,29)" rx="2" ry="2" />
<text  x="85.10" y="1423.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (110 samples, 0.55%)</title><rect x="104.5" y="2037" width="6.5" height="15.0" fill="rgb(249,135,26)" rx="2" ry="2" />
<text  x="107.49" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="804.8" y="2021" width="0.5" height="15.0" fill="rgb(225,79,21)" rx="2" ry="2" />
<text  x="807.80" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1605" width="0.2" height="15.0" fill="rgb(208,101,15)" rx="2" ry="2" />
<text  x="188.44" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="1118.9" y="2037" width="0.1" height="15.0" fill="rgb(253,173,45)" rx="2" ry="2" />
<text  x="1121.91" y="2047.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.02%)</title><rect x="506.6" y="1877" width="0.1" height="15.0" fill="rgb(208,75,53)" rx="2" ry="2" />
<text  x="509.55" y="1887.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="1095.6" y="1829" width="0.1" height="15.0" fill="rgb(240,174,12)" rx="2" ry="2" />
<text  x="1098.57" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="965" width="0.5" height="15.0" fill="rgb(232,125,42)" rx="2" ry="2" />
<text  x="1190.21" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1653" width="0.2" height="15.0" fill="rgb(236,186,22)" rx="2" ry="2" />
<text  x="188.44" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (538 samples, 2.71%)</title><rect x="56.0" y="1813" width="31.9" height="15.0" fill="rgb(206,7,24)" rx="2" ry="2" />
<text  x="58.97" y="1823.5" >[u..</text>
</g>
<g >
<title>__asan::AsanThread::stack_top (11 samples, 0.06%)</title><rect x="1154.2" y="2037" width="0.6" height="15.0" fill="rgb(248,43,50)" rx="2" ry="2" />
<text  x="1157.19" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="794.6" y="2021" width="0.2" height="15.0" fill="rgb(236,126,32)" rx="2" ry="2" />
<text  x="797.65" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (2 samples, 0.01%)</title><rect x="123.0" y="1941" width="0.1" height="15.0" fill="rgb(214,24,2)" rx="2" ry="2" />
<text  x="125.96" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1909" width="0.6" height="15.0" fill="rgb(212,176,20)" rx="2" ry="2" />
<text  x="218.43" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="341" width="0.5" height="15.0" fill="rgb(212,227,16)" rx="2" ry="2" />
<text  x="1190.21" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (54 samples, 0.27%)</title><rect x="614.0" y="1861" width="3.2" height="15.0" fill="rgb(222,114,19)" rx="2" ry="2" />
<text  x="616.99" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="157.7" y="1717" width="0.3" height="15.0" fill="rgb(233,44,30)" rx="2" ry="2" />
<text  x="160.70" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="159.2" y="1605" width="0.2" height="15.0" fill="rgb(247,132,13)" rx="2" ry="2" />
<text  x="162.24" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="213.6" y="1749" width="0.1" height="15.0" fill="rgb(225,26,21)" rx="2" ry="2" />
<text  x="216.59" y="1759.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.03%)</title><rect x="760.3" y="2005" width="0.3" height="15.0" fill="rgb(236,36,41)" rx="2" ry="2" />
<text  x="763.26" y="2015.5" ></text>
</g>
<g >
<title>__pthread_once_slow (3,772 samples, 18.98%)</title><rect x="524.2" y="2037" width="224.1" height="15.0" fill="rgb(246,55,41)" rx="2" ry="2" />
<text  x="527.25" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="1189" width="0.1" height="15.0" fill="rgb(221,8,0)" rx="2" ry="2" />
<text  x="160.82" y="1199.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (298 samples, 1.50%)</title><rect x="10.1" y="2053" width="17.7" height="15.0" fill="rgb(248,229,12)" rx="2" ry="2" />
<text  x="13.12" y="2063.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="203.7" y="1653" width="0.1" height="15.0" fill="rgb(211,114,7)" rx="2" ry="2" />
<text  x="206.73" y="1663.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (18 samples, 0.09%)</title><rect x="116.8" y="2037" width="1.1" height="15.0" fill="rgb(218,45,15)" rx="2" ry="2" />
<text  x="119.78" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1717" width="0.5" height="15.0" fill="rgb(243,195,19)" rx="2" ry="2" />
<text  x="218.55" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="357" width="0.2" height="15.0" fill="rgb(226,135,39)" rx="2" ry="2" />
<text  x="1189.85" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="133" width="0.4" height="15.0" fill="rgb(212,97,30)" rx="2" ry="2" />
<text  x="1190.27" y="143.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20 samples, 0.10%)</title><rect x="506.7" y="1877" width="1.2" height="15.0" fill="rgb(247,114,48)" rx="2" ry="2" />
<text  x="509.73" y="1887.5" ></text>
</g>
<g >
<title>__pthread_getspecific (50 samples, 0.25%)</title><rect x="521.3" y="2037" width="2.9" height="15.0" fill="rgb(209,112,23)" rx="2" ry="2" />
<text  x="524.28" y="2047.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (535 samples, 2.69%)</title><rect x="762.8" y="2037" width="31.8" height="15.0" fill="rgb(224,19,8)" rx="2" ry="2" />
<text  x="765.81" y="2047.5" >fa..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="83.8" y="1573" width="0.1" height="15.0" fill="rgb(239,172,36)" rx="2" ry="2" />
<text  x="86.76" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1317" width="0.6" height="15.0" fill="rgb(247,210,0)" rx="2" ry="2" />
<text  x="1190.15" y="1327.5" ></text>
</g>
<g >
<title>find_vma (3 samples, 0.02%)</title><rect x="24.8" y="1989" width="0.2" height="15.0" fill="rgb(213,96,45)" rx="2" ry="2" />
<text  x="27.85" y="1999.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="148.5" y="1637" width="0.1" height="15.0" fill="rgb(226,53,34)" rx="2" ry="2" />
<text  x="151.50" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (4 samples, 0.02%)</title><rect x="151.4" y="1781" width="0.2" height="15.0" fill="rgb(237,107,26)" rx="2" ry="2" />
<text  x="154.41" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (313 samples, 1.58%)</title><rect x="56.0" y="85" width="18.6" height="15.0" fill="rgb(216,210,6)" rx="2" ry="2" />
<text  x="59.03" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="997" width="0.1" height="15.0" fill="rgb(250,36,7)" rx="2" ry="2" />
<text  x="160.82" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (81 samples, 0.41%)</title><rect x="146.5" y="1733" width="4.8" height="15.0" fill="rgb(253,197,29)" rx="2" ry="2" />
<text  x="149.54" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (8 samples, 0.04%)</title><rect x="158.9" y="1669" width="0.5" height="15.0" fill="rgb(233,88,30)" rx="2" ry="2" />
<text  x="161.89" y="1679.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::Dictionary (32 samples, 0.16%)</title><rect x="864.9" y="2005" width="1.9" height="15.0" fill="rgb(242,203,48)" rx="2" ry="2" />
<text  x="867.90" y="2015.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (211 samples, 1.06%)</title><rect x="313.9" y="1973" width="12.5" height="15.0" fill="rgb(231,120,11)" rx="2" ry="2" />
<text  x="316.89" y="1983.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (20 samples, 0.10%)</title><rect x="114.2" y="2037" width="1.2" height="15.0" fill="rgb(221,112,3)" rx="2" ry="2" />
<text  x="117.23" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 0.02%)</title><rect x="130.4" y="1925" width="0.2" height="15.0" fill="rgb(205,226,1)" rx="2" ry="2" />
<text  x="133.38" y="1935.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (24 samples, 0.12%)</title><rect x="1094.9" y="1973" width="1.4" height="15.0" fill="rgb(242,49,48)" rx="2" ry="2" />
<text  x="1097.92" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (11 samples, 0.06%)</title><rect x="761.1" y="2037" width="0.6" height="15.0" fill="rgb(254,90,17)" rx="2" ry="2" />
<text  x="764.09" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="186.6" y="1637" width="0.2" height="15.0" fill="rgb(240,191,33)" rx="2" ry="2" />
<text  x="189.62" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4 samples, 0.02%)</title><rect x="194.8" y="1589" width="0.2" height="15.0" fill="rgb(251,111,32)" rx="2" ry="2" />
<text  x="197.76" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1413" width="0.5" height="15.0" fill="rgb(244,152,37)" rx="2" ry="2" />
<text  x="218.55" y="1423.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (4 samples, 0.02%)</title><rect x="520.7" y="1877" width="0.3" height="15.0" fill="rgb(227,75,0)" rx="2" ry="2" />
<text  x="523.75" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (258 samples, 1.30%)</title><rect x="158.7" y="1765" width="15.3" height="15.0" fill="rgb(228,3,25)" rx="2" ry="2" />
<text  x="161.71" y="1775.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="212.2" y="1669" width="0.3" height="15.0" fill="rgb(210,111,42)" rx="2" ry="2" />
<text  x="215.22" y="1679.5" ></text>
</g>
<g >
<title>page_fault (7 samples, 0.04%)</title><rect x="756.2" y="2021" width="0.4" height="15.0" fill="rgb(209,126,18)" rx="2" ry="2" />
<text  x="759.16" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="725" width="19.4" height="15.0" fill="rgb(239,53,32)" rx="2" ry="2" />
<text  x="59.03" y="735.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="80.8" y="1429" width="0.2" height="15.0" fill="rgb(221,200,16)" rx="2" ry="2" />
<text  x="83.79" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="133" width="0.3" height="15.0" fill="rgb(222,170,51)" rx="2" ry="2" />
<text  x="1189.26" y="143.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="868.4" y="2005" width="0.1" height="15.0" fill="rgb(234,70,7)" rx="2" ry="2" />
<text  x="871.41" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (73 samples, 0.37%)</title><rect x="169.6" y="1653" width="4.4" height="15.0" fill="rgb(230,185,41)" rx="2" ry="2" />
<text  x="172.64" y="1663.5" ></text>
</g>
<g >
<title>tgnews (19,869 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(228,1,34)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="329.5" y="1957" width="0.1" height="15.0" fill="rgb(214,187,16)" rx="2" ry="2" />
<text  x="332.51" y="1967.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (92 samples, 0.46%)</title><rect x="99.0" y="2037" width="5.5" height="15.0" fill="rgb(231,126,12)" rx="2" ry="2" />
<text  x="102.02" y="2047.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::setConstant (35 samples, 0.18%)</title><rect x="495.7" y="1941" width="2.1" height="15.0" fill="rgb(243,175,26)" rx="2" ry="2" />
<text  x="498.68" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1397" width="0.5" height="15.0" fill="rgb(206,176,7)" rx="2" ry="2" />
<text  x="218.55" y="1407.5" ></text>
</g>
<g >
<title>__mod_node_page_state (2 samples, 0.01%)</title><rect x="54.5" y="1909" width="0.1" height="15.0" fill="rgb(248,28,9)" rx="2" ry="2" />
<text  x="57.48" y="1919.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="89.3" y="1829" width="0.1" height="15.0" fill="rgb(222,205,6)" rx="2" ry="2" />
<text  x="92.28" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="78.6" y="1317" width="0.1" height="15.0" fill="rgb(249,31,27)" rx="2" ry="2" />
<text  x="81.59" y="1327.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="1117.8" y="2037" width="0.1" height="15.0" fill="rgb(222,223,29)" rx="2" ry="2" />
<text  x="1120.78" y="2047.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="85.4" y="1637" width="0.1" height="15.0" fill="rgb(241,127,23)" rx="2" ry="2" />
<text  x="88.36" y="1647.5" ></text>
</g>
<g >
<title>zalloc_cpumask_var (2 samples, 0.01%)</title><rect x="939.6" y="1861" width="0.1" height="15.0" fill="rgb(233,37,43)" rx="2" ry="2" />
<text  x="942.56" y="1871.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (6 samples, 0.03%)</title><rect x="186.6" y="1653" width="0.4" height="15.0" fill="rgb(222,70,25)" rx="2" ry="2" />
<text  x="189.62" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="84.5" y="1637" width="0.3" height="15.0" fill="rgb(222,144,30)" rx="2" ry="2" />
<text  x="87.53" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (183 samples, 0.92%)</title><rect x="680.2" y="1861" width="10.9" height="15.0" fill="rgb(235,79,44)" rx="2" ry="2" />
<text  x="683.20" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (3 samples, 0.02%)</title><rect x="749.4" y="2037" width="0.2" height="15.0" fill="rgb(249,200,29)" rx="2" ry="2" />
<text  x="752.39" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (145 samples, 0.73%)</title><rect x="1107.3" y="2053" width="8.6" height="15.0" fill="rgb(240,91,41)" rx="2" ry="2" />
<text  x="1110.33" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1186.1" y="1909" width="0.5" height="15.0" fill="rgb(253,0,21)" rx="2" ry="2" />
<text  x="1189.08" y="1919.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="173.1" y="1589" width="0.2" height="15.0" fill="rgb(249,85,12)" rx="2" ry="2" />
<text  x="176.08" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (430 samples, 2.16%)</title><rect x="158.7" y="1861" width="25.5" height="15.0" fill="rgb(206,118,9)" rx="2" ry="2" />
<text  x="161.71" y="1871.5" >s..</text>
</g>
<g >
<title>fasttext::Matrix::size (40 samples, 0.20%)</title><rect x="489.2" y="1957" width="2.4" height="15.0" fill="rgb(236,165,54)" rx="2" ry="2" />
<text  x="492.21" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (318 samples, 1.60%)</title><rect x="56.0" y="293" width="18.9" height="15.0" fill="rgb(232,34,49)" rx="2" ry="2" />
<text  x="59.03" y="303.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (72 samples, 0.36%)</title><rect x="37.5" y="2021" width="4.3" height="15.0" fill="rgb(221,165,48)" rx="2" ry="2" />
<text  x="40.50" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="185.4" y="1717" width="0.2" height="15.0" fill="rgb(225,38,21)" rx="2" ry="2" />
<text  x="188.38" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (476 samples, 2.40%)</title><rect x="56.0" y="1621" width="28.2" height="15.0" fill="rgb(231,115,42)" rx="2" ry="2" />
<text  x="58.97" y="1631.5" >[..</text>
</g>
<g >
<title>[unknown] (325 samples, 1.64%)</title><rect x="56.0" y="677" width="19.3" height="15.0" fill="rgb(221,39,44)" rx="2" ry="2" />
<text  x="59.03" y="687.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="1093.0" y="2021" width="0.1" height="15.0" fill="rgb(232,123,27)" rx="2" ry="2" />
<text  x="1095.96" y="2031.5" ></text>
</g>
<g >
<title>__interceptor_strlen (4 samples, 0.02%)</title><rect x="996.6" y="2053" width="0.3" height="15.0" fill="rgb(227,164,45)" rx="2" ry="2" />
<text  x="999.63" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="693" width="0.4" height="15.0" fill="rgb(245,46,41)" rx="2" ry="2" />
<text  x="1189.20" y="703.5" ></text>
</g>
<g >
<title>[unknown] (327 samples, 1.65%)</title><rect x="56.0" y="837" width="19.4" height="15.0" fill="rgb(209,83,47)" rx="2" ry="2" />
<text  x="59.03" y="847.5" ></text>
</g>
<g >
<title>__do_page_fault (5 samples, 0.03%)</title><rect x="1093.1" y="2005" width="0.3" height="15.0" fill="rgb(243,79,32)" rx="2" ry="2" />
<text  x="1096.08" y="2015.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="724.4" y="1765" width="0.1" height="15.0" fill="rgb(223,95,49)" rx="2" ry="2" />
<text  x="727.39" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1525" width="0.1" height="15.0" fill="rgb(221,160,40)" rx="2" ry="2" />
<text  x="218.43" y="1535.5" ></text>
</g>
<g >
<title>rwsem_wake (2 samples, 0.01%)</title><rect x="760.1" y="1909" width="0.1" height="15.0" fill="rgb(205,92,38)" rx="2" ry="2" />
<text  x="763.08" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="1093" width="0.5" height="15.0" fill="rgb(216,23,3)" rx="2" ry="2" />
<text  x="1190.21" y="1103.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (4 samples, 0.02%)</title><rect x="516.8" y="1989" width="0.2" height="15.0" fill="rgb(217,4,46)" rx="2" ry="2" />
<text  x="519.77" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1317" width="0.4" height="15.0" fill="rgb(208,206,29)" rx="2" ry="2" />
<text  x="1189.20" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="293" width="0.4" height="15.0" fill="rgb(245,7,47)" rx="2" ry="2" />
<text  x="1189.20" y="303.5" ></text>
</g>
<g >
<title>[unknown] (590 samples, 2.97%)</title><rect x="56.0" y="2021" width="35.0" height="15.0" fill="rgb(237,115,41)" rx="2" ry="2" />
<text  x="58.97" y="2031.5" >[u..</text>
</g>
<g >
<title>[unknown] (326 samples, 1.64%)</title><rect x="56.0" y="773" width="19.4" height="15.0" fill="rgb(212,100,19)" rx="2" ry="2" />
<text  x="59.03" y="783.5" ></text>
</g>
<g >
<title>[unknown] (321 samples, 1.62%)</title><rect x="56.0" y="517" width="19.1" height="15.0" fill="rgb(254,112,41)" rx="2" ry="2" />
<text  x="59.03" y="527.5" ></text>
</g>
<g >
<title>[unknown] (350 samples, 1.76%)</title><rect x="56.0" y="1189" width="20.8" height="15.0" fill="rgb(210,183,4)" rx="2" ry="2" />
<text  x="59.03" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1173" width="0.3" height="15.0" fill="rgb(233,47,42)" rx="2" ry="2" />
<text  x="1189.79" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="293" width="0.5" height="15.0" fill="rgb(241,7,37)" rx="2" ry="2" />
<text  x="1190.21" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="184.0" y="1781" width="0.1" height="15.0" fill="rgb(249,12,13)" rx="2" ry="2" />
<text  x="186.95" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.02%)</title><rect x="214.8" y="1797" width="0.2" height="15.0" fill="rgb(251,131,41)" rx="2" ry="2" />
<text  x="217.83" y="1807.5" ></text>
</g>
<g >
<title>__asan_memcpy (6 samples, 0.03%)</title><rect x="592.4" y="1877" width="0.3" height="15.0" fill="rgb(242,29,51)" rx="2" ry="2" />
<text  x="595.37" y="1887.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="91.5" y="2021" width="0.2" height="15.0" fill="rgb(238,51,21)" rx="2" ry="2" />
<text  x="94.48" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1733" width="0.5" height="15.0" fill="rgb(209,153,30)" rx="2" ry="2" />
<text  x="1189.14" y="1743.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="1116.3" y="2037" width="0.1" height="15.0" fill="rgb(229,120,48)" rx="2" ry="2" />
<text  x="1119.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1509" width="0.2" height="15.0" fill="rgb(208,96,53)" rx="2" ry="2" />
<text  x="160.76" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="613" width="0.1" height="15.0" fill="rgb(209,201,3)" rx="2" ry="2" />
<text  x="160.82" y="623.5" ></text>
</g>
<g >
<title>DetectLanguage[abi:cxx11] (488 samples, 2.46%)</title><rect x="538.7" y="1973" width="29.0" height="15.0" fill="rgb(216,209,28)" rx="2" ry="2" />
<text  x="541.68" y="1983.5" >De..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1493" width="0.1" height="15.0" fill="rgb(236,44,17)" rx="2" ry="2" />
<text  x="161.00" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1509" width="0.6" height="15.0" fill="rgb(214,97,31)" rx="2" ry="2" />
<text  x="1190.15" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="141.7" y="1749" width="0.1" height="15.0" fill="rgb(232,50,34)" rx="2" ry="2" />
<text  x="144.67" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="709" width="0.4" height="15.0" fill="rgb(213,44,7)" rx="2" ry="2" />
<text  x="1189.20" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="965" width="0.4" height="15.0" fill="rgb(239,3,4)" rx="2" ry="2" />
<text  x="1189.20" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="405" width="0.1" height="15.0" fill="rgb(208,199,5)" rx="2" ry="2" />
<text  x="160.82" y="415.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="83.1" y="1541" width="0.2" height="15.0" fill="rgb(235,51,41)" rx="2" ry="2" />
<text  x="86.11" y="1551.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (2 samples, 0.01%)</title><rect x="130.2" y="1893" width="0.1" height="15.0" fill="rgb(250,88,5)" rx="2" ry="2" />
<text  x="133.20" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="81.1" y="1445" width="0.2" height="15.0" fill="rgb(207,182,15)" rx="2" ry="2" />
<text  x="84.09" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="933" width="0.1" height="15.0" fill="rgb(240,72,47)" rx="2" ry="2" />
<text  x="160.82" y="943.5" ></text>
</g>
<g >
<title>[unknown] (568 samples, 2.86%)</title><rect x="56.0" y="1941" width="33.7" height="15.0" fill="rgb(222,80,36)" rx="2" ry="2" />
<text  x="58.97" y="1951.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1797" width="0.6" height="15.0" fill="rgb(239,198,32)" rx="2" ry="2" />
<text  x="218.43" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="197" width="0.4" height="15.0" fill="rgb(212,134,14)" rx="2" ry="2" />
<text  x="1190.27" y="207.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (20 samples, 0.10%)</title><rect x="328.3" y="1973" width="1.2" height="15.0" fill="rgb(212,20,45)" rx="2" ry="2" />
<text  x="331.27" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (335 samples, 1.69%)</title><rect x="56.0" y="1077" width="19.9" height="15.0" fill="rgb(248,229,50)" rx="2" ry="2" />
<text  x="59.03" y="1087.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (7 samples, 0.04%)</title><rect x="567.2" y="1909" width="0.4" height="15.0" fill="rgb(245,102,52)" rx="2" ry="2" />
<text  x="570.19" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="261" width="0.4" height="15.0" fill="rgb(252,34,24)" rx="2" ry="2" />
<text  x="1189.20" y="271.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="84.2" y="1621" width="0.2" height="15.0" fill="rgb(236,176,12)" rx="2" ry="2" />
<text  x="87.24" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1429" width="0.6" height="15.0" fill="rgb(249,142,46)" rx="2" ry="2" />
<text  x="1190.15" y="1439.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (2 samples, 0.01%)</title><rect x="728.8" y="1893" width="0.2" height="15.0" fill="rgb(206,26,32)" rx="2" ry="2" />
<text  x="731.84" y="1903.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.05%)</title><rect x="652.8" y="1829" width="0.6" height="15.0" fill="rgb(250,112,19)" rx="2" ry="2" />
<text  x="655.83" y="1839.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="122.8" y="1893" width="0.1" height="15.0" fill="rgb(209,133,18)" rx="2" ry="2" />
<text  x="125.78" y="1903.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,219 samples, 6.14%)</title><rect x="241.5" y="1973" width="72.4" height="15.0" fill="rgb(248,28,12)" rx="2" ry="2" />
<text  x="244.50" y="1983.5" >fasttext..</text>
</g>
<g >
<title>__vm_munmap (6 samples, 0.03%)</title><rect x="760.3" y="1973" width="0.3" height="15.0" fill="rgb(226,85,13)" rx="2" ry="2" />
<text  x="763.26" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="200.3" y="1605" width="0.2" height="15.0" fill="rgb(241,2,47)" rx="2" ry="2" />
<text  x="203.34" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="645" width="0.4" height="15.0" fill="rgb(210,123,50)" rx="2" ry="2" />
<text  x="1189.20" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="869" width="0.1" height="15.0" fill="rgb(231,87,4)" rx="2" ry="2" />
<text  x="160.82" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.3" y="197" width="0.3" height="15.0" fill="rgb(249,40,3)" rx="2" ry="2" />
<text  x="1189.26" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.10%)</title><rect x="1186.0" y="2053" width="1.1" height="15.0" fill="rgb(221,199,12)" rx="2" ry="2" />
<text  x="1188.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="725" width="0.5" height="15.0" fill="rgb(241,21,34)" rx="2" ry="2" />
<text  x="1190.21" y="735.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="210.6" y="1669" width="0.1" height="15.0" fill="rgb(214,113,46)" rx="2" ry="2" />
<text  x="213.56" y="1679.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="508.6" y="1957" width="0.1" height="15.0" fill="rgb(238,96,1)" rx="2" ry="2" />
<text  x="511.57" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="645" width="0.1" height="15.0" fill="rgb(216,194,9)" rx="2" ry="2" />
<text  x="160.82" y="655.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (59 samples, 0.30%)</title><rect x="1164.6" y="2021" width="3.5" height="15.0" fill="rgb(252,14,26)" rx="2" ry="2" />
<text  x="1167.64" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (14 samples, 0.07%)</title><rect x="748.3" y="2037" width="0.8" height="15.0" fill="rgb(251,92,46)" rx="2" ry="2" />
<text  x="751.26" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="135.3" y="1557" width="0.1" height="15.0" fill="rgb(230,90,14)" rx="2" ry="2" />
<text  x="138.31" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1861" width="0.6" height="15.0" fill="rgb(205,40,27)" rx="2" ry="2" />
<text  x="218.43" y="1871.5" ></text>
</g>
<g >
<title>std::locale::locale (5 samples, 0.03%)</title><rect x="514.3" y="1973" width="0.3" height="15.0" fill="rgb(214,109,17)" rx="2" ry="2" />
<text  x="517.27" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (171 samples, 0.86%)</title><rect x="316.2" y="1957" width="10.1" height="15.0" fill="rgb(227,103,46)" rx="2" ry="2" />
<text  x="319.15" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.24%)</title><rect x="148.2" y="1653" width="2.8" height="15.0" fill="rgb(244,43,17)" rx="2" ry="2" />
<text  x="151.20" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (508 samples, 2.56%)</title><rect x="56.0" y="1733" width="30.1" height="15.0" fill="rgb(224,69,40)" rx="2" ry="2" />
<text  x="58.97" y="1743.5" >[u..</text>
</g>
<g >
<title>futex_wait (4 samples, 0.02%)</title><rect x="131.3" y="1893" width="0.3" height="15.0" fill="rgb(219,203,24)" rx="2" ry="2" />
<text  x="134.33" y="1903.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="538.4" y="1909" width="0.1" height="15.0" fill="rgb(207,217,31)" rx="2" ry="2" />
<text  x="541.38" y="1919.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="162.3" y="1541" width="0.3" height="15.0" fill="rgb(208,212,40)" rx="2" ry="2" />
<text  x="165.33" y="1551.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="207.1" y="1669" width="0.1" height="15.0" fill="rgb(214,80,32)" rx="2" ry="2" />
<text  x="210.11" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="1461" width="0.4" height="15.0" fill="rgb(231,41,48)" rx="2" ry="2" />
<text  x="1189.20" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1221" width="0.2" height="15.0" fill="rgb(231,107,26)" rx="2" ry="2" />
<text  x="188.44" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (428 samples, 2.15%)</title><rect x="131.9" y="1909" width="25.4" height="15.0" fill="rgb(242,129,16)" rx="2" ry="2" />
<text  x="134.93" y="1919.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (4 samples, 0.02%)</title><rect x="214.8" y="1829" width="0.3" height="15.0" fill="rgb(213,171,44)" rx="2" ry="2" />
<text  x="217.83" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1557" width="0.6" height="15.0" fill="rgb(245,197,20)" rx="2" ry="2" />
<text  x="1190.15" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1525" width="0.4" height="15.0" fill="rgb(216,134,40)" rx="2" ry="2" />
<text  x="1189.73" y="1535.5" ></text>
</g>
<g >
<title>__asan::asan_delete (7 samples, 0.04%)</title><rect x="592.0" y="1877" width="0.4" height="15.0" fill="rgb(248,50,0)" rx="2" ry="2" />
<text  x="594.95" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.10%)</title><rect x="810.8" y="2021" width="1.1" height="15.0" fill="rgb(252,55,21)" rx="2" ry="2" />
<text  x="813.80" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (444 samples, 2.23%)</title><rect x="158.7" y="1893" width="26.4" height="15.0" fill="rgb(237,20,16)" rx="2" ry="2" />
<text  x="161.71" y="1903.5" >s..</text>
</g>
<g >
<title>unmap_single_vma (4 samples, 0.02%)</title><rect x="760.4" y="1909" width="0.2" height="15.0" fill="rgb(227,183,16)" rx="2" ry="2" />
<text  x="763.38" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.3" y="1445" width="0.1" height="15.0" fill="rgb(251,124,26)" rx="2" ry="2" />
<text  x="188.26" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (2 samples, 0.01%)</title><rect x="213.7" y="1733" width="0.1" height="15.0" fill="rgb(205,158,41)" rx="2" ry="2" />
<text  x="216.70" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.7" y="1605" width="0.4" height="15.0" fill="rgb(229,46,3)" rx="2" ry="2" />
<text  x="1189.73" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1301" width="0.3" height="15.0" fill="rgb(234,123,30)" rx="2" ry="2" />
<text  x="1189.79" y="1311.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6 samples, 0.03%)</title><rect x="724.3" y="1813" width="0.4" height="15.0" fill="rgb(211,46,4)" rx="2" ry="2" />
<text  x="727.33" y="1823.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="590.9" y="1877" width="0.2" height="15.0" fill="rgb(221,159,32)" rx="2" ry="2" />
<text  x="593.94" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="101" width="0.2" height="15.0" fill="rgb(224,117,39)" rx="2" ry="2" />
<text  x="1189.91" y="111.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.03%)</title><rect x="122.2" y="1989" width="0.3" height="15.0" fill="rgb(239,160,34)" rx="2" ry="2" />
<text  x="125.25" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="677" width="0.5" height="15.0" fill="rgb(230,43,49)" rx="2" ry="2" />
<text  x="1190.21" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (50 samples, 0.25%)</title><rect x="192.9" y="1605" width="3.0" height="15.0" fill="rgb(233,112,4)" rx="2" ry="2" />
<text  x="195.92" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (330 samples, 1.66%)</title><rect x="56.0" y="1013" width="19.6" height="15.0" fill="rgb(239,30,20)" rx="2" ry="2" />
<text  x="59.03" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.02%)</title><rect x="184.8" y="1797" width="0.2" height="15.0" fill="rgb(238,44,3)" rx="2" ry="2" />
<text  x="187.78" y="1807.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="84.9" y="1621" width="0.1" height="15.0" fill="rgb(220,222,29)" rx="2" ry="2" />
<text  x="87.89" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (66 samples, 0.33%)</title><rect x="203.1" y="1669" width="3.9" height="15.0" fill="rgb(243,42,29)" rx="2" ry="2" />
<text  x="206.07" y="1679.5" ></text>
</g>
<g >
<title>__asan_memset (30 samples, 0.15%)</title><rect x="678.2" y="1861" width="1.8" height="15.0" fill="rgb(223,184,47)" rx="2" ry="2" />
<text  x="681.25" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.7" y="1253" width="0.1" height="15.0" fill="rgb(217,146,32)" rx="2" ry="2" />
<text  x="80.70" y="1263.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="196.1" y="1605" width="0.1" height="15.0" fill="rgb(239,165,25)" rx="2" ry="2" />
<text  x="199.13" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="581" width="0.2" height="15.0" fill="rgb(220,78,51)" rx="2" ry="2" />
<text  x="1189.85" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1205" width="0.3" height="15.0" fill="rgb(221,141,33)" rx="2" ry="2" />
<text  x="1189.79" y="1215.5" ></text>
</g>
<g >
<title>alloc_pages_vma (18 samples, 0.09%)</title><rect x="25.6" y="1957" width="1.0" height="15.0" fill="rgb(209,110,40)" rx="2" ry="2" />
<text  x="28.56" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (445 samples, 2.24%)</title><rect x="56.0" y="1509" width="26.5" height="15.0" fill="rgb(215,164,27)" rx="2" ry="2" />
<text  x="59.03" y="1519.5" >[..</text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 0.05%)</title><rect x="648.8" y="1797" width="0.5" height="15.0" fill="rgb(251,196,13)" rx="2" ry="2" />
<text  x="651.79" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (66 samples, 0.33%)</title><rect x="179.9" y="1717" width="3.9" height="15.0" fill="rgb(217,37,24)" rx="2" ry="2" />
<text  x="182.91" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (70 samples, 0.35%)</title><rect x="179.9" y="1797" width="4.2" height="15.0" fill="rgb(244,137,3)" rx="2" ry="2" />
<text  x="182.91" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="320.1" y="1941" width="0.1" height="15.0" fill="rgb(213,56,22)" rx="2" ry="2" />
<text  x="323.07" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (138 samples, 0.69%)</title><rect x="122.6" y="1973" width="8.2" height="15.0" fill="rgb(247,56,33)" rx="2" ry="2" />
<text  x="125.60" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (12 samples, 0.06%)</title><rect x="214.5" y="1861" width="0.7" height="15.0" fill="rgb(242,83,50)" rx="2" ry="2" />
<text  x="217.48" y="1871.5" ></text>
</g>
<g >
<title>unmap_page_range (3 samples, 0.02%)</title><rect x="1095.7" y="1861" width="0.2" height="15.0" fill="rgb(209,46,36)" rx="2" ry="2" />
<text  x="1098.69" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (5 samples, 0.03%)</title><rect x="144.9" y="1605" width="0.3" height="15.0" fill="rgb(238,191,15)" rx="2" ry="2" />
<text  x="147.87" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (322 samples, 1.62%)</title><rect x="56.0" y="549" width="19.1" height="15.0" fill="rgb(222,132,29)" rx="2" ry="2" />
<text  x="59.03" y="559.5" ></text>
</g>
<g >
<title>__vfs_read (4 samples, 0.02%)</title><rect x="1107.1" y="1941" width="0.2" height="15.0" fill="rgb(221,149,6)" rx="2" ry="2" />
<text  x="1110.09" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1445" width="0.5" height="15.0" fill="rgb(209,196,14)" rx="2" ry="2" />
<text  x="218.55" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (78 samples, 0.39%)</title><rect x="160.0" y="1573" width="4.6" height="15.0" fill="rgb(232,200,32)" rx="2" ry="2" />
<text  x="162.96" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1557" width="0.2" height="15.0" fill="rgb(244,124,16)" rx="2" ry="2" />
<text  x="188.44" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (329 samples, 1.66%)</title><rect x="56.0" y="933" width="19.6" height="15.0" fill="rgb(235,219,7)" rx="2" ry="2" />
<text  x="59.03" y="943.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (5 samples, 0.03%)</title><rect x="196.2" y="1621" width="0.3" height="15.0" fill="rgb(236,27,0)" rx="2" ry="2" />
<text  x="199.24" y="1631.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (17 samples, 0.09%)</title><rect x="484.3" y="1925" width="1.0" height="15.0" fill="rgb(240,124,21)" rx="2" ry="2" />
<text  x="487.34" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="565" width="0.1" height="15.0" fill="rgb(207,186,37)" rx="2" ry="2" />
<text  x="160.82" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (71 samples, 0.36%)</title><rect x="187.0" y="1669" width="4.2" height="15.0" fill="rgb(208,107,51)" rx="2" ry="2" />
<text  x="189.98" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1205" width="0.6" height="15.0" fill="rgb(240,16,50)" rx="2" ry="2" />
<text  x="1190.15" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1685" width="0.5" height="15.0" fill="rgb(215,172,53)" rx="2" ry="2" />
<text  x="218.55" y="1695.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (4 samples, 0.02%)</title><rect x="567.4" y="1893" width="0.2" height="15.0" fill="rgb(237,104,47)" rx="2" ry="2" />
<text  x="570.37" y="1903.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (54 samples, 0.27%)</title><rect x="954.8" y="2053" width="3.2" height="15.0" fill="rgb(232,116,45)" rx="2" ry="2" />
<text  x="957.76" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (17 samples, 0.09%)</title><rect x="1176.4" y="2037" width="1.0" height="15.0" fill="rgb(250,185,35)" rx="2" ry="2" />
<text  x="1179.40" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.01%)</title><rect x="160.8" y="1557" width="0.1" height="15.0" fill="rgb(224,20,39)" rx="2" ry="2" />
<text  x="163.79" y="1567.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (8 samples, 0.04%)</title><rect x="189.9" y="1557" width="0.5" height="15.0" fill="rgb(240,217,38)" rx="2" ry="2" />
<text  x="192.89" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1301" width="0.1" height="15.0" fill="rgb(234,44,30)" rx="2" ry="2" />
<text  x="160.82" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="213.6" y="1797" width="0.2" height="15.0" fill="rgb(236,146,29)" rx="2" ry="2" />
<text  x="216.59" y="1807.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (43 samples, 0.22%)</title><rect x="674.4" y="1861" width="2.6" height="15.0" fill="rgb(227,69,39)" rx="2" ry="2" />
<text  x="677.44" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1685" width="0.6" height="15.0" fill="rgb(236,27,43)" rx="2" ry="2" />
<text  x="1190.15" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (15 samples, 0.08%)</title><rect x="591.1" y="1877" width="0.9" height="15.0" fill="rgb(246,216,2)" rx="2" ry="2" />
<text  x="594.06" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.7" y="1717" width="0.4" height="15.0" fill="rgb(223,122,43)" rx="2" ry="2" />
<text  x="1189.67" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (4 samples, 0.02%)</title><rect x="1187.9" y="2053" width="0.2" height="15.0" fill="rgb(213,95,52)" rx="2" ry="2" />
<text  x="1190.86" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="89.0" y="1893" width="0.2" height="15.0" fill="rgb(230,28,45)" rx="2" ry="2" />
<text  x="91.99" y="1903.5" ></text>
</g>
<g >
<title>mmap_region (14 samples, 0.07%)</title><rect x="759.1" y="1925" width="0.8" height="15.0" fill="rgb(206,74,13)" rx="2" ry="2" />
<text  x="762.07" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="597" width="0.2" height="15.0" fill="rgb(205,29,0)" rx="2" ry="2" />
<text  x="1189.85" y="607.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="172.6" y="1589" width="0.1" height="15.0" fill="rgb(230,51,6)" rx="2" ry="2" />
<text  x="175.61" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="1237" width="0.1" height="15.0" fill="rgb(214,153,1)" rx="2" ry="2" />
<text  x="160.82" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.18%)</title><rect x="808.7" y="2021" width="2.1" height="15.0" fill="rgb(254,106,48)" rx="2" ry="2" />
<text  x="811.66" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (882 samples, 4.44%)</title><rect x="811.9" y="2005" width="52.4" height="15.0" fill="rgb(248,110,46)" rx="2" ry="2" />
<text  x="814.93" y="2015.5" >__san..</text>
</g>
<g >
<title>__asan_memcpy@plt (2 samples, 0.01%)</title><rect x="604.2" y="1861" width="0.1" height="15.0" fill="rgb(253,47,23)" rx="2" ry="2" />
<text  x="607.19" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (8 samples, 0.04%)</title><rect x="804.8" y="2005" width="0.5" height="15.0" fill="rgb(219,170,36)" rx="2" ry="2" />
<text  x="807.80" y="2015.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="158.1" y="1925" width="0.1" height="15.0" fill="rgb(241,46,13)" rx="2" ry="2" />
<text  x="161.12" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="37" width="0.3" height="15.0" fill="rgb(211,149,26)" rx="2" ry="2" />
<text  x="1189.26" y="47.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.04%)</title><rect x="534.6" y="1909" width="0.4" height="15.0" fill="rgb(227,212,12)" rx="2" ry="2" />
<text  x="537.58" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (324 samples, 1.63%)</title><rect x="56.0" y="565" width="19.3" height="15.0" fill="rgb(249,43,24)" rx="2" ry="2" />
<text  x="59.03" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.05%)</title><rect x="1187.1" y="1237" width="0.6" height="15.0" fill="rgb(237,81,4)" rx="2" ry="2" />
<text  x="1190.15" y="1247.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="147.8" y="1653" width="0.3" height="15.0" fill="rgb(209,89,6)" rx="2" ry="2" />
<text  x="150.84" y="1663.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="179.2" y="1637" width="0.1" height="15.0" fill="rgb(227,140,8)" rx="2" ry="2" />
<text  x="182.20" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="453" width="0.5" height="15.0" fill="rgb(232,66,37)" rx="2" ry="2" />
<text  x="1190.21" y="463.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (24 samples, 0.12%)</title><rect x="1173.5" y="2037" width="1.5" height="15.0" fill="rgb(208,9,50)" rx="2" ry="2" />
<text  x="1176.55" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (215 samples, 1.08%)</title><rect x="525.2" y="1925" width="12.8" height="15.0" fill="rgb(239,106,24)" rx="2" ry="2" />
<text  x="528.20" y="1935.5" ></text>
</g>
<g >
<title>generic_exec_single (3 samples, 0.02%)</title><rect x="520.8" y="1813" width="0.2" height="15.0" fill="rgb(207,183,9)" rx="2" ry="2" />
<text  x="523.80" y="1823.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="1017.5" y="2037" width="0.1" height="15.0" fill="rgb(224,121,39)" rx="2" ry="2" />
<text  x="1020.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1186.9" y="453" width="0.2" height="15.0" fill="rgb(210,176,21)" rx="2" ry="2" />
<text  x="1189.85" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1186.9" y="421" width="0.2" height="15.0" fill="rgb(222,132,28)" rx="2" ry="2" />
<text  x="1189.85" y="431.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="83.0" y="1429" width="0.1" height="15.0" fill="rgb(254,106,9)" rx="2" ry="2" />
<text  x="85.99" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="215.4" y="1701" width="0.1" height="15.0" fill="rgb(247,100,7)" rx="2" ry="2" />
<text  x="218.43" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (68 samples, 0.34%)</title><rect x="179.9" y="1765" width="4.1" height="15.0" fill="rgb(231,69,47)" rx="2" ry="2" />
<text  x="182.91" y="1775.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="1013.1" y="2005" width="0.2" height="15.0" fill="rgb(212,189,51)" rx="2" ry="2" />
<text  x="1016.08" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (87 samples, 0.44%)</title><rect x="196.9" y="1669" width="5.2" height="15.0" fill="rgb(254,69,41)" rx="2" ry="2" />
<text  x="199.90" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="157.8" y="901" width="0.1" height="15.0" fill="rgb(240,111,50)" rx="2" ry="2" />
<text  x="160.82" y="911.5" ></text>
</g>
<g >
<title>operator delete[] (4 samples, 0.02%)</title><rect x="1106.5" y="2053" width="0.2" height="15.0" fill="rgb(224,120,0)" rx="2" ry="2" />
<text  x="1109.50" y="2063.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="82.1" y="1429" width="0.1" height="15.0" fill="rgb(253,165,42)" rx="2" ry="2" />
<text  x="85.10" y="1439.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="172.7" y="1589" width="0.4" height="15.0" fill="rgb(208,103,11)" rx="2" ry="2" />
<text  x="175.73" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (484 samples, 2.44%)</title><rect x="186.4" y="1925" width="28.8" height="15.0" fill="rgb(222,41,50)" rx="2" ry="2" />
<text  x="189.44" y="1935.5" >st..</text>
</g>
<g >
<title>vmacache_find (2 samples, 0.01%)</title><rect x="27.6" y="1989" width="0.2" height="15.0" fill="rgb(222,86,7)" rx="2" ry="2" />
<text  x="30.64" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1925" width="0.3" height="15.0" fill="rgb(228,74,51)" rx="2" ry="2" />
<text  x="520.42" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="82.8" y="1525" width="0.2" height="15.0" fill="rgb(225,5,9)" rx="2" ry="2" />
<text  x="85.75" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.3" y="181" width="0.3" height="15.0" fill="rgb(220,54,8)" rx="2" ry="2" />
<text  x="1189.26" y="191.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (54 samples, 0.27%)</title><rect x="111.0" y="2037" width="3.2" height="15.0" fill="rgb(226,128,43)" rx="2" ry="2" />
<text  x="114.02" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="581" width="0.5" height="15.0" fill="rgb(249,68,10)" rx="2" ry="2" />
<text  x="1190.21" y="591.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (8 samples, 0.04%)</title><rect x="1097.0" y="2021" width="0.5" height="15.0" fill="rgb(254,182,35)" rx="2" ry="2" />
<text  x="1100.00" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_last_of (2 samples, 0.01%)</title><rect x="1145.8" y="2053" width="0.1" height="15.0" fill="rgb(222,25,46)" rx="2" ry="2" />
<text  x="1148.76" y="2063.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="493.8" y="1957" width="0.1" height="15.0" fill="rgb(215,206,48)" rx="2" ry="2" />
<text  x="496.78" y="1967.5" ></text>
</g>
<g >
<title>std::future&lt;boost::optional&lt;TDocument&gt; &gt;::get (10 samples, 0.05%)</title><rect x="131.0" y="1989" width="0.6" height="15.0" fill="rgb(222,50,45)" rx="2" ry="2" />
<text  x="133.98" y="1999.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="760.5" y="1845" width="0.1" height="15.0" fill="rgb(210,182,52)" rx="2" ry="2" />
<text  x="763.50" y="1855.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (5 samples, 0.03%)</title><rect x="518.3" y="1989" width="0.3" height="15.0" fill="rgb(212,132,10)" rx="2" ry="2" />
<text  x="521.31" y="1999.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (213 samples, 1.07%)</title><rect x="43.2" y="2037" width="12.6" height="15.0" fill="rgb(218,190,4)" rx="2" ry="2" />
<text  x="46.20" y="2047.5" ></text>
</g>
<g >
<title>GetHost (460 samples, 2.32%)</title><rect x="158.2" y="1957" width="27.4" height="15.0" fill="rgb(210,164,8)" rx="2" ry="2" />
<text  x="161.23" y="1967.5" >G..</text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (56 samples, 0.28%)</title><rect x="143.0" y="1621" width="3.4" height="15.0" fill="rgb(226,3,26)" rx="2" ry="2" />
<text  x="146.03" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="87.4" y="1797" width="0.2" height="15.0" fill="rgb(246,222,24)" rx="2" ry="2" />
<text  x="90.38" y="1807.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (28 samples, 0.14%)</title><rect x="97.4" y="2037" width="1.6" height="15.0" fill="rgb(243,169,39)" rx="2" ry="2" />
<text  x="100.36" y="2047.5" ></text>
</g>
<g >
<title>do_wp_page (20 samples, 0.10%)</title><rect x="54.5" y="1941" width="1.2" height="15.0" fill="rgb(224,72,8)" rx="2" ry="2" />
<text  x="57.48" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1285" width="0.1" height="15.0" fill="rgb(211,147,0)" rx="2" ry="2" />
<text  x="160.82" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1349" width="0.3" height="15.0" fill="rgb(250,2,6)" rx="2" ry="2" />
<text  x="1189.79" y="1359.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="181.5" y="1653" width="0.2" height="15.0" fill="rgb(224,18,15)" rx="2" ry="2" />
<text  x="184.52" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (81 samples, 0.41%)</title><rect x="151.7" y="1781" width="4.8" height="15.0" fill="rgb(245,91,3)" rx="2" ry="2" />
<text  x="154.70" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (507 samples, 2.55%)</title><rect x="56.0" y="1717" width="30.1" height="15.0" fill="rgb(207,221,45)" rx="2" ry="2" />
<text  x="58.97" y="1727.5" >[u..</text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="493.7" y="1957" width="0.1" height="15.0" fill="rgb(240,42,14)" rx="2" ry="2" />
<text  x="496.66" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="185.2" y="1717" width="0.2" height="15.0" fill="rgb(232,220,8)" rx="2" ry="2" />
<text  x="188.20" y="1727.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.02%)</title><rect x="1121.0" y="2037" width="0.2" height="15.0" fill="rgb(225,176,54)" rx="2" ry="2" />
<text  x="1124.05" y="2047.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (4 samples, 0.02%)</title><rect x="153.9" y="1669" width="0.2" height="15.0" fill="rgb(211,176,32)" rx="2" ry="2" />
<text  x="156.90" y="1679.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (469 samples, 2.36%)</title><rect x="539.1" y="1925" width="27.9" height="15.0" fill="rgb(217,172,52)" rx="2" ry="2" />
<text  x="542.10" y="1935.5" >f..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="86.8" y="1765" width="0.2" height="15.0" fill="rgb(247,18,34)" rx="2" ry="2" />
<text  x="89.79" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (92 samples, 0.46%)</title><rect x="196.7" y="1749" width="5.5" height="15.0" fill="rgb(210,201,27)" rx="2" ry="2" />
<text  x="199.72" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (698 samples, 3.51%)</title><rect x="55.9" y="2037" width="41.5" height="15.0" fill="rgb(245,144,37)" rx="2" ry="2" />
<text  x="58.91" y="2047.5" >[un..</text>
</g>
<g >
<title>handle_mm_fault (11 samples, 0.06%)</title><rect x="648.7" y="1813" width="0.6" height="15.0" fill="rgb(233,75,20)" rx="2" ry="2" />
<text  x="651.67" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="197" width="0.2" height="15.0" fill="rgb(207,175,31)" rx="2" ry="2" />
<text  x="1189.91" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1653" width="0.6" height="15.0" fill="rgb(244,15,42)" rx="2" ry="2" />
<text  x="1190.15" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="184.4" y="1797" width="0.2" height="15.0" fill="rgb(242,168,40)" rx="2" ry="2" />
<text  x="187.43" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="760.9" y="2005" width="0.1" height="15.0" fill="rgb(227,67,10)" rx="2" ry="2" />
<text  x="763.91" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="319.8" y="1941" width="0.3" height="15.0" fill="rgb(241,57,16)" rx="2" ry="2" />
<text  x="322.77" y="1951.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="153.6" y="1669" width="0.2" height="15.0" fill="rgb(216,208,2)" rx="2" ry="2" />
<text  x="156.60" y="1679.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (3 samples, 0.02%)</title><rect x="130.6" y="1925" width="0.2" height="15.0" fill="rgb(248,87,1)" rx="2" ry="2" />
<text  x="133.62" y="1935.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (237 samples, 1.19%)</title><rect x="691.3" y="1877" width="14.1" height="15.0" fill="rgb(244,19,51)" rx="2" ry="2" />
<text  x="694.31" y="1887.5" ></text>
</g>
<g >
<title>std::__merge_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TWeightedDoc*, std::vector&lt;TWeightedDoc, std::allocator&lt;TWeightedDoc&gt; &gt; &gt;, long, TWeightedDoc*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TNewsCluster::SortByWeights (2 samples, 0.01%)</title><rect x="330.4" y="1957" width="0.1" height="15.0" fill="rgb(239,119,12)" rx="2" ry="2" />
<text  x="333.40" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="83.9" y="1589" width="0.1" height="15.0" fill="rgb(216,198,39)" rx="2" ry="2" />
<text  x="86.88" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1173" width="0.5" height="15.0" fill="rgb(221,220,8)" rx="2" ry="2" />
<text  x="1190.21" y="1183.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="1017.5" y="2005" width="0.1" height="15.0" fill="rgb(212,82,1)" rx="2" ry="2" />
<text  x="1020.47" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="184.8" y="1829" width="0.2" height="15.0" fill="rgb(254,226,22)" rx="2" ry="2" />
<text  x="187.78" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="565" width="0.5" height="15.0" fill="rgb(242,6,43)" rx="2" ry="2" />
<text  x="1190.21" y="575.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (21 samples, 0.11%)</title><rect x="677.0" y="1861" width="1.2" height="15.0" fill="rgb(249,25,39)" rx="2" ry="2" />
<text  x="680.00" y="1871.5" ></text>
</g>
<g >
<title>handle_mm_fault (5 samples, 0.03%)</title><rect x="756.3" y="1973" width="0.3" height="15.0" fill="rgb(235,199,23)" rx="2" ry="2" />
<text  x="759.28" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="215.5" y="1733" width="0.5" height="15.0" fill="rgb(215,175,54)" rx="2" ry="2" />
<text  x="218.55" y="1743.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="191.0" y="1589" width="0.2" height="15.0" fill="rgb(209,194,12)" rx="2" ry="2" />
<text  x="193.96" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="745.8" y="1893" width="0.1" height="15.0" fill="rgb(217,28,32)" rx="2" ry="2" />
<text  x="748.83" y="1903.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="136.1" y="1557" width="0.2" height="15.0" fill="rgb(206,199,48)" rx="2" ry="2" />
<text  x="139.14" y="1567.5" ></text>
</g>
<g >
<title>Summarize (2,521 samples, 12.69%)</title><rect x="186.0" y="2005" width="149.7" height="15.0" fill="rgb(247,20,12)" rx="2" ry="2" />
<text  x="189.03" y="2015.5" >Summarize</text>
</g>
<g >
<title>operator delete (5 samples, 0.03%)</title><rect x="163.5" y="1541" width="0.3" height="15.0" fill="rgb(241,157,33)" rx="2" ry="2" />
<text  x="166.52" y="1551.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (45 samples, 0.23%)</title><rect x="961.2" y="2053" width="2.7" height="15.0" fill="rgb(221,23,3)" rx="2" ry="2" />
<text  x="964.23" y="2063.5" ></text>
</g>
<g >
<title>ptep_clear_flush (34 samples, 0.17%)</title><rect x="937.7" y="1925" width="2.0" height="15.0" fill="rgb(209,228,8)" rx="2" ry="2" />
<text  x="940.66" y="1935.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (4 samples, 0.02%)</title><rect x="567.4" y="1877" width="0.2" height="15.0" fill="rgb(220,226,24)" rx="2" ry="2" />
<text  x="570.37" y="1887.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (2 samples, 0.01%)</title><rect x="581.6" y="1893" width="0.1" height="15.0" fill="rgb(251,24,30)" rx="2" ry="2" />
<text  x="584.56" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1187.3" y="69" width="0.4" height="15.0" fill="rgb(245,78,1)" rx="2" ry="2" />
<text  x="1190.27" y="79.5" ></text>
</g>
<g >
<title>[unknown] (338 samples, 1.70%)</title><rect x="56.0" y="1093" width="20.1" height="15.0" fill="rgb(226,218,49)" rx="2" ry="2" />
<text  x="59.03" y="1103.5" ></text>
</g>
<g >
<title>[[vdso]] (6 samples, 0.03%)</title><rect x="121.0" y="2021" width="0.4" height="15.0" fill="rgb(212,10,33)" rx="2" ry="2" />
<text  x="124.00" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1525" width="0.2" height="15.0" fill="rgb(236,31,23)" rx="2" ry="2" />
<text  x="160.76" y="1535.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="153.8" y="1669" width="0.1" height="15.0" fill="rgb(219,227,41)" rx="2" ry="2" />
<text  x="156.78" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (88 samples, 0.44%)</title><rect x="191.4" y="1733" width="5.3" height="15.0" fill="rgb(229,7,48)" rx="2" ry="2" />
<text  x="194.43" y="1743.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (47 samples, 0.24%)</title><rect x="958.0" y="2053" width="2.8" height="15.0" fill="rgb(233,169,1)" rx="2" ry="2" />
<text  x="960.97" y="2063.5" ></text>
</g>
<g >
<title>handle_mm_fault (19 samples, 0.10%)</title><rect x="689.9" y="1797" width="1.2" height="15.0" fill="rgb(206,120,1)" rx="2" ry="2" />
<text  x="692.94" y="1807.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="84.9" y="1589" width="0.1" height="15.0" fill="rgb(210,209,7)" rx="2" ry="2" />
<text  x="87.89" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1333" width="0.3" height="15.0" fill="rgb(251,6,25)" rx="2" ry="2" />
<text  x="1189.79" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="981" width="0.5" height="15.0" fill="rgb(243,3,34)" rx="2" ry="2" />
<text  x="1190.21" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (488 samples, 2.46%)</title><rect x="186.3" y="1957" width="28.9" height="15.0" fill="rgb(226,165,0)" rx="2" ry="2" />
<text  x="189.27" y="1967.5" >st..</text>
</g>
<g >
<title>wake_up_q (2 samples, 0.01%)</title><rect x="760.1" y="1893" width="0.1" height="15.0" fill="rgb(224,185,9)" rx="2" ry="2" />
<text  x="763.08" y="1903.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="1111.2" y="2037" width="0.2" height="15.0" fill="rgb(217,4,32)" rx="2" ry="2" />
<text  x="1114.19" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (20 samples, 0.10%)</title><rect x="689.9" y="1813" width="1.2" height="15.0" fill="rgb(243,132,43)" rx="2" ry="2" />
<text  x="692.89" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (79 samples, 0.40%)</title><rect x="146.7" y="1685" width="4.6" height="15.0" fill="rgb(227,156,11)" rx="2" ry="2" />
<text  x="149.65" y="1695.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (41 samples, 0.21%)</title><rect x="988.3" y="2053" width="2.4" height="15.0" fill="rgb(233,39,31)" rx="2" ry="2" />
<text  x="991.31" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="213.2" y="1717" width="0.2" height="15.0" fill="rgb(211,99,4)" rx="2" ry="2" />
<text  x="216.23" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1187.3" y="85" width="0.4" height="15.0" fill="rgb(212,129,23)" rx="2" ry="2" />
<text  x="1190.27" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.8" y="1285" width="0.3" height="15.0" fill="rgb(214,203,35)" rx="2" ry="2" />
<text  x="1189.79" y="1295.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.02%)</title><rect x="566.6" y="1893" width="0.2" height="15.0" fill="rgb(235,10,54)" rx="2" ry="2" />
<text  x="569.59" y="1903.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (27 samples, 0.14%)</title><rect x="28.2" y="2053" width="1.6" height="15.0" fill="rgb(248,218,5)" rx="2" ry="2" />
<text  x="31.23" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="1187.1" y="1253" width="0.6" height="15.0" fill="rgb(234,199,44)" rx="2" ry="2" />
<text  x="1190.15" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="870.9" y="2021" width="0.1" height="15.0" fill="rgb(207,133,22)" rx="2" ry="2" />
<text  x="873.90" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.8" y="1269" width="0.3" height="15.0" fill="rgb(254,101,23)" rx="2" ry="2" />
<text  x="1189.79" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.2" y="357" width="0.4" height="15.0" fill="rgb(208,103,2)" rx="2" ry="2" />
<text  x="1189.20" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="158.0" y="1717" width="0.1" height="15.0" fill="rgb(253,69,52)" rx="2" ry="2" />
<text  x="161.00" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (76 samples, 0.38%)</title><rect x="132.4" y="1637" width="4.5" height="15.0" fill="rgb(226,80,24)" rx="2" ry="2" />
<text  x="135.40" y="1647.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="195.1" y="1589" width="0.2" height="15.0" fill="rgb(226,201,21)" rx="2" ry="2" />
<text  x="198.12" y="1599.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (6 samples, 0.03%)</title><rect x="159.0" y="1637" width="0.4" height="15.0" fill="rgb(206,93,2)" rx="2" ry="2" />
<text  x="162.01" y="1647.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="575.4" y="1877" width="0.1" height="15.0" fill="rgb(215,111,38)" rx="2" ry="2" />
<text  x="578.38" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="215.5" y="1621" width="0.5" height="15.0" fill="rgb(233,34,27)" rx="2" ry="2" />
<text  x="218.55" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (449 samples, 2.26%)</title><rect x="158.5" y="1941" width="26.6" height="15.0" fill="rgb(226,2,25)" rx="2" ry="2" />
<text  x="161.47" y="1951.5" >s..</text>
</g>
<g >
<title>__asan::Allocator::Deallocate (13 samples, 0.07%)</title><rect x="1150.9" y="2037" width="0.7" height="15.0" fill="rgb(249,16,1)" rx="2" ry="2" />
<text  x="1153.86" y="2047.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (3,771 samples, 18.98%)</title><rect x="524.3" y="2005" width="224.0" height="15.0" fill="rgb(223,154,52)" rx="2" ry="2" />
<text  x="527.31" y="2015.5" >std::_Function_handler&lt;std::u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1187.2" y="1061" width="0.5" height="15.0" fill="rgb(231,94,52)" rx="2" ry="2" />
<text  x="1190.21" y="1071.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (14 samples, 0.07%)</title><rect x="993.7" y="2053" width="0.9" height="15.0" fill="rgb(236,216,32)" rx="2" ry="2" />
<text  x="996.72" y="2063.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (4 samples, 0.02%)</title><rect x="131.3" y="1877" width="0.3" height="15.0" fill="rgb(233,219,48)" rx="2" ry="2" />
<text  x="134.33" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="185.2" y="1893" width="0.4" height="15.0" fill="rgb(248,190,26)" rx="2" ry="2" />
<text  x="188.20" y="1903.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (4 samples, 0.02%)</title><rect x="653.9" y="1877" width="0.2" height="15.0" fill="rgb(210,210,36)" rx="2" ry="2" />
<text  x="656.90" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1186.1" y="1589" width="0.5" height="15.0" fill="rgb(216,46,12)" rx="2" ry="2" />
<text  x="1189.14" y="1599.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (4 samples, 0.02%)</title><rect x="1015.9" y="2053" width="0.2" height="15.0" fill="rgb(222,122,49)" rx="2" ry="2" />
<text  x="1018.87" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.7" y="1621" width="0.4" height="15.0" fill="rgb(221,46,25)" rx="2" ry="2" />
<text  x="1189.73" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.06%)</title><rect x="157.5" y="1941" width="0.6" height="15.0" fill="rgb(238,205,16)" rx="2" ry="2" />
<text  x="160.46" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1186.9" y="181" width="0.2" height="15.0" fill="rgb(227,182,2)" rx="2" ry="2" />
<text  x="1189.91" y="191.5" ></text>
</g>
<g >
<title>get_futex_key (2 samples, 0.01%)</title><rect x="29.1" y="1909" width="0.1" height="15.0" fill="rgb(228,143,14)" rx="2" ry="2" />
<text  x="32.06" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="215.4" y="1877" width="0.6" height="15.0" fill="rgb(236,145,21)" rx="2" ry="2" />
<text  x="218.43" y="1887.5" ></text>
</g>
<g >
<title>perf_iterate_sb (2 samples, 0.01%)</title><rect x="1095.9" y="1909" width="0.1" height="15.0" fill="rgb(247,145,33)" rx="2" ry="2" />
<text  x="1098.87" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (464 samples, 2.34%)</title><rect x="56.0" y="1573" width="27.5" height="15.0" fill="rgb(219,209,45)" rx="2" ry="2" />
<text  x="58.97" y="1583.5" >[..</text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="169.4" y="1605" width="0.1" height="15.0" fill="rgb(226,41,38)" rx="2" ry="2" />
<text  x="172.40" y="1615.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (8 samples, 0.04%)</title><rect x="653.4" y="1877" width="0.5" height="15.0" fill="rgb(210,119,24)" rx="2" ry="2" />
<text  x="656.42" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.04%)</title><rect x="1187.2" y="517" width="0.5" height="15.0" fill="rgb(253,171,20)" rx="2" ry="2" />
<text  x="1190.21" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (76 samples, 0.38%)</title><rect x="132.4" y="1621" width="4.5" height="15.0" fill="rgb(252,187,27)" rx="2" ry="2" />
<text  x="135.40" y="1631.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (3 samples, 0.02%)</title><rect x="760.4" y="1877" width="0.2" height="15.0" fill="rgb(240,177,49)" rx="2" ry="2" />
<text  x="763.44" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="158.0" y="1365" width="0.1" height="15.0" fill="rgb(233,55,13)" rx="2" ry="2" />
<text  x="161.00" y="1375.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="631.2" y="1877" width="0.3" height="15.0" fill="rgb(212,172,19)" rx="2" ry="2" />
<text  x="634.21" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="389" width="0.4" height="15.0" fill="rgb(218,89,36)" rx="2" ry="2" />
<text  x="1189.20" y="399.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="145.2" y="1605" width="0.1" height="15.0" fill="rgb(247,52,0)" rx="2" ry="2" />
<text  x="148.17" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (77 samples, 0.39%)</title><rect x="132.3" y="1685" width="4.6" height="15.0" fill="rgb(250,122,44)" rx="2" ry="2" />
<text  x="135.34" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="215.8" y="1173" width="0.2" height="15.0" fill="rgb(239,80,24)" rx="2" ry="2" />
<text  x="218.84" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (74 samples, 0.37%)</title><rect x="169.6" y="1717" width="4.4" height="15.0" fill="rgb(241,110,53)" rx="2" ry="2" />
<text  x="172.64" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="157.5" y="1893" width="0.6" height="15.0" fill="rgb(229,102,35)" rx="2" ry="2" />
<text  x="160.52" y="1903.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.05%)</title><rect x="515.0" y="1989" width="0.5" height="15.0" fill="rgb(233,14,37)" rx="2" ry="2" />
<text  x="517.98" y="1999.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (4 samples, 0.02%)</title><rect x="1095.3" y="1845" width="0.3" height="15.0" fill="rgb(232,164,18)" rx="2" ry="2" />
<text  x="1098.33" y="1855.5" ></text>
</g>
<g >
<title>__do_page_fault (7 samples, 0.04%)</title><rect x="1017.8" y="2005" width="0.4" height="15.0" fill="rgb(251,25,29)" rx="2" ry="2" />
<text  x="1020.83" y="2015.5" ></text>
</g>
<g >
<title>__asan_memcpy (10 samples, 0.05%)</title><rect x="651.0" y="1877" width="0.6" height="15.0" fill="rgb(207,153,2)" rx="2" ry="2" />
<text  x="653.99" y="1887.5" ></text>
</g>
<g >
<title>do_wp_page (4 samples, 0.02%)</title><rect x="1093.1" y="1957" width="0.3" height="15.0" fill="rgb(245,1,17)" rx="2" ry="2" />
<text  x="1096.14" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.2" y="1541" width="0.4" height="15.0" fill="rgb(212,180,3)" rx="2" ry="2" />
<text  x="1189.20" y="1551.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (63 samples, 0.32%)</title><rect x="1102.3" y="2053" width="3.7" height="15.0" fill="rgb(253,16,13)" rx="2" ry="2" />
<text  x="1105.28" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="864.3" y="2005" width="0.1" height="15.0" fill="rgb(230,136,40)" rx="2" ry="2" />
<text  x="867.31" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="482.6" y="1925" width="0.1" height="15.0" fill="rgb(242,22,32)" rx="2" ry="2" />
<text  x="485.56" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (107 samples, 0.54%)</title><rect x="158.8" y="1717" width="6.3" height="15.0" fill="rgb(251,201,7)" rx="2" ry="2" />
<text  x="161.77" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (563 samples, 2.83%)</title><rect x="56.0" y="1925" width="33.4" height="15.0" fill="rgb(246,26,47)" rx="2" ry="2" />
<text  x="58.97" y="1935.5" >[u..</text>
</g>
<g >
<title>native_flush_tlb_others (4 samples, 0.02%)</title><rect x="520.7" y="1893" width="0.3" height="15.0" fill="rgb(226,155,37)" rx="2" ry="2" />
<text  x="523.75" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (327 samples, 1.65%)</title><rect x="132.0" y="1797" width="19.4" height="15.0" fill="rgb(228,177,35)" rx="2" ry="2" />
<text  x="134.99" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="747.5" y="1957" width="0.1" height="15.0" fill="rgb(253,39,16)" rx="2" ry="2" />
<text  x="750.49" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="517.4" y="1909" width="0.3" height="15.0" fill="rgb(207,91,47)" rx="2" ry="2" />
<text  x="520.42" y="1919.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (2 samples, 0.01%)</title><rect x="729.5" y="1893" width="0.1" height="15.0" fill="rgb(213,90,25)" rx="2" ry="2" />
<text  x="732.50" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (68 samples, 0.34%)</title><rect x="92.9" y="2021" width="4.0" height="15.0" fill="rgb(207,78,4)" rx="2" ry="2" />
<text  x="95.91" y="2031.5" ></text>
</g>
<g >
<title>std::packaged_task&lt;boost::optional&lt;TDocument&gt;  (2 samples, 0.01%)</title><rect x="131.6" y="1989" width="0.1" height="15.0" fill="rgb(242,116,52)" rx="2" ry="2" />
<text  x="134.57" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="157.8" y="1461" width="0.2" height="15.0" fill="rgb(224,195,22)" rx="2" ry="2" />
<text  x="160.76" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="185.4" y="1381" width="0.2" height="15.0" fill="rgb(208,207,54)" rx="2" ry="2" />
<text  x="188.44" y="1391.5" ></text>
</g>
<g >
<title>do_page_fault (44 samples, 0.22%)</title><rect x="505.7" y="1941" width="2.6" height="15.0" fill="rgb(254,176,40)" rx="2" ry="2" />
<text  x="508.72" y="1951.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (67 samples, 0.34%)</title><rect x="724.7" y="1877" width="4.0" height="15.0" fill="rgb(224,203,39)" rx="2" ry="2" />
<text  x="727.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (91 samples, 0.46%)</title><rect x="196.8" y="1717" width="5.4" height="15.0" fill="rgb(215,176,50)" rx="2" ry="2" />
<text  x="199.78" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="80.1" y="1397" width="0.2" height="15.0" fill="rgb(250,118,40)" rx="2" ry="2" />
<text  x="83.14" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_default_append (2 samples, 0.01%)</title><rect x="158.1" y="1941" width="0.1" height="15.0" fill="rgb(230,8,31)" rx="2" ry="2" />
<text  x="161.12" y="1951.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (2,986 samples, 15.03%)</title><rect x="569.7" y="1941" width="177.3" height="15.0" fill="rgb(253,229,6)" rx="2" ry="2" />
<text  x="572.68" y="1951.5" >onmt::ITokenizer::token..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (88 samples, 0.44%)</title><rect x="202.2" y="1765" width="5.3" height="15.0" fill="rgb(225,126,17)" rx="2" ry="2" />
<text  x="205.24" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="167.7" y="1573" width="0.1" height="15.0" fill="rgb(244,40,19)" rx="2" ry="2" />
<text  x="170.68" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="157.8" y="1221" width="0.1" height="15.0" fill="rgb(237,195,54)" rx="2" ry="2" />
<text  x="160.82" y="1231.5" ></text>
</g>
</g>
</svg>
